[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 10): NAME(NAME) 'encode'
[00](01, 10)-(01, 11): LPAR(OP) '('
[00](01, 11)-(01, 12): NAME(NAME) 's'
[00](01, 12)-(01, 13): COMMA(OP) ','
[00](01, 14)-(01, 15): NAME(NAME) 'n'
[00](01, 15)-(01, 16): RPAR(OP) ')'
[00](01, 16)-(01, 17): COLON(OP) ':'
[00](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 10): NAME(NAME) 'string'
[01](01, 11)-(01, 12): EQUAL(OP) '='
[01](01, 13)-(01, 15): STRING(STRING) '""'
[01](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 07): NAME(NAME) 'for'
[02](01, 08)-(01, 09): NAME(NAME) 'i'
[02](01, 10)-(01, 12): NAME(NAME) 'in'
[02](01, 13)-(01, 14): NAME(NAME) 's'
[02](01, 14)-(01, 15): COLON(OP) ':'
[02](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 08): INDENT(INDENT) '        '
[03](01, 08)-(01, 10): NAME(NAME) 'if'
[03](01, 11)-(01, 14): STRING(STRING) "'a'"
[03](01, 15)-(01, 17): LESSEQUAL(OP) '<='
[03](01, 18)-(01, 19): NAME(NAME) 'i'
[03](01, 20)-(01, 22): LESSEQUAL(OP) '<='
[03](01, 23)-(01, 24): LPAR(OP) '('
[03](01, 24)-(01, 27): NAME(NAME) 'chr'
[03](01, 27)-(01, 28): LPAR(OP) '('
[03](01, 28)-(01, 31): NAME(NAME) 'ord'
[03](01, 31)-(01, 32): LPAR(OP) '('
[03](01, 32)-(01, 35): STRING(STRING) "'z'"
[03](01, 35)-(01, 36): RPAR(OP) ')'
[03](01, 37)-(01, 38): MINUS(OP) '-'
[03](01, 39)-(01, 40): NAME(NAME) 'n'
[03](01, 40)-(01, 41): RPAR(OP) ')'
[03](01, 42)-(01, 43): PERCENT(OP) '%'
[03](01, 44)-(01, 46): NUMBER(NUMBER) '26'
[03](01, 46)-(01, 47): RPAR(OP) ')'
[03](01, 48)-(01, 50): NAME(NAME) 'or'
[03](01, 51)-(01, 54): STRING(STRING) "'A'"
[03](01, 55)-(01, 57): LESSEQUAL(OP) '<='
[03](01, 58)-(01, 59): NAME(NAME) 'i'
[03](01, 60)-(01, 62): LESSEQUAL(OP) '<='
[03](01, 63)-(01, 64): LPAR(OP) '('
[03](01, 64)-(01, 67): NAME(NAME) 'chr'
[03](01, 67)-(01, 68): LPAR(OP) '('
[03](01, 68)-(01, 71): NAME(NAME) 'ord'
[03](01, 71)-(01, 72): LPAR(OP) '('
[03](01, 72)-(01, 75): STRING(STRING) "'A'"
[03](01, 75)-(01, 76): RPAR(OP) ')'
[03](01, 77)-(01, 78): MINUS(OP) '-'
[03](01, 79)-(01, 80): NAME(NAME) 'n'
[03](01, 80)-(01, 81): RPAR(OP) ')'
[03](01, 82)-(01, 83): PERCENT(OP) '%'
[03](01, 84)-(01, 86): NUMBER(NUMBER) '26'
[03](01, 86)-(01, 87): RPAR(OP) ')'
[03](01, 87)-(01, 88): COLON(OP) ':'
[03](01, 88)-(01, 89): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 12): INDENT(INDENT) '            '
[04](01, 12)-(01, 18): NAME(NAME) 'string'
[04](01, 19)-(01, 20): EQUAL(OP) '='
[04](01, 21)-(01, 27): NAME(NAME) 'string'
[04](01, 28)-(01, 29): PLUS(OP) '+'
[04](01, 30)-(01, 33): NAME(NAME) 'chr'
[04](01, 33)-(01, 34): LPAR(OP) '('
[04](01, 34)-(01, 37): NAME(NAME) 'ord'
[04](01, 37)-(01, 38): LPAR(OP) '('
[04](01, 38)-(01, 39): NAME(NAME) 'i'
[04](01, 39)-(01, 40): RPAR(OP) ')'
[04](01, 41)-(01, 42): PLUS(OP) '+'
[04](01, 43)-(01, 44): NAME(NAME) 'n'
[04](01, 44)-(01, 45): RPAR(OP) ')'
[04](01, 45)-(01, 46): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 08): INDENT(INDENT) '        '
[05](01, 08)-(01, 12): NAME(NAME) 'elif'
[05](01, 13)-(01, 16): NAME(NAME) 'chr'
[05](01, 16)-(01, 17): LPAR(OP) '('
[05](01, 17)-(01, 20): NAME(NAME) 'ord'
[05](01, 20)-(01, 21): LPAR(OP) '('
[05](01, 21)-(01, 24): STRING(STRING) "'a'"
[05](01, 24)-(01, 25): RPAR(OP) ')'
[05](01, 26)-(01, 27): MINUS(OP) '-'
[05](01, 28)-(01, 29): NAME(NAME) 'n'
[05](01, 30)-(01, 31): PLUS(OP) '+'
[05](01, 32)-(01, 33): NUMBER(NUMBER) '1'
[05](01, 33)-(01, 34): RPAR(OP) ')'
[05](01, 35)-(01, 37): LESSEQUAL(OP) '<='
[05](01, 38)-(01, 39): NAME(NAME) 'i'
[05](01, 40)-(01, 42): LESSEQUAL(OP) '<='
[05](01, 43)-(01, 46): STRING(STRING) "'z'"
[05](01, 47)-(01, 49): NAME(NAME) 'or'
[05](01, 50)-(01, 53): NAME(NAME) 'chr'
[05](01, 53)-(01, 54): LPAR(OP) '('
[05](01, 54)-(01, 57): NAME(NAME) 'ord'
[05](01, 57)-(01, 58): LPAR(OP) '('
[05](01, 58)-(01, 61): STRING(STRING) "'A'"
[05](01, 61)-(01, 62): RPAR(OP) ')'
[05](01, 63)-(01, 64): MINUS(OP) '-'
[05](01, 65)-(01, 66): NAME(NAME) 'n'
[05](01, 67)-(01, 68): PLUS(OP) '+'
[05](01, 69)-(01, 70): NUMBER(NUMBER) '1'
[05](01, 70)-(01, 71): RPAR(OP) ')'
[05](01, 72)-(01, 74): LESSEQUAL(OP) '<='
[05](01, 75)-(01, 76): NAME(NAME) 'i'
[05](01, 77)-(01, 79): LESSEQUAL(OP) '<='
[05](01, 80)-(01, 83): STRING(STRING) "'Z'"
[05](01, 83)-(01, 84): COLON(OP) ':'
[05](01, 84)-(01, 85): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 12): INDENT(INDENT) '            '
[06](01, 12)-(01, 18): NAME(NAME) 'string'
[06](01, 19)-(01, 20): EQUAL(OP) '='
[06](01, 21)-(01, 27): NAME(NAME) 'string'
[06](01, 28)-(01, 29): PLUS(OP) '+'
[06](01, 30)-(01, 33): NAME(NAME) 'chr'
[06](01, 33)-(01, 34): LPAR(OP) '('
[06](01, 34)-(01, 37): NAME(NAME) 'ord'
[06](01, 37)-(01, 38): LPAR(OP) '('
[06](01, 38)-(01, 39): NAME(NAME) 'i'
[06](01, 39)-(01, 40): RPAR(OP) ')'
[06](01, 41)-(01, 42): MINUS(OP) '-'
[06](01, 43)-(01, 44): LPAR(OP) '('
[06](01, 44)-(01, 46): NUMBER(NUMBER) '26'
[06](01, 47)-(01, 48): MINUS(OP) '-'
[06](01, 49)-(01, 50): NAME(NAME) 'n'
[06](01, 50)-(01, 51): RPAR(OP) ')'
[06](01, 51)-(01, 52): RPAR(OP) ')'
[06](01, 52)-(01, 53): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 08): INDENT(INDENT) '        '
[07](01, 08)-(01, 12): NAME(NAME) 'else'
[07](01, 12)-(01, 13): COLON(OP) ':'
[07](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 12): INDENT(INDENT) '            '
[08](01, 12)-(01, 18): NAME(NAME) 'string'
[08](01, 19)-(01, 20): EQUAL(OP) '='
[08](01, 21)-(01, 27): NAME(NAME) 'string'
[08](01, 28)-(01, 29): PLUS(OP) '+'
[08](01, 30)-(01, 31): NAME(NAME) 'i'
[08](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 10): NAME(NAME) 'return'
[09](01, 11)-(01, 17): NAME(NAME) 'string'
[09](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 01): NL(NL) '\n'
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 03): NAME(NAME) 'def'
[11](01, 04)-(01, 10): NAME(NAME) 'decode'
[11](01, 10)-(01, 11): LPAR(OP) '('
[11](01, 11)-(01, 12): NAME(NAME) 's'
[11](01, 12)-(01, 13): COMMA(OP) ','
[11](01, 14)-(01, 15): NAME(NAME) 'n'
[11](01, 15)-(01, 16): RPAR(OP) ')'
[11](01, 16)-(01, 17): COLON(OP) ':'
[11](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 04): INDENT(INDENT) '    '
[12](01, 04)-(01, 10): NAME(NAME) 'encode'
[12](01, 10)-(01, 11): LPAR(OP) '('
[12](01, 11)-(01, 12): NAME(NAME) 's'
[12](01, 12)-(01, 13): COMMA(OP) ','
[12](01, 13)-(01, 14): LPAR(OP) '('
[12](01, 14)-(01, 15): MINUS(OP) '-'
[12](01, 15)-(01, 16): NUMBER(NUMBER) '1'
[12](01, 16)-(01, 17): RPAR(OP) ')'
[12](01, 17)-(01, 18): STAR(OP) '*'
[12](01, 18)-(01, 19): NAME(NAME) 'n'
[12](01, 19)-(01, 20): RPAR(OP) ')'
[12](01, 20)-(01, 21): NEWLINE(NEWLINE)
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

