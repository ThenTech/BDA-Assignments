[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 04): NAME(NAME) 'word'
[00](01, 05)-(01, 06): EQUAL(OP) '='
[00](01, 07)-(01, 12): NAME(NAME) 'input'
[00](01, 12)-(01, 13): LPAR(OP) '('
[00](01, 13)-(01, 14): RPAR(OP) ')'
[00](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 01): NL(NL) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 11): NAME(NAME) 'lengtewoord'
[02](01, 12)-(01, 13): EQUAL(OP) '='
[02](01, 14)-(01, 17): NAME(NAME) 'len'
[02](01, 17)-(01, 18): LPAR(OP) '('
[02](01, 18)-(01, 22): NAME(NAME) 'word'
[02](01, 22)-(01, 23): RPAR(OP) ')'
[02](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 12): NAME(NAME) 'ispalindrome'
[03](01, 13)-(01, 14): EQUAL(OP) '='
[03](01, 15)-(01, 19): NAME(NAME) 'True'
[03](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 06): NAME(NAME) 'teller'
[04](01, 07)-(01, 08): EQUAL(OP) '='
[04](01, 09)-(01, 10): NUMBER(NUMBER) '0'
[04](01, 10)-(01, 11): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 01): NL(NL) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 05): NAME(NAME) 'while'
[06](01, 06)-(01, 18): NAME(NAME) 'ispalindrome'
[06](01, 19)-(01, 22): NAME(NAME) 'and'
[06](01, 23)-(01, 29): NAME(NAME) 'teller'
[06](01, 30)-(01, 31): LESS(OP) '<'
[06](01, 32)-(01, 43): NAME(NAME) 'lengtewoord'
[06](01, 44)-(01, 45): SLASH(OP) '/'
[06](01, 46)-(01, 47): NUMBER(NUMBER) '2'
[06](01, 47)-(01, 48): COLON(OP) ':'
[06](01, 48)-(01, 49): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 04): INDENT(INDENT) '    '
[07](01, 04)-(01, 06): NAME(NAME) 'if'
[07](01, 07)-(01, 11): NAME(NAME) 'word'
[07](01, 11)-(01, 12): LSQB(OP) '['
[07](01, 12)-(01, 18): NAME(NAME) 'teller'
[07](01, 18)-(01, 19): RSQB(OP) ']'
[07](01, 20)-(01, 22): EQEQUAL(OP) '=='
[07](01, 23)-(01, 27): NAME(NAME) 'word'
[07](01, 27)-(01, 28): LSQB(OP) '['
[07](01, 28)-(01, 38): NAME(NAME) 'lengteword'
[07](01, 39)-(01, 40): MINUS(OP) '-'
[07](01, 41)-(01, 42): NUMBER(NUMBER) '1'
[07](01, 43)-(01, 44): MINUS(OP) '-'
[07](01, 45)-(01, 51): NAME(NAME) 'teller'
[07](01, 51)-(01, 52): RSQB(OP) ']'
[07](01, 52)-(01, 53): COLON(OP) ':'
[07](01, 53)-(01, 54): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 07): INDENT(INDENT) '       '
[08](01, 07)-(01, 13): NAME(NAME) 'teller'
[08](01, 14)-(01, 16): PLUSEQUAL(OP) '+='
[08](01, 17)-(01, 18): NUMBER(NUMBER) '1'
[08](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 08): NAME(NAME) 'else'
[09](01, 08)-(01, 09): COLON(OP) ':'
[09](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 08): INDENT(INDENT) '        '
[10](01, 08)-(01, 20): NAME(NAME) 'ispalindrome'
[10](01, 21)-(01, 22): EQUAL(OP) '='
[10](01, 23)-(01, 28): NAME(NAME) 'false'
[10](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 08): INDENT(INDENT) '        '
[11](01, 08)-(01, 13): NAME(NAME) 'print'
[11](01, 13)-(01, 14): LPAR(OP) '('
[11](01, 14)-(01, 18): NAME(NAME) 'word'
[11](01, 18)-(01, 19): COMMA(OP) ','
[11](01, 20)-(01, 41): STRING(STRING) '"is not a palindrome"'
[11](01, 41)-(01, 42): RPAR(OP) ')'
[11](01, 42)-(01, 43): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 05): NAME(NAME) 'print'
[12](01, 05)-(01, 06): LPAR(OP) '('
[12](01, 06)-(01, 10): NAME(NAME) 'word'
[12](01, 10)-(01, 11): COMMA(OP) ','
[12](01, 12)-(01, 29): STRING(STRING) '"is a palindrome"'
[12](01, 29)-(01, 30): RPAR(OP) ')'
[12](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 01): NL(NL) '\n'
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 00): ENDMARKER(ENDMARKER)

