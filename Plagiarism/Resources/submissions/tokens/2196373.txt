[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 26): NAME(NAME) 'is_palindrome_sentence'
[00](01, 26)-(01, 27): LPAR(OP) '('
[00](01, 27)-(01, 35): NAME(NAME) 'sentence'
[00](01, 35)-(01, 36): RPAR(OP) ')'
[00](01, 36)-(01, 37): COLON(OP) ':'
[00](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 16): NAME(NAME) 'new_sentence'
[01](01, 17)-(01, 18): EQUAL(OP) '='
[01](01, 19)-(01, 36): NAME(NAME) 'remove_extra_char'
[01](01, 36)-(01, 37): LPAR(OP) '('
[01](01, 37)-(01, 45): NAME(NAME) 'sentence'
[01](01, 45)-(01, 46): RPAR(OP) ')'
[01](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 04)-(01, 05): NL(NL) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 07): NAME(NAME) 'for'
[03](01, 08)-(01, 13): NAME(NAME) 'index'
[03](01, 14)-(01, 16): NAME(NAME) 'in'
[03](01, 17)-(01, 22): NAME(NAME) 'range'
[03](01, 22)-(01, 23): LPAR(OP) '('
[03](01, 23)-(01, 26): NAME(NAME) 'len'
[03](01, 26)-(01, 27): LPAR(OP) '('
[03](01, 27)-(01, 39): NAME(NAME) 'new_sentence'
[03](01, 39)-(01, 40): RPAR(OP) ')'
[03](01, 41)-(01, 43): DOUBLESLASH(OP) '//'
[03](01, 44)-(01, 45): NUMBER(NUMBER) '2'
[03](01, 45)-(01, 46): RPAR(OP) ')'
[03](01, 46)-(01, 47): COLON(OP) ':'
[03](01, 47)-(01, 48): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 08): INDENT(INDENT) '        '
[04](01, 08)-(01, 10): NAME(NAME) 'if'
[04](01, 11)-(01, 23): NAME(NAME) 'new_sentence'
[04](01, 23)-(01, 24): LSQB(OP) '['
[04](01, 24)-(01, 29): NAME(NAME) 'index'
[04](01, 29)-(01, 30): RSQB(OP) ']'
[04](01, 31)-(01, 33): NOTEQUAL(OP) '!='
[04](01, 34)-(01, 46): NAME(NAME) 'new_sentence'
[04](01, 46)-(01, 47): LSQB(OP) '['
[04](01, 47)-(01, 50): NAME(NAME) 'len'
[04](01, 50)-(01, 51): LPAR(OP) '('
[04](01, 51)-(01, 63): NAME(NAME) 'new_sentence'
[04](01, 63)-(01, 64): RPAR(OP) ')'
[04](01, 65)-(01, 66): MINUS(OP) '-'
[04](01, 67)-(01, 72): NAME(NAME) 'index'
[04](01, 73)-(01, 74): MINUS(OP) '-'
[04](01, 75)-(01, 76): NUMBER(NUMBER) '1'
[04](01, 76)-(01, 77): RSQB(OP) ']'
[04](01, 77)-(01, 78): COLON(OP) ':'
[04](01, 78)-(01, 79): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 12): INDENT(INDENT) '            '
[05](01, 12)-(01, 18): NAME(NAME) 'return'
[05](01, 19)-(01, 24): NAME(NAME) 'False'
[05](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 04): INDENT(INDENT) '    '
[06](01, 04)-(01, 10): NAME(NAME) 'return'
[06](01, 11)-(01, 15): NAME(NAME) 'True'
[06](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 04)-(01, 05): NL(NL) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 01): NL(NL) '\n'
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 03): NAME(NAME) 'def'
[09](01, 04)-(01, 21): NAME(NAME) 'remove_extra_char'
[09](01, 21)-(01, 22): LPAR(OP) '('
[09](01, 22)-(01, 28): NAME(NAME) 'string'
[09](01, 28)-(01, 29): RPAR(OP) ')'
[09](01, 29)-(01, 30): COLON(OP) ':'
[09](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 04): INDENT(INDENT) '    '
[10](01, 04)-(01, 14): NAME(NAME) 'new_string'
[10](01, 15)-(01, 16): EQUAL(OP) '='
[10](01, 17)-(01, 19): STRING(STRING) '""'
[10](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 04): INDENT(INDENT) '    '
[11](01, 04)-(01, 07): NAME(NAME) 'for'
[11](01, 08)-(01, 12): NAME(NAME) 'char'
[11](01, 13)-(01, 15): NAME(NAME) 'in'
[11](01, 16)-(01, 22): NAME(NAME) 'string'
[11](01, 22)-(01, 23): COLON(OP) ':'
[11](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 08): INDENT(INDENT) '        '
[12](01, 08)-(01, 10): NAME(NAME) 'if'
[12](01, 11)-(01, 15): NAME(NAME) 'char'
[12](01, 16)-(01, 18): NAME(NAME) 'in'
[12](01, 19)-(01, 73): STRING(STRING) "'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'"
[12](01, 73)-(01, 74): COLON(OP) ':'
[12](01, 74)-(01, 75): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 12): INDENT(INDENT) '            '
[13](01, 12)-(01, 22): NAME(NAME) 'new_string'
[13](01, 23)-(01, 25): PLUSEQUAL(OP) '+='
[13](01, 26)-(01, 30): NAME(NAME) 'char'
[13](01, 30)-(01, 31): DOT(OP) '.'
[13](01, 31)-(01, 36): NAME(NAME) 'lower'
[13](01, 36)-(01, 37): LPAR(OP) '('
[13](01, 37)-(01, 38): RPAR(OP) ')'
[13](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 04): INDENT(INDENT) '    '
[14](01, 04)-(01, 10): NAME(NAME) 'return'
[14](01, 11)-(01, 21): NAME(NAME) 'new_string'
[14](01, 21)-(01, 22): NEWLINE(NEWLINE)
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

