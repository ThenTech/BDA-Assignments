[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 07): NAME(NAME) 'string1'
[00](01, 08)-(01, 09): EQUAL(OP) '='
[00](01, 10)-(01, 15): NAME(NAME) 'input'
[00](01, 15)-(01, 16): LPAR(OP) '('
[00](01, 16)-(01, 44): STRING(STRING) '"give me the first string: "'
[00](01, 44)-(01, 45): RPAR(OP) ')'
[00](01, 45)-(01, 46): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 07): NAME(NAME) 'string2'
[01](01, 08)-(01, 09): EQUAL(OP) '='
[01](01, 10)-(01, 15): NAME(NAME) 'input'
[01](01, 15)-(01, 16): LPAR(OP) '('
[01](01, 16)-(01, 54): STRING(STRING) '"give me the second and last string: "'
[01](01, 54)-(01, 55): RPAR(OP) ')'
[01](01, 55)-(01, 56): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 02): NAME(NAME) 'if'
[02](01, 03)-(01, 10): NAME(NAME) 'string1'
[02](01, 11)-(01, 13): EQEQUAL(OP) '=='
[02](01, 14)-(01, 34): STRING(STRING) '"tom marvolo riddle"'
[02](01, 35)-(01, 38): NAME(NAME) 'and'
[02](01, 39)-(01, 46): NAME(NAME) 'string2'
[02](01, 47)-(01, 49): EQEQUAL(OP) '=='
[02](01, 49)-(01, 70): STRING(STRING) '"i am lord voldemort"'
[02](01, 70)-(01, 71): COLON(OP) ':'
[02](01, 71)-(01, 72): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 09): NAME(NAME) 'print'
[03](01, 09)-(01, 10): LPAR(OP) '('
[03](01, 10)-(01, 67): STRING(STRING) '"tom marvolo riddle and i am lord voldemort are anagrams"'
[03](01, 67)-(01, 68): RPAR(OP) ')'
[03](01, 68)-(01, 69): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): NAME(NAME) 'else'
[04](01, 04)-(01, 05): COLON(OP) ':'
[04](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 06): NAME(NAME) 'if'
[05](01, 07)-(01, 13): NAME(NAME) 'sorted'
[05](01, 13)-(01, 14): LPAR(OP) '('
[05](01, 14)-(01, 21): NAME(NAME) 'string1'
[05](01, 21)-(01, 22): RPAR(OP) ')'
[05](01, 23)-(01, 25): EQEQUAL(OP) '=='
[05](01, 26)-(01, 32): NAME(NAME) 'sorted'
[05](01, 32)-(01, 33): LPAR(OP) '('
[05](01, 33)-(01, 40): NAME(NAME) 'string2'
[05](01, 40)-(01, 41): RPAR(OP) ')'
[05](01, 41)-(01, 42): COLON(OP) ':'
[05](01, 42)-(01, 43): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 08): INDENT(INDENT) '        '
[06](01, 08)-(01, 13): NAME(NAME) 'print'
[06](01, 13)-(01, 14): LPAR(OP) '('
[06](01, 14)-(01, 21): NAME(NAME) 'string1'
[06](01, 21)-(01, 22): COMMA(OP) ','
[06](01, 23)-(01, 28): STRING(STRING) '"and"'
[06](01, 28)-(01, 29): COMMA(OP) ','
[06](01, 30)-(01, 37): NAME(NAME) 'string2'
[06](01, 37)-(01, 38): COMMA(OP) ','
[06](01, 39)-(01, 53): STRING(STRING) '"are anagrams"'
[06](01, 53)-(01, 54): RPAR(OP) ')'
[06](01, 54)-(01, 55): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 04): INDENT(INDENT) '    '
[07](01, 04)-(01, 08): NAME(NAME) 'else'
[07](01, 08)-(01, 09): COLON(OP) ':'
[07](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 08): INDENT(INDENT) '        '
[08](01, 08)-(01, 13): NAME(NAME) 'print'
[08](01, 13)-(01, 14): LPAR(OP) '('
[08](01, 14)-(01, 21): NAME(NAME) 'string1'
[08](01, 21)-(01, 22): COMMA(OP) ','
[08](01, 23)-(01, 28): STRING(STRING) "'and'"
[08](01, 28)-(01, 29): COMMA(OP) ','
[08](01, 30)-(01, 37): NAME(NAME) 'string2'
[08](01, 37)-(01, 38): COMMA(OP) ','
[08](01, 39)-(01, 57): STRING(STRING) '"are not anagrams"'
[08](01, 57)-(01, 58): RPAR(OP) ')'
[08](01, 58)-(01, 59): NEWLINE(NEWLINE)
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

