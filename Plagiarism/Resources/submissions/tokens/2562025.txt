[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 19): NAME(NAME) 'create_sequence'
[00](01, 19)-(01, 20): LPAR(OP) '('
[00](01, 20)-(01, 26): NAME(NAME) 'string'
[00](01, 26)-(01, 27): COMMA(OP) ','
[00](01, 28)-(01, 33): NAME(NAME) 'index'
[00](01, 33)-(01, 34): COMMA(OP) ','
[00](01, 35)-(01, 41): NAME(NAME) 'length'
[00](01, 41)-(01, 42): RPAR(OP) ')'
[00](01, 42)-(01, 43): COLON(OP) ':'
[00](01, 43)-(01, 44): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 04)-(01, 34): COMMENT(COMMENT) '# Take absolute value of index'
[01](01, 34)-(01, 35): NL(NL) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 10): NAME(NAME) 'number'
[02](01, 11)-(01, 12): EQUAL(OP) '='
[02](01, 13)-(01, 15): STRING(STRING) '""'
[02](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 07): NAME(NAME) 'for'
[03](01, 08)-(01, 09): NAME(NAME) 'i'
[03](01, 10)-(01, 12): NAME(NAME) 'in'
[03](01, 13)-(01, 16): NAME(NAME) 'str'
[03](01, 16)-(01, 17): LPAR(OP) '('
[03](01, 17)-(01, 22): NAME(NAME) 'index'
[03](01, 22)-(01, 23): RPAR(OP) ')'
[03](01, 23)-(01, 24): COLON(OP) ':'
[03](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 08): INDENT(INDENT) '        '
[04](01, 08)-(01, 10): NAME(NAME) 'if'
[04](01, 11)-(01, 12): NAME(NAME) 'i'
[04](01, 13)-(01, 15): NOTEQUAL(OP) '!='
[04](01, 16)-(01, 19): STRING(STRING) '"-"'
[04](01, 19)-(01, 20): COLON(OP) ':'
[04](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 12): INDENT(INDENT) '            '
[05](01, 12)-(01, 18): NAME(NAME) 'number'
[05](01, 19)-(01, 21): PLUSEQUAL(OP) '+='
[05](01, 22)-(01, 23): NAME(NAME) 'i'
[05](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 04): INDENT(INDENT) '    '
[06](01, 04)-(01, 10): NAME(NAME) 'number'
[06](01, 11)-(01, 12): EQUAL(OP) '='
[06](01, 13)-(01, 16): NAME(NAME) 'int'
[06](01, 16)-(01, 17): LPAR(OP) '('
[06](01, 17)-(01, 23): NAME(NAME) 'number'
[06](01, 23)-(01, 24): RPAR(OP) ')'
[06](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 01): NL(NL) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 04)-(01, 60): COMMENT(COMMENT) '# Calculate the index on which the sequence should start'
[08](01, 60)-(01, 61): NL(NL) '\n'
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 15): NAME(NAME) 'start_index'
[09](01, 16)-(01, 17): EQUAL(OP) '='
[09](01, 18)-(01, 21): NAME(NAME) 'len'
[09](01, 21)-(01, 22): LPAR(OP) '('
[09](01, 22)-(01, 28): NAME(NAME) 'string'
[09](01, 28)-(01, 29): RPAR(OP) ')'
[09](01, 30)-(01, 31): PERCENT(OP) '%'
[09](01, 32)-(01, 38): NAME(NAME) 'number'
[09](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 01): NL(NL) '\n'
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 04)-(01, 58): COMMENT(COMMENT) '# Convert the string to start with the required letter'
[11](01, 58)-(01, 59): NL(NL) '\n'
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 04): INDENT(INDENT) '    '
[12](01, 04)-(01, 08): NAME(NAME) 'head'
[12](01, 09)-(01, 10): EQUAL(OP) '='
[12](01, 11)-(01, 17): NAME(NAME) 'string'
[12](01, 17)-(01, 18): LSQB(OP) '['
[12](01, 18)-(01, 29): NAME(NAME) 'start_index'
[12](01, 29)-(01, 30): COLON(OP) ':'
[12](01, 30)-(01, 31): RSQB(OP) ']'
[12](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 04): INDENT(INDENT) '    '
[13](01, 04)-(01, 08): NAME(NAME) 'tail'
[13](01, 09)-(01, 10): EQUAL(OP) '='
[13](01, 11)-(01, 17): NAME(NAME) 'string'
[13](01, 17)-(01, 18): LSQB(OP) '['
[13](01, 18)-(01, 19): COLON(OP) ':'
[13](01, 19)-(01, 30): NAME(NAME) 'start_index'
[13](01, 30)-(01, 31): RSQB(OP) ']'
[13](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 04): INDENT(INDENT) '    '
[14](01, 04)-(01, 14): NAME(NAME) 'new_string'
[14](01, 15)-(01, 16): EQUAL(OP) '='
[14](01, 17)-(01, 21): NAME(NAME) 'head'
[14](01, 22)-(01, 23): PLUS(OP) '+'
[14](01, 24)-(01, 28): NAME(NAME) 'tail'
[14](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 01): NL(NL) '\n'
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 04)-(01, 78): COMMENT(COMMENT) '# Calculate how many times the full string is needed and make the sequence'
[16](01, 78)-(01, 79): NL(NL) '\n'
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 04): INDENT(INDENT) '    '
[17](01, 04)-(01, 06): NAME(NAME) 'if'
[17](01, 07)-(01, 13): NAME(NAME) 'length'
[17](01, 14)-(01, 16): LESSEQUAL(OP) '<='
[17](01, 17)-(01, 20): NAME(NAME) 'len'
[17](01, 20)-(01, 21): LPAR(OP) '('
[17](01, 21)-(01, 27): NAME(NAME) 'string'
[17](01, 27)-(01, 28): RPAR(OP) ')'
[17](01, 28)-(01, 29): COLON(OP) ':'
[17](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 08): INDENT(INDENT) '        '
[18](01, 08)-(01, 14): NAME(NAME) 'amount'
[18](01, 15)-(01, 16): EQUAL(OP) '='
[18](01, 17)-(01, 18): NUMBER(NUMBER) '1'
[18](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 04): INDENT(INDENT) '    '
[19](01, 04)-(01, 08): NAME(NAME) 'else'
[19](01, 08)-(01, 09): COLON(OP) ':'
[19](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): DEDENT(DEDENT)
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 08): INDENT(INDENT) '        '
[20](01, 08)-(01, 14): NAME(NAME) 'amount'
[20](01, 15)-(01, 16): EQUAL(OP) '='
[20](01, 17)-(01, 18): LPAR(OP) '('
[20](01, 18)-(01, 24): NAME(NAME) 'length'
[20](01, 25)-(01, 27): DOUBLESLASH(OP) '//'
[20](01, 28)-(01, 31): NAME(NAME) 'len'
[20](01, 31)-(01, 32): LPAR(OP) '('
[20](01, 32)-(01, 38): NAME(NAME) 'string'
[20](01, 38)-(01, 39): RPAR(OP) ')'
[20](01, 39)-(01, 40): RPAR(OP) ')'
[20](01, 41)-(01, 42): PLUS(OP) '+'
[20](01, 43)-(01, 44): NUMBER(NUMBER) '1'
[20](01, 44)-(01, 45): NEWLINE(NEWLINE) '\n'
[20](02, 00)-(02, 00): DEDENT(DEDENT)
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 01): NL(NL) '\n'
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 04): INDENT(INDENT) '    '
[22](01, 04)-(01, 12): NAME(NAME) 'sequence'
[22](01, 13)-(01, 14): EQUAL(OP) '='
[22](01, 15)-(01, 25): NAME(NAME) 'new_string'
[22](01, 26)-(01, 27): STAR(OP) '*'
[22](01, 28)-(01, 34): NAME(NAME) 'amount'
[22](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[22](02, 00)-(02, 00): DEDENT(DEDENT)
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[23](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[23](01, 00)-(01, 01): NL(NL) '\n'
[23](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[24](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[24](01, 04)-(01, 49): COMMENT(COMMENT) '# Cutting the sequence to the required length'
[24](01, 49)-(01, 50): NL(NL) '\n'
[24](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[25](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[25](01, 00)-(01, 04): INDENT(INDENT) '    '
[25](01, 04)-(01, 12): NAME(NAME) 'sequence'
[25](01, 13)-(01, 14): EQUAL(OP) '='
[25](01, 15)-(01, 23): NAME(NAME) 'sequence'
[25](01, 23)-(01, 24): LSQB(OP) '['
[25](01, 24)-(01, 25): NUMBER(NUMBER) '0'
[25](01, 25)-(01, 26): COLON(OP) ':'
[25](01, 26)-(01, 32): NAME(NAME) 'length'
[25](01, 32)-(01, 33): RSQB(OP) ']'
[25](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[25](02, 00)-(02, 00): DEDENT(DEDENT)
[25](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[26](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[26](01, 00)-(01, 04): INDENT(INDENT) '    '
[26](01, 04)-(01, 10): NAME(NAME) 'return'
[26](01, 11)-(01, 19): NAME(NAME) 'sequence'
[26](01, 19)-(01, 20): NEWLINE(NEWLINE)
[26](02, 00)-(02, 00): DEDENT(DEDENT)
[26](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

