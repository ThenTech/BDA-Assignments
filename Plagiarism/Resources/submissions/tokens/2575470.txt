[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 02): NAME(NAME) 'w1'
[00](01, 03)-(01, 04): EQUAL(OP) '='
[00](01, 05)-(01, 10): NAME(NAME) 'input'
[00](01, 10)-(01, 11): LPAR(OP) '('
[00](01, 11)-(01, 12): RPAR(OP) ')'
[00](01, 12)-(01, 13): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 02): NAME(NAME) 'w2'
[01](01, 03)-(01, 04): EQUAL(OP) '='
[01](01, 05)-(01, 10): NAME(NAME) 'input'
[01](01, 10)-(01, 11): LPAR(OP) '('
[01](01, 11)-(01, 12): RPAR(OP) ')'
[01](01, 12)-(01, 13): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 03): NAME(NAME) 'for'
[02](01, 04)-(01, 05): NAME(NAME) 'i'
[02](01, 06)-(01, 08): NAME(NAME) 'in'
[02](01, 09)-(01, 14): NAME(NAME) 'range'
[02](01, 14)-(01, 15): LPAR(OP) '('
[02](01, 15)-(01, 18): NAME(NAME) 'len'
[02](01, 18)-(01, 19): LPAR(OP) '('
[02](01, 19)-(01, 21): NAME(NAME) 'w1'
[02](01, 21)-(01, 22): RPAR(OP) ')'
[02](01, 22)-(01, 23): RPAR(OP) ')'
[02](01, 23)-(01, 24): COLON(OP) ':'
[02](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 07): NAME(NAME) 'for'
[03](01, 08)-(01, 09): NAME(NAME) 'j'
[03](01, 10)-(01, 12): NAME(NAME) 'in'
[03](01, 13)-(01, 18): NAME(NAME) 'range'
[03](01, 18)-(01, 19): LPAR(OP) '('
[03](01, 19)-(01, 22): NAME(NAME) 'len'
[03](01, 22)-(01, 23): LPAR(OP) '('
[03](01, 23)-(01, 25): NAME(NAME) 'w2'
[03](01, 25)-(01, 26): RPAR(OP) ')'
[03](01, 26)-(01, 27): RPAR(OP) ')'
[03](01, 27)-(01, 28): COLON(OP) ':'
[03](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 08): INDENT(INDENT) '        '
[04](01, 08)-(01, 10): NAME(NAME) 'if'
[04](01, 11)-(01, 13): NAME(NAME) 'w1'
[04](01, 13)-(01, 14): LSQB(OP) '['
[04](01, 14)-(01, 15): NAME(NAME) 'i'
[04](01, 15)-(01, 16): RSQB(OP) ']'
[04](01, 16)-(01, 18): EQEQUAL(OP) '=='
[04](01, 18)-(01, 20): NAME(NAME) 'w2'
[04](01, 20)-(01, 21): LSQB(OP) '['
[04](01, 21)-(01, 22): NAME(NAME) 'j'
[04](01, 22)-(01, 23): RSQB(OP) ']'
[04](01, 23)-(01, 24): COLON(OP) ':'
[04](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 12): INDENT(INDENT) '            '
[05](01, 12)-(01, 14): NAME(NAME) 'w2'
[05](01, 15)-(01, 16): EQUAL(OP) '='
[05](01, 17)-(01, 19): NAME(NAME) 'w2'
[05](01, 19)-(01, 20): LSQB(OP) '['
[05](01, 20)-(01, 21): COLON(OP) ':'
[05](01, 21)-(01, 22): NAME(NAME) 'j'
[05](01, 22)-(01, 23): RSQB(OP) ']'
[05](01, 23)-(01, 24): PLUS(OP) '+'
[05](01, 24)-(01, 26): NAME(NAME) 'w2'
[05](01, 26)-(01, 27): LSQB(OP) '['
[05](01, 27)-(01, 28): NAME(NAME) 'j'
[05](01, 28)-(01, 29): PLUS(OP) '+'
[05](01, 29)-(01, 30): NUMBER(NUMBER) '1'
[05](01, 30)-(01, 31): COLON(OP) ':'
[05](01, 31)-(01, 32): RSQB(OP) ']'
[05](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 02): NAME(NAME) 'if'
[06](01, 03)-(01, 06): NAME(NAME) 'len'
[06](01, 06)-(01, 07): LPAR(OP) '('
[06](01, 07)-(01, 09): NAME(NAME) 'w2'
[06](01, 09)-(01, 10): RPAR(OP) ')'
[06](01, 11)-(01, 13): EQEQUAL(OP) '=='
[06](01, 14)-(01, 15): NUMBER(NUMBER) '0'
[06](01, 15)-(01, 16): COLON(OP) ':'
[06](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 04): INDENT(INDENT) '    '
[07](01, 04)-(01, 09): NAME(NAME) 'print'
[07](01, 09)-(01, 10): LPAR(OP) '('
[07](01, 10)-(01, 12): NAME(NAME) 'w1'
[07](01, 13)-(01, 14): COMMA(OP) ','
[07](01, 14)-(01, 19): STRING(STRING) '"and"'
[07](01, 19)-(01, 20): COMMA(OP) ','
[07](01, 20)-(01, 22): NAME(NAME) 'w2'
[07](01, 22)-(01, 23): COMMA(OP) ','
[07](01, 23)-(01, 37): STRING(STRING) '"are anagrams"'
[07](01, 37)-(01, 38): RPAR(OP) ')'
[07](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 04): NAME(NAME) 'else'
[08](01, 04)-(01, 05): COLON(OP) ':'
[08](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 09): NAME(NAME) 'print'
[09](01, 09)-(01, 10): LPAR(OP) '('
[09](01, 10)-(01, 12): NAME(NAME) 'w1'
[09](01, 13)-(01, 14): COMMA(OP) ','
[09](01, 14)-(01, 19): STRING(STRING) '"and"'
[09](01, 19)-(01, 20): COMMA(OP) ','
[09](01, 20)-(01, 22): NAME(NAME) 'w2'
[09](01, 22)-(01, 23): COMMA(OP) ','
[09](01, 23)-(01, 41): STRING(STRING) '"are not anagrams"'
[09](01, 41)-(01, 42): RPAR(OP) ')'
[09](01, 42)-(01, 43): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 00): ENDMARKER(ENDMARKER)

