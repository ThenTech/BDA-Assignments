[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 17): NAME(NAME) 'lucky_numbers'
[00](01, 17)-(01, 18): LPAR(OP) '('
[00](01, 18)-(01, 19): NAME(NAME) 'n'
[00](01, 19)-(01, 20): RPAR(OP) ')'
[00](01, 20)-(01, 21): COLON(OP) ':'
[00](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 05): NAME(NAME) 's'
[01](01, 06)-(01, 07): EQUAL(OP) '='
[01](01, 08)-(01, 09): LSQB(OP) '['
[01](01, 09)-(01, 10): NAME(NAME) 'i'
[01](01, 11)-(01, 14): NAME(NAME) 'for'
[01](01, 15)-(01, 16): NAME(NAME) 'i'
[01](01, 17)-(01, 19): NAME(NAME) 'in'
[01](01, 20)-(01, 25): NAME(NAME) 'range'
[01](01, 25)-(01, 26): LPAR(OP) '('
[01](01, 26)-(01, 27): NUMBER(NUMBER) '1'
[01](01, 27)-(01, 28): COMMA(OP) ','
[01](01, 29)-(01, 30): NAME(NAME) 'n'
[01](01, 31)-(01, 32): PLUS(OP) '+'
[01](01, 33)-(01, 34): NUMBER(NUMBER) '1'
[01](01, 34)-(01, 35): RPAR(OP) ')'
[01](01, 35)-(01, 36): RSQB(OP) ']'
[01](01, 36)-(01, 37): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 08): NAME(NAME) 'pass'
[02](01, 09)-(01, 10): EQUAL(OP) '='
[02](01, 11)-(01, 12): NUMBER(NUMBER) '2'
[02](01, 12)-(01, 13): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 09): NAME(NAME) 'while'
[03](01, 10)-(01, 14): NAME(NAME) 'pass'
[03](01, 15)-(01, 17): LESSEQUAL(OP) '<='
[03](01, 18)-(01, 21): NAME(NAME) 'len'
[03](01, 21)-(01, 22): LPAR(OP) '('
[03](01, 22)-(01, 23): NAME(NAME) 's'
[03](01, 23)-(01, 24): RPAR(OP) ')'
[03](01, 24)-(01, 25): COLON(OP) ':'
[03](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 08): INDENT(INDENT) '        '
[04](01, 08)-(01, 09): NAME(NAME) 's'
[04](01, 10)-(01, 11): EQUAL(OP) '='
[04](01, 12)-(01, 13): LSQB(OP) '['
[04](01, 13)-(01, 14): NAME(NAME) 's'
[04](01, 14)-(01, 15): LSQB(OP) '['
[04](01, 15)-(01, 16): NAME(NAME) 'i'
[04](01, 16)-(01, 17): RSQB(OP) ']'
[04](01, 18)-(01, 21): NAME(NAME) 'for'
[04](01, 22)-(01, 23): NAME(NAME) 'i'
[04](01, 24)-(01, 26): NAME(NAME) 'in'
[04](01, 27)-(01, 32): NAME(NAME) 'range'
[04](01, 32)-(01, 33): LPAR(OP) '('
[04](01, 33)-(01, 34): NUMBER(NUMBER) '0'
[04](01, 34)-(01, 35): COMMA(OP) ','
[04](01, 35)-(01, 38): NAME(NAME) 'len'
[04](01, 38)-(01, 39): LPAR(OP) '('
[04](01, 39)-(01, 40): NAME(NAME) 's'
[04](01, 40)-(01, 41): RPAR(OP) ')'
[04](01, 41)-(01, 42): RPAR(OP) ')'
[04](01, 43)-(01, 45): NAME(NAME) 'if'
[04](01, 46)-(01, 47): LPAR(OP) '('
[04](01, 47)-(01, 48): NAME(NAME) 'i'
[04](01, 49)-(01, 50): PLUS(OP) '+'
[04](01, 51)-(01, 52): NUMBER(NUMBER) '1'
[04](01, 52)-(01, 53): RPAR(OP) ')'
[04](01, 54)-(01, 55): PERCENT(OP) '%'
[04](01, 56)-(01, 60): NAME(NAME) 'pass'
[04](01, 61)-(01, 63): NOTEQUAL(OP) '!='
[04](01, 64)-(01, 65): NUMBER(NUMBER) '0'
[04](01, 65)-(01, 66): RSQB(OP) ']'
[04](01, 66)-(01, 67): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 08): INDENT(INDENT) '        '
[05](01, 08)-(01, 12): NAME(NAME) 'pass'
[05](01, 13)-(01, 15): PLUSEQUAL(OP) '+='
[05](01, 16)-(01, 17): NUMBER(NUMBER) '1'
[05](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 04): INDENT(INDENT) '    '
[06](01, 04)-(01, 10): NAME(NAME) 'return'
[06](01, 11)-(01, 12): NAME(NAME) 's'
[06](01, 12)-(01, 13): NEWLINE(NEWLINE)
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

