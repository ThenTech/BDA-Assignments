[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 24): NAME(NAME) 'convert_to_uppercase'
[00](01, 24)-(01, 25): LPAR(OP) '('
[00](01, 25)-(01, 31): NAME(NAME) 'string'
[00](01, 31)-(01, 32): RPAR(OP) ')'
[00](01, 32)-(01, 33): COLON(OP) ':'
[00](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 17): NAME(NAME) 'nieuwe_string'
[01](01, 18)-(01, 19): EQUAL(OP) '='
[01](01, 20)-(01, 22): STRING(STRING) '""'
[01](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 07): NAME(NAME) 'for'
[02](01, 08)-(01, 10): NAME(NAME) 'el'
[02](01, 11)-(01, 13): NAME(NAME) 'in'
[02](01, 14)-(01, 20): NAME(NAME) 'string'
[02](01, 20)-(01, 21): COLON(OP) ':'
[02](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 08): INDENT(INDENT) '        '
[03](01, 08)-(01, 15): NAME(NAME) 'alfabet'
[03](01, 16)-(01, 17): EQUAL(OP) '='
[03](01, 17)-(01, 71): STRING(STRING) '"azertyuiopmlkjhgfdsqwxcvbnAZERTYUIOPMLKJHGFDSQWXCVBN"'
[03](01, 71)-(01, 72): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 08): INDENT(INDENT) '        '
[04](01, 08)-(01, 10): NAME(NAME) 'if'
[04](01, 11)-(01, 14): NAME(NAME) 'not'
[04](01, 15)-(01, 17): NAME(NAME) 'el'
[04](01, 18)-(01, 20): NAME(NAME) 'in'
[04](01, 21)-(01, 28): NAME(NAME) 'alfabet'
[04](01, 28)-(01, 29): COLON(OP) ':'
[04](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 12): INDENT(INDENT) '            '
[05](01, 12)-(01, 25): NAME(NAME) 'nieuwe_string'
[05](01, 26)-(01, 27): EQUAL(OP) '='
[05](01, 28)-(01, 41): NAME(NAME) 'nieuwe_string'
[05](01, 42)-(01, 43): PLUS(OP) '+'
[05](01, 44)-(01, 46): NAME(NAME) 'el'
[05](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 08): INDENT(INDENT) '        '
[06](01, 08)-(01, 12): NAME(NAME) 'elif'
[06](01, 13)-(01, 16): STRING(STRING) "'A'"
[06](01, 17)-(01, 19): LESSEQUAL(OP) '<='
[06](01, 20)-(01, 22): NAME(NAME) 'el'
[06](01, 23)-(01, 25): LESSEQUAL(OP) '<='
[06](01, 26)-(01, 29): STRING(STRING) "'Z'"
[06](01, 29)-(01, 30): COLON(OP) ':'
[06](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 12): INDENT(INDENT) '            '
[07](01, 12)-(01, 25): NAME(NAME) 'nieuwe_string'
[07](01, 26)-(01, 27): EQUAL(OP) '='
[07](01, 28)-(01, 41): NAME(NAME) 'nieuwe_string'
[07](01, 42)-(01, 43): PLUS(OP) '+'
[07](01, 44)-(01, 46): NAME(NAME) 'el'
[07](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 08): INDENT(INDENT) '        '
[08](01, 08)-(01, 12): NAME(NAME) 'else'
[08](01, 12)-(01, 13): COLON(OP) ':'
[08](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 12): INDENT(INDENT) '            '
[09](01, 12)-(01, 14): NAME(NAME) 'el'
[09](01, 15)-(01, 16): EQUAL(OP) '='
[09](01, 17)-(01, 20): NAME(NAME) 'chr'
[09](01, 20)-(01, 21): LPAR(OP) '('
[09](01, 21)-(01, 24): NAME(NAME) 'int'
[09](01, 24)-(01, 25): LPAR(OP) '('
[09](01, 25)-(01, 28): NAME(NAME) 'ord'
[09](01, 28)-(01, 29): LPAR(OP) '('
[09](01, 29)-(01, 31): NAME(NAME) 'el'
[09](01, 31)-(01, 32): RPAR(OP) ')'
[09](01, 32)-(01, 33): RPAR(OP) ')'
[09](01, 33)-(01, 34): MINUS(OP) '-'
[09](01, 34)-(01, 36): NUMBER(NUMBER) '32'
[09](01, 36)-(01, 37): RPAR(OP) ')'
[09](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 12): INDENT(INDENT) '            '
[10](01, 12)-(01, 25): NAME(NAME) 'nieuwe_string'
[10](01, 26)-(01, 27): EQUAL(OP) '='
[10](01, 28)-(01, 41): NAME(NAME) 'nieuwe_string'
[10](01, 42)-(01, 43): PLUS(OP) '+'
[10](01, 44)-(01, 46): NAME(NAME) 'el'
[10](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 04): INDENT(INDENT) '    '
[11](01, 04)-(01, 10): NAME(NAME) 'return'
[11](01, 11)-(01, 24): NAME(NAME) 'nieuwe_string'
[11](01, 24)-(01, 25): NEWLINE(NEWLINE)
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

