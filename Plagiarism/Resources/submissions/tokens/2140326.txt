[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 07): NAME(NAME) 'string1'
[00](01, 08)-(01, 09): EQUAL(OP) '='
[00](01, 10)-(01, 15): NAME(NAME) 'input'
[00](01, 15)-(01, 16): LPAR(OP) '('
[00](01, 16)-(01, 44): STRING(STRING) '"give me the first string: "'
[00](01, 44)-(01, 45): RPAR(OP) ')'
[00](01, 45)-(01, 46): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 07): NAME(NAME) 'string2'
[01](01, 08)-(01, 09): EQUAL(OP) '='
[01](01, 10)-(01, 15): NAME(NAME) 'input'
[01](01, 15)-(01, 16): LPAR(OP) '('
[01](01, 16)-(01, 54): STRING(STRING) '"give me the second and last string: "'
[01](01, 54)-(01, 55): RPAR(OP) ')'
[01](01, 55)-(01, 56): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 02): NAME(NAME) 'if'
[02](01, 03)-(01, 09): NAME(NAME) 'sorted'
[02](01, 09)-(01, 10): LPAR(OP) '('
[02](01, 10)-(01, 17): NAME(NAME) 'string1'
[02](01, 17)-(01, 18): RPAR(OP) ')'
[02](01, 19)-(01, 21): EQEQUAL(OP) '=='
[02](01, 22)-(01, 28): NAME(NAME) 'sorted'
[02](01, 28)-(01, 29): LPAR(OP) '('
[02](01, 29)-(01, 36): NAME(NAME) 'string2'
[02](01, 36)-(01, 37): RPAR(OP) ')'
[02](01, 37)-(01, 38): COLON(OP) ':'
[02](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 09): NAME(NAME) 'print'
[03](01, 09)-(01, 10): LPAR(OP) '('
[03](01, 10)-(01, 17): NAME(NAME) 'string1'
[03](01, 17)-(01, 18): COMMA(OP) ','
[03](01, 19)-(01, 24): STRING(STRING) '"and"'
[03](01, 24)-(01, 25): COMMA(OP) ','
[03](01, 26)-(01, 33): NAME(NAME) 'string2'
[03](01, 33)-(01, 34): COMMA(OP) ','
[03](01, 35)-(01, 49): STRING(STRING) '"are anagrams"'
[03](01, 49)-(01, 50): RPAR(OP) ')'
[03](01, 50)-(01, 51): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): NAME(NAME) 'else'
[04](01, 04)-(01, 05): COLON(OP) ':'
[04](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 09): NAME(NAME) 'print'
[05](01, 09)-(01, 10): LPAR(OP) '('
[05](01, 10)-(01, 17): NAME(NAME) 'string1'
[05](01, 17)-(01, 18): COMMA(OP) ','
[05](01, 19)-(01, 24): STRING(STRING) "'and'"
[05](01, 24)-(01, 25): COMMA(OP) ','
[05](01, 26)-(01, 33): NAME(NAME) 'string2'
[05](01, 33)-(01, 34): COMMA(OP) ','
[05](01, 35)-(01, 53): STRING(STRING) '"are not anagrams"'
[05](01, 53)-(01, 54): RPAR(OP) ')'
[05](01, 54)-(01, 55): NEWLINE(NEWLINE)
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

