[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 06): NAME(NAME) 'string'
[00](01, 07)-(01, 08): EQUAL(OP) '='
[00](01, 09)-(01, 14): NAME(NAME) 'input'
[00](01, 14)-(01, 15): LPAR(OP) '('
[00](01, 15)-(01, 25): STRING(STRING) '"String: "'
[00](01, 25)-(01, 26): RPAR(OP) ')'
[00](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 15): NAME(NAME) 'reversed_string'
[01](01, 16)-(01, 17): EQUAL(OP) '='
[01](01, 18)-(01, 20): STRING(STRING) '""'
[01](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 01): NAME(NAME) 'i'
[02](01, 02)-(01, 03): EQUAL(OP) '='
[02](01, 04)-(01, 05): MINUS(OP) '-'
[02](01, 05)-(01, 06): NUMBER(NUMBER) '1'
[02](01, 06)-(01, 07): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 01): NL(NL) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 05): NAME(NAME) 'while'
[04](01, 06)-(01, 07): MINUS(OP) '-'
[04](01, 07)-(01, 08): NAME(NAME) 'i'
[04](01, 09)-(01, 11): LESSEQUAL(OP) '<='
[04](01, 12)-(01, 15): NAME(NAME) 'len'
[04](01, 15)-(01, 16): LPAR(OP) '('
[04](01, 16)-(01, 22): NAME(NAME) 'string'
[04](01, 22)-(01, 23): RPAR(OP) ')'
[04](01, 23)-(01, 24): COLON(OP) ':'
[04](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 19): NAME(NAME) 'reversed_string'
[05](01, 20)-(01, 22): PLUSEQUAL(OP) '+='
[05](01, 23)-(01, 29): NAME(NAME) 'string'
[05](01, 29)-(01, 30): LSQB(OP) '['
[05](01, 30)-(01, 31): NAME(NAME) 'i'
[05](01, 31)-(01, 32): RSQB(OP) ']'
[05](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 04): INDENT(INDENT) '    '
[06](01, 04)-(01, 05): NAME(NAME) 'i'
[06](01, 06)-(01, 08): MINEQUAL(OP) '-='
[06](01, 09)-(01, 10): NUMBER(NUMBER) '1'
[06](01, 10)-(01, 11): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 01): NL(NL) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 02): NAME(NAME) 'if'
[08](01, 03)-(01, 09): NAME(NAME) 'string'
[08](01, 10)-(01, 12): EQEQUAL(OP) '=='
[08](01, 13)-(01, 28): NAME(NAME) 'reversed_string'
[08](01, 28)-(01, 29): COLON(OP) ':'
[08](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 09): NAME(NAME) 'print'
[09](01, 09)-(01, 10): LPAR(OP) '('
[09](01, 10)-(01, 36): STRING(STRING) '"{string} is a palindrome"'
[09](01, 36)-(01, 37): DOT(OP) '.'
[09](01, 37)-(01, 43): NAME(NAME) 'format'
[09](01, 43)-(01, 44): LPAR(OP) '('
[09](01, 44)-(01, 50): NAME(NAME) 'string'
[09](01, 50)-(01, 51): EQUAL(OP) '='
[09](01, 51)-(01, 57): NAME(NAME) 'string'
[09](01, 57)-(01, 58): RPAR(OP) ')'
[09](01, 58)-(01, 59): RPAR(OP) ')'
[09](01, 59)-(01, 60): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 04): NAME(NAME) 'else'
[10](01, 04)-(01, 05): COLON(OP) ':'
[10](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 04): INDENT(INDENT) '    '
[11](01, 04)-(01, 09): NAME(NAME) 'print'
[11](01, 09)-(01, 10): LPAR(OP) '('
[11](01, 10)-(01, 40): STRING(STRING) '"{string} is not a palindrome"'
[11](01, 40)-(01, 41): DOT(OP) '.'
[11](01, 41)-(01, 47): NAME(NAME) 'format'
[11](01, 47)-(01, 48): LPAR(OP) '('
[11](01, 48)-(01, 54): NAME(NAME) 'string'
[11](01, 54)-(01, 55): EQUAL(OP) '='
[11](01, 55)-(01, 61): NAME(NAME) 'string'
[11](01, 61)-(01, 62): RPAR(OP) ')'
[11](01, 62)-(01, 63): RPAR(OP) ')'
[11](01, 63)-(01, 64): NEWLINE(NEWLINE)
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

