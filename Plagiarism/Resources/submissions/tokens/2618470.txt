[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 15): NAME(NAME) 'count_words'
[00](01, 15)-(01, 16): LPAR(OP) '('
[00](01, 16)-(01, 22): NAME(NAME) 'string'
[00](01, 22)-(01, 23): RPAR(OP) ')'
[00](01, 23)-(01, 24): COLON(OP) ':'
[00](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 09): NAME(NAME) 'count'
[01](01, 10)-(01, 11): EQUAL(OP) '='
[01](01, 12)-(01, 13): NUMBER(NUMBER) '0'
[01](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 07): NAME(NAME) 'for'
[02](01, 08)-(01, 09): NAME(NAME) 'i'
[02](01, 10)-(01, 12): NAME(NAME) 'in'
[02](01, 13)-(01, 18): NAME(NAME) 'range'
[02](01, 18)-(01, 19): LPAR(OP) '('
[02](01, 19)-(01, 22): NAME(NAME) 'len'
[02](01, 22)-(01, 23): LPAR(OP) '('
[02](01, 23)-(01, 29): NAME(NAME) 'string'
[02](01, 29)-(01, 30): RPAR(OP) ')'
[02](01, 30)-(01, 31): RPAR(OP) ')'
[02](01, 31)-(01, 32): COLON(OP) ':'
[02](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 08): INDENT(INDENT) '        '
[03](01, 08)-(01, 10): NAME(NAME) 'if'
[03](01, 11)-(01, 12): NAME(NAME) 'i'
[03](01, 13)-(01, 15): EQEQUAL(OP) '=='
[03](01, 16)-(01, 17): NUMBER(NUMBER) '0'
[03](01, 18)-(01, 21): NAME(NAME) 'and'
[03](01, 22)-(01, 24): NUMBER(NUMBER) '97'
[03](01, 25)-(01, 27): LESSEQUAL(OP) '<='
[03](01, 28)-(01, 31): NAME(NAME) 'ord'
[03](01, 31)-(01, 32): LPAR(OP) '('
[03](01, 32)-(01, 38): NAME(NAME) 'string'
[03](01, 38)-(01, 39): LSQB(OP) '['
[03](01, 39)-(01, 40): NAME(NAME) 'i'
[03](01, 40)-(01, 41): RSQB(OP) ']'
[03](01, 41)-(01, 42): RPAR(OP) ')'
[03](01, 43)-(01, 45): LESSEQUAL(OP) '<='
[03](01, 46)-(01, 49): NUMBER(NUMBER) '122'
[03](01, 49)-(01, 50): COLON(OP) ':'
[03](01, 50)-(01, 51): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 12): INDENT(INDENT) '            '
[04](01, 12)-(01, 17): NAME(NAME) 'count'
[04](01, 18)-(01, 20): PLUSEQUAL(OP) '+='
[04](01, 21)-(01, 22): NUMBER(NUMBER) '1'
[04](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 08): INDENT(INDENT) '        '
[05](01, 08)-(01, 12): NAME(NAME) 'elif'
[05](01, 13)-(01, 15): NUMBER(NUMBER) '97'
[05](01, 16)-(01, 18): LESSEQUAL(OP) '<='
[05](01, 19)-(01, 22): NAME(NAME) 'ord'
[05](01, 22)-(01, 23): LPAR(OP) '('
[05](01, 23)-(01, 29): NAME(NAME) 'string'
[05](01, 29)-(01, 30): LSQB(OP) '['
[05](01, 30)-(01, 31): NAME(NAME) 'i'
[05](01, 31)-(01, 32): RSQB(OP) ']'
[05](01, 32)-(01, 33): RPAR(OP) ')'
[05](01, 34)-(01, 36): LESSEQUAL(OP) '<='
[05](01, 37)-(01, 40): NUMBER(NUMBER) '122'
[05](01, 40)-(01, 41): COLON(OP) ':'
[05](01, 41)-(01, 42): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 12): INDENT(INDENT) '            '
[06](01, 12)-(01, 14): NAME(NAME) 'if'
[06](01, 15)-(01, 17): NUMBER(NUMBER) '97'
[06](01, 18)-(01, 20): LESSEQUAL(OP) '<='
[06](01, 21)-(01, 24): NAME(NAME) 'ord'
[06](01, 24)-(01, 25): LPAR(OP) '('
[06](01, 25)-(01, 31): NAME(NAME) 'string'
[06](01, 31)-(01, 32): LSQB(OP) '['
[06](01, 32)-(01, 33): NAME(NAME) 'i'
[06](01, 33)-(01, 34): MINUS(OP) '-'
[06](01, 34)-(01, 35): NUMBER(NUMBER) '1'
[06](01, 35)-(01, 36): RSQB(OP) ']'
[06](01, 36)-(01, 37): RPAR(OP) ')'
[06](01, 38)-(01, 40): LESSEQUAL(OP) '<='
[06](01, 41)-(01, 44): NUMBER(NUMBER) '122'
[06](01, 44)-(01, 45): COLON(OP) ':'
[06](01, 45)-(01, 46): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 16): INDENT(INDENT) '                '
[07](01, 16)-(01, 24): NAME(NAME) 'continue'
[07](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 12): INDENT(INDENT) '            '
[08](01, 12)-(01, 16): NAME(NAME) 'else'
[08](01, 16)-(01, 17): COLON(OP) ':'
[08](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 16): INDENT(INDENT) '                '
[09](01, 16)-(01, 21): NAME(NAME) 'count'
[09](01, 22)-(01, 24): PLUSEQUAL(OP) '+='
[09](01, 25)-(01, 26): NUMBER(NUMBER) '1'
[09](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 04): INDENT(INDENT) '    '
[10](01, 04)-(01, 10): NAME(NAME) 'return'
[10](01, 11)-(01, 16): NAME(NAME) 'count'
[10](01, 16)-(01, 17): NEWLINE(NEWLINE)
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

