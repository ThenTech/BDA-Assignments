[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 07): NAME(NAME) 'stringa'
[00](01, 08)-(01, 09): EQUAL(OP) '='
[00](01, 10)-(01, 15): NAME(NAME) 'input'
[00](01, 15)-(01, 16): LPAR(OP) '('
[00](01, 16)-(01, 36): STRING(STRING) '"Give me a string: "'
[00](01, 36)-(01, 37): RPAR(OP) ')'
[00](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 07): NAME(NAME) 'stringb'
[01](01, 08)-(01, 09): EQUAL(OP) '='
[01](01, 10)-(01, 15): NAME(NAME) 'input'
[01](01, 15)-(01, 16): LPAR(OP) '('
[01](01, 16)-(01, 36): STRING(STRING) '"Give me a string: "'
[01](01, 36)-(01, 37): RPAR(OP) ')'
[01](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 01): NL(NL) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 08): NAME(NAME) 'alphabet'
[03](01, 09)-(01, 10): EQUAL(OP) '='
[03](01, 11)-(01, 39): STRING(STRING) '"abcdefghijklmnopqrstuvwxyz"'
[03](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 09): NAME(NAME) 'isAnagran'
[04](01, 10)-(01, 11): EQUAL(OP) '='
[04](01, 12)-(01, 16): NAME(NAME) 'True'
[04](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 01): NL(NL) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 03): NAME(NAME) 'for'
[06](01, 04)-(01, 05): NAME(NAME) 'i'
[06](01, 06)-(01, 08): NAME(NAME) 'in'
[06](01, 09)-(01, 17): NAME(NAME) 'alphabet'
[06](01, 17)-(01, 18): COLON(OP) ':'
[06](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 04): INDENT(INDENT) '    '
[07](01, 04)-(01, 10): NAME(NAME) 'counta'
[07](01, 11)-(01, 12): EQUAL(OP) '='
[07](01, 13)-(01, 14): NUMBER(NUMBER) '0'
[07](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 04): INDENT(INDENT) '    '
[08](01, 04)-(01, 07): NAME(NAME) 'for'
[08](01, 08)-(01, 09): NAME(NAME) 'j'
[08](01, 10)-(01, 12): NAME(NAME) 'in'
[08](01, 13)-(01, 18): NAME(NAME) 'range'
[08](01, 18)-(01, 19): LPAR(OP) '('
[08](01, 19)-(01, 22): NAME(NAME) 'len'
[08](01, 22)-(01, 23): LPAR(OP) '('
[08](01, 23)-(01, 30): NAME(NAME) 'stringa'
[08](01, 30)-(01, 31): RPAR(OP) ')'
[08](01, 31)-(01, 32): RPAR(OP) ')'
[08](01, 32)-(01, 33): COLON(OP) ':'
[08](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 08): INDENT(INDENT) '        '
[09](01, 08)-(01, 10): NAME(NAME) 'if'
[09](01, 11)-(01, 18): NAME(NAME) 'stringa'
[09](01, 18)-(01, 19): LSQB(OP) '['
[09](01, 19)-(01, 20): NAME(NAME) 'j'
[09](01, 20)-(01, 21): RSQB(OP) ']'
[09](01, 22)-(01, 24): EQEQUAL(OP) '=='
[09](01, 25)-(01, 26): NAME(NAME) 'i'
[09](01, 26)-(01, 27): COLON(OP) ':'
[09](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 12): INDENT(INDENT) '            '
[10](01, 12)-(01, 18): NAME(NAME) 'counta'
[10](01, 19)-(01, 21): PLUSEQUAL(OP) '+='
[10](01, 22)-(01, 23): NUMBER(NUMBER) '1'
[10](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 12)-(01, 13): NL(NL) '\n'
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 04): INDENT(INDENT) '    '
[12](01, 04)-(01, 10): NAME(NAME) 'countb'
[12](01, 11)-(01, 12): EQUAL(OP) '='
[12](01, 13)-(01, 14): NUMBER(NUMBER) '0'
[12](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 04): INDENT(INDENT) '    '
[13](01, 04)-(01, 07): NAME(NAME) 'for'
[13](01, 08)-(01, 09): NAME(NAME) 'l'
[13](01, 10)-(01, 12): NAME(NAME) 'in'
[13](01, 13)-(01, 18): NAME(NAME) 'range'
[13](01, 18)-(01, 19): LPAR(OP) '('
[13](01, 19)-(01, 22): NAME(NAME) 'len'
[13](01, 22)-(01, 23): LPAR(OP) '('
[13](01, 23)-(01, 30): NAME(NAME) 'stringb'
[13](01, 30)-(01, 31): RPAR(OP) ')'
[13](01, 31)-(01, 32): RPAR(OP) ')'
[13](01, 32)-(01, 33): COLON(OP) ':'
[13](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 08): INDENT(INDENT) '        '
[14](01, 08)-(01, 10): NAME(NAME) 'if'
[14](01, 11)-(01, 18): NAME(NAME) 'stringb'
[14](01, 18)-(01, 19): LSQB(OP) '['
[14](01, 19)-(01, 20): NAME(NAME) 'l'
[14](01, 20)-(01, 21): RSQB(OP) ']'
[14](01, 22)-(01, 24): EQEQUAL(OP) '=='
[14](01, 25)-(01, 26): NAME(NAME) 'i'
[14](01, 26)-(01, 27): COLON(OP) ':'
[14](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 12): INDENT(INDENT) '            '
[15](01, 12)-(01, 18): NAME(NAME) 'countb'
[15](01, 19)-(01, 21): PLUSEQUAL(OP) '+='
[15](01, 22)-(01, 23): NUMBER(NUMBER) '1'
[15](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 12)-(01, 13): NL(NL) '\n'
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 04): INDENT(INDENT) '    '
[17](01, 04)-(01, 13): NAME(NAME) 'isAnagran'
[17](01, 14)-(01, 15): EQUAL(OP) '='
[17](01, 16)-(01, 25): NAME(NAME) 'isAnagran'
[17](01, 26)-(01, 29): NAME(NAME) 'and'
[17](01, 30)-(01, 36): NAME(NAME) 'countb'
[17](01, 37)-(01, 39): EQEQUAL(OP) '=='
[17](01, 40)-(01, 46): NAME(NAME) 'counta'
[17](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 01): NL(NL) '\n'
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 02): NAME(NAME) 'if'
[19](01, 03)-(01, 12): NAME(NAME) 'isAnagran'
[19](01, 13)-(01, 15): EQEQUAL(OP) '=='
[19](01, 16)-(01, 20): NAME(NAME) 'True'
[19](01, 20)-(01, 21): COLON(OP) ':'
[19](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 04): INDENT(INDENT) '    '
[20](01, 04)-(01, 09): NAME(NAME) 'print'
[20](01, 09)-(01, 10): LPAR(OP) '('
[20](01, 10)-(01, 17): NAME(NAME) 'stringa'
[20](01, 17)-(01, 18): COMMA(OP) ','
[20](01, 19)-(01, 24): STRING(STRING) '"and"'
[20](01, 24)-(01, 25): COMMA(OP) ','
[20](01, 26)-(01, 33): NAME(NAME) 'stringb'
[20](01, 33)-(01, 34): COMMA(OP) ','
[20](01, 35)-(01, 49): STRING(STRING) '"are anagrams"'
[20](01, 49)-(01, 50): RPAR(OP) ')'
[20](01, 50)-(01, 51): NEWLINE(NEWLINE) '\n'
[20](02, 00)-(02, 00): DEDENT(DEDENT)
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 04): NAME(NAME) 'else'
[21](01, 04)-(01, 05): COLON(OP) ':'
[21](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 04): INDENT(INDENT) '    '
[22](01, 04)-(01, 09): NAME(NAME) 'print'
[22](01, 09)-(01, 10): LPAR(OP) '('
[22](01, 10)-(01, 17): NAME(NAME) 'stringa'
[22](01, 17)-(01, 18): COMMA(OP) ','
[22](01, 19)-(01, 24): STRING(STRING) '"and"'
[22](01, 24)-(01, 25): COMMA(OP) ','
[22](01, 26)-(01, 33): NAME(NAME) 'stringb'
[22](01, 33)-(01, 34): COMMA(OP) ','
[22](01, 35)-(01, 53): STRING(STRING) '"are not anagrams"'
[22](01, 53)-(01, 54): RPAR(OP) ')'
[22](01, 54)-(01, 55): NEWLINE(NEWLINE)
[22](02, 00)-(02, 00): DEDENT(DEDENT)
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

