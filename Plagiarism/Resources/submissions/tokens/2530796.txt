[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 15): NAME(NAME) 'merge_lists'
[00](01, 15)-(01, 16): LPAR(OP) '('
[00](01, 16)-(01, 22): NAME(NAME) 'number'
[00](01, 22)-(01, 23): COMMA(OP) ','
[00](01, 24)-(01, 35): NAME(NAME) 'merged_list'
[00](01, 35)-(01, 36): RPAR(OP) ')'
[00](01, 36)-(01, 37): COLON(OP) ':'
[00](01, 39)-(01, 85): COMMENT(COMMENT) '# insert de 1-delige lijsten in de merged_list'
[00](01, 85)-(01, 86): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 07): NAME(NAME) 'for'
[01](01, 08)-(01, 09): NAME(NAME) 'i'
[01](01, 10)-(01, 12): NAME(NAME) 'in'
[01](01, 13)-(01, 18): NAME(NAME) 'range'
[01](01, 18)-(01, 19): LPAR(OP) '('
[01](01, 19)-(01, 22): NAME(NAME) 'len'
[01](01, 22)-(01, 23): LPAR(OP) '('
[01](01, 23)-(01, 34): NAME(NAME) 'merged_list'
[01](01, 34)-(01, 35): RPAR(OP) ')'
[01](01, 36)-(01, 37): PLUS(OP) '+'
[01](01, 38)-(01, 39): NUMBER(NUMBER) '1'
[01](01, 39)-(01, 40): RPAR(OP) ')'
[01](01, 40)-(01, 41): COLON(OP) ':'
[01](01, 41)-(01, 42): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 08): INDENT(INDENT) '        '
[02](01, 08)-(01, 10): NAME(NAME) 'if'
[02](01, 11)-(01, 17): NAME(NAME) 'number'
[02](01, 17)-(01, 18): LSQB(OP) '['
[02](01, 18)-(01, 19): NUMBER(NUMBER) '0'
[02](01, 19)-(01, 20): RSQB(OP) ']'
[02](01, 21)-(01, 22): GREATER(OP) '>'
[02](01, 23)-(01, 34): NAME(NAME) 'merged_list'
[02](01, 34)-(01, 35): LSQB(OP) '['
[02](01, 35)-(01, 36): NAME(NAME) 'i'
[02](01, 36)-(01, 37): RSQB(OP) ']'
[02](01, 37)-(01, 38): COLON(OP) ':'
[02](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 12): INDENT(INDENT) '            '
[03](01, 12)-(01, 20): NAME(NAME) 'continue'
[03](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 08): INDENT(INDENT) '        '
[04](01, 08)-(01, 12): NAME(NAME) 'else'
[04](01, 12)-(01, 13): COLON(OP) ':'
[04](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 12): INDENT(INDENT) '            '
[05](01, 12)-(01, 18): NAME(NAME) 'return'
[05](01, 19)-(01, 30): NAME(NAME) 'merged_list'
[05](01, 30)-(01, 31): DOT(OP) '.'
[05](01, 31)-(01, 37): NAME(NAME) 'insert'
[05](01, 37)-(01, 38): LPAR(OP) '('
[05](01, 38)-(01, 39): NAME(NAME) 'i'
[05](01, 39)-(01, 40): COMMA(OP) ','
[05](01, 41)-(01, 47): NAME(NAME) 'number'
[05](01, 47)-(01, 48): LSQB(OP) '['
[05](01, 48)-(01, 49): NUMBER(NUMBER) '0'
[05](01, 49)-(01, 50): RSQB(OP) ']'
[05](01, 50)-(01, 51): RPAR(OP) ')'
[05](01, 51)-(01, 52): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 01): NL(NL) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 01): NL(NL) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 03): NAME(NAME) 'def'
[08](01, 04)-(01, 15): NAME(NAME) 'merge_sort1'
[08](01, 15)-(01, 16): LPAR(OP) '('
[08](01, 16)-(01, 20): NAME(NAME) 'list'
[08](01, 20)-(01, 21): COMMA(OP) ','
[08](01, 22)-(01, 33): NAME(NAME) 'merged_list'
[08](01, 33)-(01, 34): RPAR(OP) ')'
[08](01, 34)-(01, 35): COLON(OP) ':'
[08](01, 37)-(01, 84): COMMENT(COMMENT) '# maakt 1-delige lijsten van de originele lijst'
[08](01, 84)-(01, 85): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 06): NAME(NAME) 'if'
[09](01, 07)-(01, 10): NAME(NAME) 'len'
[09](01, 10)-(01, 11): LPAR(OP) '('
[09](01, 11)-(01, 15): NAME(NAME) 'list'
[09](01, 15)-(01, 16): RPAR(OP) ')'
[09](01, 17)-(01, 18): GREATER(OP) '>'
[09](01, 19)-(01, 20): NUMBER(NUMBER) '1'
[09](01, 20)-(01, 21): COLON(OP) ':'
[09](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 08): INDENT(INDENT) '        '
[10](01, 08)-(01, 14): NAME(NAME) 'list_a'
[10](01, 15)-(01, 16): EQUAL(OP) '='
[10](01, 17)-(01, 28): NAME(NAME) 'merge_sort1'
[10](01, 28)-(01, 29): LPAR(OP) '('
[10](01, 29)-(01, 33): NAME(NAME) 'list'
[10](01, 33)-(01, 34): LSQB(OP) '['
[10](01, 34)-(01, 35): COLON(OP) ':'
[10](01, 35)-(01, 38): NAME(NAME) 'int'
[10](01, 38)-(01, 39): LPAR(OP) '('
[10](01, 39)-(01, 42): NAME(NAME) 'len'
[10](01, 42)-(01, 43): LPAR(OP) '('
[10](01, 43)-(01, 47): NAME(NAME) 'list'
[10](01, 47)-(01, 48): RPAR(OP) ')'
[10](01, 49)-(01, 50): SLASH(OP) '/'
[10](01, 51)-(01, 52): NUMBER(NUMBER) '2'
[10](01, 52)-(01, 53): RPAR(OP) ')'
[10](01, 53)-(01, 54): RSQB(OP) ']'
[10](01, 54)-(01, 55): COMMA(OP) ','
[10](01, 56)-(01, 67): NAME(NAME) 'merged_list'
[10](01, 67)-(01, 68): RPAR(OP) ')'
[10](01, 68)-(01, 69): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 08): INDENT(INDENT) '        '
[11](01, 08)-(01, 14): NAME(NAME) 'list_b'
[11](01, 15)-(01, 16): EQUAL(OP) '='
[11](01, 17)-(01, 28): NAME(NAME) 'merge_sort1'
[11](01, 28)-(01, 29): LPAR(OP) '('
[11](01, 29)-(01, 33): NAME(NAME) 'list'
[11](01, 33)-(01, 34): LSQB(OP) '['
[11](01, 34)-(01, 37): NAME(NAME) 'int'
[11](01, 37)-(01, 38): LPAR(OP) '('
[11](01, 38)-(01, 41): NAME(NAME) 'len'
[11](01, 41)-(01, 42): LPAR(OP) '('
[11](01, 42)-(01, 46): NAME(NAME) 'list'
[11](01, 46)-(01, 47): RPAR(OP) ')'
[11](01, 48)-(01, 49): SLASH(OP) '/'
[11](01, 50)-(01, 51): NUMBER(NUMBER) '2'
[11](01, 51)-(01, 52): RPAR(OP) ')'
[11](01, 52)-(01, 53): COLON(OP) ':'
[11](01, 53)-(01, 54): RSQB(OP) ']'
[11](01, 54)-(01, 55): COMMA(OP) ','
[11](01, 56)-(01, 67): NAME(NAME) 'merged_list'
[11](01, 67)-(01, 68): RPAR(OP) ')'
[11](01, 68)-(01, 69): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 04): INDENT(INDENT) '    '
[12](01, 04)-(01, 08): NAME(NAME) 'else'
[12](01, 08)-(01, 09): COLON(OP) ':'
[12](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 08): INDENT(INDENT) '        '
[13](01, 08)-(01, 14): NAME(NAME) 'return'
[13](01, 15)-(01, 26): NAME(NAME) 'merge_lists'
[13](01, 26)-(01, 27): LPAR(OP) '('
[13](01, 27)-(01, 31): NAME(NAME) 'list'
[13](01, 31)-(01, 32): COMMA(OP) ','
[13](01, 33)-(01, 44): NAME(NAME) 'merged_list'
[13](01, 44)-(01, 45): RPAR(OP) ')'
[13](01, 45)-(01, 46): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 04): INDENT(INDENT) '    '
[14](01, 04)-(01, 06): NAME(NAME) 'if'
[14](01, 07)-(01, 10): NAME(NAME) 'len'
[14](01, 10)-(01, 11): LPAR(OP) '('
[14](01, 11)-(01, 22): NAME(NAME) 'merged_list'
[14](01, 22)-(01, 23): LSQB(OP) '['
[14](01, 23)-(01, 24): COLON(OP) ':'
[14](01, 24)-(01, 27): NAME(NAME) 'len'
[14](01, 27)-(01, 28): LPAR(OP) '('
[14](01, 28)-(01, 39): NAME(NAME) 'merged_list'
[14](01, 39)-(01, 40): RPAR(OP) ')'
[14](01, 41)-(01, 42): MINUS(OP) '-'
[14](01, 43)-(01, 44): NUMBER(NUMBER) '1'
[14](01, 44)-(01, 45): RSQB(OP) ']'
[14](01, 45)-(01, 46): RPAR(OP) ')'
[14](01, 47)-(01, 49): EQEQUAL(OP) '=='
[14](01, 50)-(01, 53): NAME(NAME) 'len'
[14](01, 53)-(01, 54): LPAR(OP) '('
[14](01, 54)-(01, 58): NAME(NAME) 'list'
[14](01, 58)-(01, 59): RPAR(OP) ')'
[14](01, 59)-(01, 60): COLON(OP) ':'
[14](01, 60)-(01, 61): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 08): INDENT(INDENT) '        '
[15](01, 08)-(01, 14): NAME(NAME) 'return'
[15](01, 15)-(01, 26): NAME(NAME) 'merged_list'
[15](01, 26)-(01, 27): LSQB(OP) '['
[15](01, 27)-(01, 28): COLON(OP) ':'
[15](01, 28)-(01, 31): NAME(NAME) 'len'
[15](01, 31)-(01, 32): LPAR(OP) '('
[15](01, 32)-(01, 43): NAME(NAME) 'merged_list'
[15](01, 43)-(01, 44): RPAR(OP) ')'
[15](01, 45)-(01, 46): MINUS(OP) '-'
[15](01, 47)-(01, 48): NUMBER(NUMBER) '1'
[15](01, 48)-(01, 49): RSQB(OP) ']'
[15](01, 49)-(01, 50): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 01): NL(NL) '\n'
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 01): NL(NL) '\n'
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 03): NAME(NAME) 'def'
[18](01, 04)-(01, 14): NAME(NAME) 'merge_sort'
[18](01, 14)-(01, 15): LPAR(OP) '('
[18](01, 15)-(01, 19): NAME(NAME) 'list'
[18](01, 19)-(01, 20): RPAR(OP) ')'
[18](01, 20)-(01, 21): COLON(OP) ':'
[18](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 04): INDENT(INDENT) '    '
[19](01, 04)-(01, 10): NAME(NAME) 'return'
[19](01, 11)-(01, 22): NAME(NAME) 'merge_sort1'
[19](01, 22)-(01, 23): LPAR(OP) '('
[19](01, 23)-(01, 27): NAME(NAME) 'list'
[19](01, 27)-(01, 28): COMMA(OP) ','
[19](01, 29)-(01, 30): LSQB(OP) '['
[19](01, 30)-(01, 33): NUMBER(NUMBER) '999'
[19](01, 33)-(01, 34): RSQB(OP) ']'
[19](01, 34)-(01, 35): RPAR(OP) ')'
[19](01, 35)-(01, 36): NEWLINE(NEWLINE)
[19](02, 00)-(02, 00): DEDENT(DEDENT)
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

