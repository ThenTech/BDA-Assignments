[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 19): NAME(NAME) 'is_magic_square'
[00](01, 19)-(01, 20): LPAR(OP) '('
[00](01, 20)-(01, 26): NAME(NAME) 'matrix'
[00](01, 26)-(01, 27): RPAR(OP) ')'
[00](01, 27)-(01, 28): COLON(OP) ':'
[00](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 16): NAME(NAME) 'checkofuniek'
[01](01, 17)-(01, 18): EQUAL(OP) '='
[01](01, 19)-(01, 23): NAME(NAME) 'list'
[01](01, 23)-(01, 24): LPAR(OP) '('
[01](01, 24)-(01, 25): RPAR(OP) ')'
[01](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 13): NAME(NAME) 'verticaal'
[02](01, 14)-(01, 15): EQUAL(OP) '='
[02](01, 16)-(01, 20): NAME(NAME) 'list'
[02](01, 20)-(01, 21): LPAR(OP) '('
[02](01, 21)-(01, 22): RPAR(OP) ')'
[02](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 19): NAME(NAME) 'verticaalsommen'
[03](01, 20)-(01, 21): EQUAL(OP) '='
[03](01, 22)-(01, 26): NAME(NAME) 'list'
[03](01, 26)-(01, 27): LPAR(OP) '('
[03](01, 27)-(01, 28): RPAR(OP) ')'
[03](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 15): NAME(NAME) 'linksschuin'
[04](01, 16)-(01, 17): EQUAL(OP) '='
[04](01, 18)-(01, 22): NAME(NAME) 'list'
[04](01, 22)-(01, 23): LPAR(OP) '('
[04](01, 23)-(01, 24): RPAR(OP) ')'
[04](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 16): NAME(NAME) 'rechtsschuin'
[05](01, 17)-(01, 18): EQUAL(OP) '='
[05](01, 19)-(01, 23): NAME(NAME) 'list'
[05](01, 23)-(01, 24): LPAR(OP) '('
[05](01, 24)-(01, 25): RPAR(OP) ')'
[05](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 04): INDENT(INDENT) '    '
[06](01, 04)-(01, 07): NAME(NAME) 'for'
[06](01, 08)-(01, 09): NAME(NAME) 'i'
[06](01, 10)-(01, 12): NAME(NAME) 'in'
[06](01, 13)-(01, 19): NAME(NAME) 'matrix'
[06](01, 19)-(01, 20): COLON(OP) ':'
[06](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 08): INDENT(INDENT) '        '
[07](01, 08)-(01, 11): NAME(NAME) 'for'
[07](01, 12)-(01, 13): NAME(NAME) 'j'
[07](01, 14)-(01, 16): NAME(NAME) 'in'
[07](01, 17)-(01, 18): NAME(NAME) 'i'
[07](01, 18)-(01, 19): COLON(OP) ':'
[07](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 12): INDENT(INDENT) '            '
[08](01, 12)-(01, 24): NAME(NAME) 'checkofuniek'
[08](01, 24)-(01, 25): DOT(OP) '.'
[08](01, 25)-(01, 31): NAME(NAME) 'append'
[08](01, 31)-(01, 32): LPAR(OP) '('
[08](01, 32)-(01, 33): NAME(NAME) 'j'
[08](01, 33)-(01, 34): RPAR(OP) ')'
[08](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 06): NAME(NAME) 'if'
[09](01, 07)-(01, 16): NAME(NAME) 'is_unique'
[09](01, 16)-(01, 17): LPAR(OP) '('
[09](01, 17)-(01, 29): NAME(NAME) 'checkofuniek'
[09](01, 29)-(01, 30): RPAR(OP) ')'
[09](01, 30)-(01, 31): COLON(OP) ':'
[09](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 08): INDENT(INDENT) '        '
[10](01, 08)-(01, 10): NAME(NAME) 'if'
[10](01, 11)-(01, 12): LPAR(OP) '('
[10](01, 12)-(01, 15): NAME(NAME) 'len'
[10](01, 15)-(01, 16): LPAR(OP) '('
[10](01, 16)-(01, 22): NAME(NAME) 'matrix'
[10](01, 22)-(01, 23): RPAR(OP) ')'
[10](01, 24)-(01, 26): EQEQUAL(OP) '=='
[10](01, 27)-(01, 28): NUMBER(NUMBER) '1'
[10](01, 29)-(01, 32): NAME(NAME) 'and'
[10](01, 33)-(01, 36): NAME(NAME) 'len'
[10](01, 36)-(01, 37): LPAR(OP) '('
[10](01, 37)-(01, 43): NAME(NAME) 'matrix'
[10](01, 43)-(01, 44): LSQB(OP) '['
[10](01, 44)-(01, 45): NUMBER(NUMBER) '0'
[10](01, 45)-(01, 46): RSQB(OP) ']'
[10](01, 46)-(01, 47): RPAR(OP) ')'
[10](01, 48)-(01, 50): EQEQUAL(OP) '=='
[10](01, 51)-(01, 52): NUMBER(NUMBER) '1'
[10](01, 52)-(01, 53): RPAR(OP) ')'
[10](01, 54)-(01, 56): NAME(NAME) 'or'
[10](01, 57)-(01, 58): LPAR(OP) '('
[10](01, 58)-(01, 61): NAME(NAME) 'len'
[10](01, 61)-(01, 62): LPAR(OP) '('
[10](01, 62)-(01, 68): NAME(NAME) 'matrix'
[10](01, 68)-(01, 69): RPAR(OP) ')'
[10](01, 70)-(01, 71): PERCENT(OP) '%'
[10](01, 72)-(01, 73): NUMBER(NUMBER) '2'
[10](01, 74)-(01, 76): EQEQUAL(OP) '=='
[10](01, 77)-(01, 78): NUMBER(NUMBER) '0'
[10](01, 79)-(01, 82): NAME(NAME) 'and'
[10](01, 83)-(01, 86): NAME(NAME) 'len'
[10](01, 86)-(01, 87): LPAR(OP) '('
[10](01, 87)-(01, 93): NAME(NAME) 'matrix'
[10](01, 93)-(01, 94): RPAR(OP) ')'
[10](01, 95)-(01, 97): EQEQUAL(OP) '=='
[10](01, 98)-(01, 101): NAME(NAME) 'len'
[10](01, 101)-(01, 102): LPAR(OP) '('
[10](01, 102)-(01, 108): NAME(NAME) 'matrix'
[10](01, 108)-(01, 109): LSQB(OP) '['
[10](01, 109)-(01, 110): NUMBER(NUMBER) '0'
[10](01, 110)-(01, 111): RSQB(OP) ']'
[10](01, 111)-(01, 112): RPAR(OP) ')'
[10](01, 112)-(01, 113): RPAR(OP) ')'
[10](01, 113)-(01, 114): COLON(OP) ':'
[10](01, 114)-(01, 115): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 12): INDENT(INDENT) '            '
[11](01, 12)-(01, 15): NAME(NAME) 'for'
[11](01, 16)-(01, 17): NAME(NAME) 'i'
[11](01, 18)-(01, 20): NAME(NAME) 'in'
[11](01, 21)-(01, 27): NAME(NAME) 'matrix'
[11](01, 27)-(01, 28): COLON(OP) ':'
[11](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 16): INDENT(INDENT) '                '
[12](01, 16)-(01, 18): NAME(NAME) 'if'
[12](01, 19)-(01, 22): NAME(NAME) 'sum'
[12](01, 22)-(01, 23): LPAR(OP) '('
[12](01, 23)-(01, 24): NAME(NAME) 'i'
[12](01, 24)-(01, 25): RPAR(OP) ')'
[12](01, 26)-(01, 28): EQEQUAL(OP) '=='
[12](01, 29)-(01, 32): NAME(NAME) 'sum'
[12](01, 32)-(01, 33): LPAR(OP) '('
[12](01, 33)-(01, 39): NAME(NAME) 'matrix'
[12](01, 39)-(01, 40): LSQB(OP) '['
[12](01, 40)-(01, 41): NUMBER(NUMBER) '0'
[12](01, 41)-(01, 42): RSQB(OP) ']'
[12](01, 42)-(01, 43): RPAR(OP) ')'
[12](01, 43)-(01, 44): COLON(OP) ':'
[12](01, 44)-(01, 45): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 20): INDENT(INDENT) '                    '
[13](01, 20)-(01, 28): NAME(NAME) 'continue'
[13](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 16): INDENT(INDENT) '                '
[14](01, 16)-(01, 20): NAME(NAME) 'else'
[14](01, 20)-(01, 21): COLON(OP) ':'
[14](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 20): INDENT(INDENT) '                    '
[15](01, 20)-(01, 26): NAME(NAME) 'return'
[15](01, 27)-(01, 32): NAME(NAME) 'False'
[15](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 12): INDENT(INDENT) '            '
[16](01, 12)-(01, 18): NAME(NAME) 'teller'
[16](01, 19)-(01, 20): EQUAL(OP) '='
[16](01, 21)-(01, 22): NUMBER(NUMBER) '0'
[16](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 12): INDENT(INDENT) '            '
[17](01, 12)-(01, 17): NAME(NAME) 'while'
[17](01, 18)-(01, 24): NAME(NAME) 'teller'
[17](01, 25)-(01, 26): LESS(OP) '<'
[17](01, 27)-(01, 30): NAME(NAME) 'len'
[17](01, 30)-(01, 31): LPAR(OP) '('
[17](01, 31)-(01, 37): NAME(NAME) 'matrix'
[17](01, 37)-(01, 38): LSQB(OP) '['
[17](01, 38)-(01, 39): NUMBER(NUMBER) '0'
[17](01, 39)-(01, 40): RSQB(OP) ']'
[17](01, 40)-(01, 41): RPAR(OP) ')'
[17](01, 41)-(01, 42): COLON(OP) ':'
[17](01, 42)-(01, 43): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 16): INDENT(INDENT) '                '
[18](01, 16)-(01, 22): NAME(NAME) 'teller'
[18](01, 23)-(01, 24): EQUAL(OP) '='
[18](01, 25)-(01, 26): NUMBER(NUMBER) '0'
[18](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 16): INDENT(INDENT) '                '
[19](01, 16)-(01, 19): NAME(NAME) 'for'
[19](01, 20)-(01, 21): NAME(NAME) 'i'
[19](01, 22)-(01, 24): NAME(NAME) 'in'
[19](01, 25)-(01, 31): NAME(NAME) 'matrix'
[19](01, 31)-(01, 32): COLON(OP) ':'
[19](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): DEDENT(DEDENT)
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 20): INDENT(INDENT) '                    '
[20](01, 20)-(01, 29): NAME(NAME) 'verticaal'
[20](01, 29)-(01, 30): DOT(OP) '.'
[20](01, 30)-(01, 36): NAME(NAME) 'append'
[20](01, 36)-(01, 37): LPAR(OP) '('
[20](01, 37)-(01, 38): NAME(NAME) 'i'
[20](01, 38)-(01, 39): LSQB(OP) '['
[20](01, 39)-(01, 45): NAME(NAME) 'teller'
[20](01, 45)-(01, 46): RSQB(OP) ']'
[20](01, 46)-(01, 47): RPAR(OP) ')'
[20](01, 47)-(01, 48): NEWLINE(NEWLINE) '\n'
[20](02, 00)-(02, 00): DEDENT(DEDENT)
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 16): INDENT(INDENT) '                '
[21](01, 16)-(01, 22): NAME(NAME) 'teller'
[21](01, 23)-(01, 25): PLUSEQUAL(OP) '+='
[21](01, 26)-(01, 27): NUMBER(NUMBER) '1'
[21](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[21](02, 00)-(02, 00): DEDENT(DEDENT)
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 16): INDENT(INDENT) '                '
[22](01, 16)-(01, 31): NAME(NAME) 'verticaalsommen'
[22](01, 31)-(01, 32): DOT(OP) '.'
[22](01, 32)-(01, 38): NAME(NAME) 'append'
[22](01, 38)-(01, 39): LPAR(OP) '('
[22](01, 39)-(01, 42): NAME(NAME) 'sum'
[22](01, 42)-(01, 43): LPAR(OP) '('
[22](01, 43)-(01, 52): NAME(NAME) 'verticaal'
[22](01, 52)-(01, 53): RPAR(OP) ')'
[22](01, 53)-(01, 54): RPAR(OP) ')'
[22](01, 54)-(01, 55): NEWLINE(NEWLINE) '\n'
[22](02, 00)-(02, 00): DEDENT(DEDENT)
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[23](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[23](01, 00)-(01, 16): INDENT(INDENT) '                '
[23](01, 16)-(01, 19): NAME(NAME) 'for'
[23](01, 20)-(01, 21): NAME(NAME) 'i'
[23](01, 22)-(01, 24): NAME(NAME) 'in'
[23](01, 25)-(01, 34): NAME(NAME) 'verticaal'
[23](01, 34)-(01, 35): COLON(OP) ':'
[23](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[23](02, 00)-(02, 00): DEDENT(DEDENT)
[23](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[24](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[24](01, 00)-(01, 20): INDENT(INDENT) '                    '
[24](01, 20)-(01, 29): NAME(NAME) 'verticaal'
[24](01, 29)-(01, 30): DOT(OP) '.'
[24](01, 30)-(01, 36): NAME(NAME) 'remove'
[24](01, 36)-(01, 37): LPAR(OP) '('
[24](01, 37)-(01, 38): NAME(NAME) 'i'
[24](01, 38)-(01, 39): RPAR(OP) ')'
[24](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[24](02, 00)-(02, 00): DEDENT(DEDENT)
[24](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[25](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[25](01, 00)-(01, 12): INDENT(INDENT) '            '
[25](01, 12)-(01, 14): NAME(NAME) 'if'
[25](01, 15)-(01, 18): NAME(NAME) 'len'
[25](01, 18)-(01, 19): LPAR(OP) '('
[25](01, 19)-(01, 34): NAME(NAME) 'verticaalsommen'
[25](01, 34)-(01, 35): RPAR(OP) ')'
[25](01, 36)-(01, 38): EQEQUAL(OP) '=='
[25](01, 39)-(01, 40): NUMBER(NUMBER) '1'
[25](01, 41)-(01, 43): NAME(NAME) 'or'
[25](01, 44)-(01, 45): LPAR(OP) '('
[25](01, 45)-(01, 48): NAME(NAME) 'not'
[25](01, 49)-(01, 58): NAME(NAME) 'is_unique'
[25](01, 58)-(01, 59): LPAR(OP) '('
[25](01, 59)-(01, 74): NAME(NAME) 'verticaalsommen'
[25](01, 74)-(01, 75): RPAR(OP) ')'
[25](01, 75)-(01, 76): RPAR(OP) ')'
[25](01, 76)-(01, 77): COLON(OP) ':'
[25](01, 77)-(01, 78): NEWLINE(NEWLINE) '\n'
[25](02, 00)-(02, 00): DEDENT(DEDENT)
[25](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[26](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[26](01, 00)-(01, 16): INDENT(INDENT) '                '
[26](01, 16)-(01, 23): NAME(NAME) 'teller2'
[26](01, 24)-(01, 25): EQUAL(OP) '='
[26](01, 26)-(01, 27): NUMBER(NUMBER) '0'
[26](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[26](02, 00)-(02, 00): DEDENT(DEDENT)
[26](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[27](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[27](01, 00)-(01, 16): INDENT(INDENT) '                '
[27](01, 16)-(01, 21): NAME(NAME) 'while'
[27](01, 22)-(01, 29): NAME(NAME) 'teller2'
[27](01, 30)-(01, 31): LESS(OP) '<'
[27](01, 32)-(01, 35): NAME(NAME) 'len'
[27](01, 35)-(01, 36): LPAR(OP) '('
[27](01, 36)-(01, 42): NAME(NAME) 'matrix'
[27](01, 42)-(01, 43): LSQB(OP) '['
[27](01, 43)-(01, 44): NUMBER(NUMBER) '0'
[27](01, 44)-(01, 45): RSQB(OP) ']'
[27](01, 45)-(01, 46): RPAR(OP) ')'
[27](01, 46)-(01, 47): COLON(OP) ':'
[27](01, 47)-(01, 48): NEWLINE(NEWLINE) '\n'
[27](02, 00)-(02, 00): DEDENT(DEDENT)
[27](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[28](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[28](01, 00)-(01, 20): INDENT(INDENT) '                    '
[28](01, 20)-(01, 23): NAME(NAME) 'for'
[28](01, 24)-(01, 25): NAME(NAME) 'i'
[28](01, 26)-(01, 28): NAME(NAME) 'in'
[28](01, 29)-(01, 35): NAME(NAME) 'matrix'
[28](01, 35)-(01, 36): COLON(OP) ':'
[28](01, 36)-(01, 37): NEWLINE(NEWLINE) '\n'
[28](02, 00)-(02, 00): DEDENT(DEDENT)
[28](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[29](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[29](01, 00)-(01, 24): INDENT(INDENT) '                        '
[29](01, 24)-(01, 35): NAME(NAME) 'linksschuin'
[29](01, 35)-(01, 36): DOT(OP) '.'
[29](01, 36)-(01, 42): NAME(NAME) 'append'
[29](01, 42)-(01, 43): LPAR(OP) '('
[29](01, 43)-(01, 44): NAME(NAME) 'i'
[29](01, 44)-(01, 45): LSQB(OP) '['
[29](01, 45)-(01, 46): NUMBER(NUMBER) '0'
[29](01, 46)-(01, 47): PLUS(OP) '+'
[29](01, 47)-(01, 54): NAME(NAME) 'teller2'
[29](01, 54)-(01, 55): RSQB(OP) ']'
[29](01, 55)-(01, 56): RPAR(OP) ')'
[29](01, 56)-(01, 57): NEWLINE(NEWLINE) '\n'
[29](02, 00)-(02, 00): DEDENT(DEDENT)
[29](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[30](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[30](01, 00)-(01, 24): INDENT(INDENT) '                        '
[30](01, 24)-(01, 36): NAME(NAME) 'rechtsschuin'
[30](01, 36)-(01, 37): DOT(OP) '.'
[30](01, 37)-(01, 43): NAME(NAME) 'append'
[30](01, 43)-(01, 44): LPAR(OP) '('
[30](01, 44)-(01, 45): NAME(NAME) 'i'
[30](01, 45)-(01, 46): LSQB(OP) '['
[30](01, 46)-(01, 49): NAME(NAME) 'len'
[30](01, 49)-(01, 50): LPAR(OP) '('
[30](01, 50)-(01, 51): NAME(NAME) 'i'
[30](01, 51)-(01, 52): RPAR(OP) ')'
[30](01, 52)-(01, 53): MINUS(OP) '-'
[30](01, 53)-(01, 54): NUMBER(NUMBER) '1'
[30](01, 54)-(01, 55): MINUS(OP) '-'
[30](01, 55)-(01, 62): NAME(NAME) 'teller2'
[30](01, 62)-(01, 63): RSQB(OP) ']'
[30](01, 63)-(01, 64): RPAR(OP) ')'
[30](01, 64)-(01, 65): NEWLINE(NEWLINE) '\n'
[30](02, 00)-(02, 00): DEDENT(DEDENT)
[30](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[31](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[31](01, 00)-(01, 24): INDENT(INDENT) '                        '
[31](01, 24)-(01, 31): NAME(NAME) 'teller2'
[31](01, 32)-(01, 34): PLUSEQUAL(OP) '+='
[31](01, 35)-(01, 36): NUMBER(NUMBER) '1'
[31](01, 36)-(01, 37): NEWLINE(NEWLINE) '\n'
[31](02, 00)-(02, 00): DEDENT(DEDENT)
[31](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[32](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[32](01, 00)-(01, 16): INDENT(INDENT) '                '
[32](01, 16)-(01, 18): NAME(NAME) 'if'
[32](01, 19)-(01, 22): NAME(NAME) 'sum'
[32](01, 22)-(01, 23): LPAR(OP) '('
[32](01, 23)-(01, 35): NAME(NAME) 'rechtsschuin'
[32](01, 35)-(01, 36): RPAR(OP) ')'
[32](01, 37)-(01, 39): EQEQUAL(OP) '=='
[32](01, 40)-(01, 43): NAME(NAME) 'sum'
[32](01, 43)-(01, 44): LPAR(OP) '('
[32](01, 44)-(01, 55): NAME(NAME) 'linksschuin'
[32](01, 55)-(01, 56): RPAR(OP) ')'
[32](01, 57)-(01, 59): EQEQUAL(OP) '=='
[32](01, 60)-(01, 63): NAME(NAME) 'sum'
[32](01, 63)-(01, 64): LPAR(OP) '('
[32](01, 64)-(01, 70): NAME(NAME) 'matrix'
[32](01, 70)-(01, 71): LSQB(OP) '['
[32](01, 71)-(01, 72): NUMBER(NUMBER) '0'
[32](01, 72)-(01, 73): RSQB(OP) ']'
[32](01, 73)-(01, 74): RPAR(OP) ')'
[32](01, 74)-(01, 75): COLON(OP) ':'
[32](01, 75)-(01, 76): NEWLINE(NEWLINE) '\n'
[32](02, 00)-(02, 00): DEDENT(DEDENT)
[32](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[33](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[33](01, 00)-(01, 20): INDENT(INDENT) '                    '
[33](01, 20)-(01, 26): NAME(NAME) 'return'
[33](01, 27)-(01, 31): NAME(NAME) 'True'
[33](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[33](02, 00)-(02, 00): DEDENT(DEDENT)
[33](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[34](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[34](01, 00)-(01, 16): INDENT(INDENT) '                '
[34](01, 16)-(01, 20): NAME(NAME) 'else'
[34](01, 20)-(01, 21): COLON(OP) ':'
[34](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[34](02, 00)-(02, 00): DEDENT(DEDENT)
[34](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[35](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[35](01, 00)-(01, 20): INDENT(INDENT) '                    '
[35](01, 20)-(01, 26): NAME(NAME) 'return'
[35](01, 27)-(01, 32): NAME(NAME) 'False'
[35](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[35](02, 00)-(02, 00): DEDENT(DEDENT)
[35](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[36](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[36](01, 00)-(01, 12): INDENT(INDENT) '            '
[36](01, 12)-(01, 16): NAME(NAME) 'else'
[36](01, 16)-(01, 17): COLON(OP) ':'
[36](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[36](02, 00)-(02, 00): DEDENT(DEDENT)
[36](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[37](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[37](01, 00)-(01, 16): INDENT(INDENT) '                '
[37](01, 16)-(01, 22): NAME(NAME) 'return'
[37](01, 23)-(01, 28): NAME(NAME) 'False'
[37](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[37](02, 00)-(02, 00): DEDENT(DEDENT)
[37](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[38](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[38](01, 00)-(01, 08): INDENT(INDENT) '        '
[38](01, 08)-(01, 12): NAME(NAME) 'else'
[38](01, 12)-(01, 13): COLON(OP) ':'
[38](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[38](02, 00)-(02, 00): DEDENT(DEDENT)
[38](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[39](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[39](01, 00)-(01, 12): INDENT(INDENT) '            '
[39](01, 12)-(01, 18): NAME(NAME) 'return'
[39](01, 19)-(01, 24): NAME(NAME) 'False'
[39](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[39](02, 00)-(02, 00): DEDENT(DEDENT)
[39](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[40](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[40](01, 00)-(01, 04): INDENT(INDENT) '    '
[40](01, 04)-(01, 08): NAME(NAME) 'else'
[40](01, 08)-(01, 09): COLON(OP) ':'
[40](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[40](02, 00)-(02, 00): DEDENT(DEDENT)
[40](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[41](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[41](01, 00)-(01, 08): INDENT(INDENT) '        '
[41](01, 08)-(01, 14): NAME(NAME) 'return'
[41](01, 15)-(01, 20): NAME(NAME) 'False'
[41](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[41](02, 00)-(02, 00): DEDENT(DEDENT)
[41](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[42](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[42](01, 00)-(01, 03): NAME(NAME) 'def'
[42](01, 04)-(01, 13): NAME(NAME) 'is_unique'
[42](01, 13)-(01, 14): LPAR(OP) '('
[42](01, 14)-(01, 15): NAME(NAME) 'l'
[42](01, 15)-(01, 16): RPAR(OP) ')'
[42](01, 16)-(01, 17): COLON(OP) ':'
[42](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[42](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[43](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[43](01, 00)-(01, 04): INDENT(INDENT) '    '
[43](01, 04)-(01, 11): NAME(NAME) 'teller1'
[43](01, 12)-(01, 13): EQUAL(OP) '='
[43](01, 14)-(01, 15): NUMBER(NUMBER) '0'
[43](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[43](02, 00)-(02, 00): DEDENT(DEDENT)
[43](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[44](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[44](01, 00)-(01, 04): INDENT(INDENT) '    '
[44](01, 04)-(01, 07): NAME(NAME) 'for'
[44](01, 08)-(01, 09): NAME(NAME) 'i'
[44](01, 10)-(01, 12): NAME(NAME) 'in'
[44](01, 13)-(01, 14): NAME(NAME) 'l'
[44](01, 14)-(01, 15): COLON(OP) ':'
[44](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[44](02, 00)-(02, 00): DEDENT(DEDENT)
[44](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[45](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[45](01, 00)-(01, 08): INDENT(INDENT) '        '
[45](01, 08)-(01, 15): NAME(NAME) 'teller2'
[45](01, 16)-(01, 17): EQUAL(OP) '='
[45](01, 18)-(01, 19): NUMBER(NUMBER) '0'
[45](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[45](02, 00)-(02, 00): DEDENT(DEDENT)
[45](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[46](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[46](01, 00)-(01, 08): INDENT(INDENT) '        '
[46](01, 08)-(01, 11): NAME(NAME) 'for'
[46](01, 12)-(01, 13): NAME(NAME) 'j'
[46](01, 14)-(01, 16): NAME(NAME) 'in'
[46](01, 17)-(01, 18): NAME(NAME) 'l'
[46](01, 18)-(01, 19): COLON(OP) ':'
[46](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[46](02, 00)-(02, 00): DEDENT(DEDENT)
[46](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[47](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[47](01, 00)-(01, 12): INDENT(INDENT) '            '
[47](01, 12)-(01, 14): NAME(NAME) 'if'
[47](01, 15)-(01, 22): NAME(NAME) 'teller1'
[47](01, 23)-(01, 25): NOTEQUAL(OP) '!='
[47](01, 26)-(01, 33): NAME(NAME) 'teller2'
[47](01, 34)-(01, 37): NAME(NAME) 'and'
[47](01, 38)-(01, 39): NAME(NAME) 'i'
[47](01, 40)-(01, 42): EQEQUAL(OP) '=='
[47](01, 43)-(01, 44): NAME(NAME) 'j'
[47](01, 44)-(01, 45): COLON(OP) ':'
[47](01, 45)-(01, 46): NEWLINE(NEWLINE) '\n'
[47](02, 00)-(02, 00): DEDENT(DEDENT)
[47](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[48](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[48](01, 00)-(01, 16): INDENT(INDENT) '                '
[48](01, 16)-(01, 22): NAME(NAME) 'return'
[48](01, 23)-(01, 28): NAME(NAME) 'False'
[48](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[48](02, 00)-(02, 00): DEDENT(DEDENT)
[48](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[49](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[49](01, 00)-(01, 12): INDENT(INDENT) '            '
[49](01, 12)-(01, 16): NAME(NAME) 'else'
[49](01, 16)-(01, 17): COLON(OP) ':'
[49](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[49](02, 00)-(02, 00): DEDENT(DEDENT)
[49](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[50](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[50](01, 00)-(01, 16): INDENT(INDENT) '                '
[50](01, 16)-(01, 23): NAME(NAME) 'teller2'
[50](01, 24)-(01, 26): PLUSEQUAL(OP) '+='
[50](01, 27)-(01, 28): NUMBER(NUMBER) '1'
[50](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[50](02, 00)-(02, 00): DEDENT(DEDENT)
[50](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[51](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[51](01, 00)-(01, 08): INDENT(INDENT) '        '
[51](01, 08)-(01, 15): NAME(NAME) 'teller1'
[51](01, 16)-(01, 18): PLUSEQUAL(OP) '+='
[51](01, 19)-(01, 20): NUMBER(NUMBER) '1'
[51](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[51](02, 00)-(02, 00): DEDENT(DEDENT)
[51](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[52](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[52](01, 00)-(01, 04): INDENT(INDENT) '    '
[52](01, 04)-(01, 10): NAME(NAME) 'return'
[52](01, 11)-(01, 15): NAME(NAME) 'True'
[52](01, 15)-(01, 16): NEWLINE(NEWLINE)
[52](02, 00)-(02, 00): DEDENT(DEDENT)
[52](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

