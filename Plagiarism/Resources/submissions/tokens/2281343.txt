[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 57): COMMENT(COMMENT) '# checken als str met spaties begint --> allemaal wegdoen'
[00](01, 57)-(01, 58): NL(NL) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 68): COMMENT(COMMENT) '# woorden onderscheiden, enkel spatie toestaan, dubbele verwijderen!'
[01](01, 68)-(01, 69): NL(NL) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 01): NL(NL) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 03): NAME(NAME) 'def'
[03](01, 04)-(01, 18): NAME(NAME) 'cleanup_spaces'
[03](01, 18)-(01, 19): LPAR(OP) '('
[03](01, 19)-(01, 25): NAME(NAME) 'string'
[03](01, 25)-(01, 26): RPAR(OP) ')'
[03](01, 26)-(01, 27): COLON(OP) ':'
[03](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 09): NAME(NAME) 'while'
[04](01, 10)-(01, 14): NAME(NAME) 'True'
[04](01, 14)-(01, 15): COLON(OP) ':'
[04](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 08): INDENT(INDENT) '        '
[05](01, 08)-(01, 10): NAME(NAME) 'if'
[05](01, 11)-(01, 17): NAME(NAME) 'string'
[05](01, 17)-(01, 18): LSQB(OP) '['
[05](01, 18)-(01, 19): NUMBER(NUMBER) '0'
[05](01, 19)-(01, 20): RSQB(OP) ']'
[05](01, 20)-(01, 22): EQEQUAL(OP) '=='
[05](01, 23)-(01, 26): STRING(STRING) '" "'
[05](01, 26)-(01, 27): COLON(OP) ':'
[05](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 12): INDENT(INDENT) '            '
[06](01, 12)-(01, 18): NAME(NAME) 'string'
[06](01, 19)-(01, 20): EQUAL(OP) '='
[06](01, 21)-(01, 27): NAME(NAME) 'string'
[06](01, 27)-(01, 28): LSQB(OP) '['
[06](01, 28)-(01, 29): NUMBER(NUMBER) '1'
[06](01, 29)-(01, 30): COLON(OP) ':'
[06](01, 30)-(01, 31): RSQB(OP) ']'
[06](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 08): INDENT(INDENT) '        '
[07](01, 08)-(01, 12): NAME(NAME) 'elif'
[07](01, 13)-(01, 19): NAME(NAME) 'string'
[07](01, 19)-(01, 20): LSQB(OP) '['
[07](01, 20)-(01, 21): NUMBER(NUMBER) '0'
[07](01, 21)-(01, 22): RSQB(OP) ']'
[07](01, 23)-(01, 25): NOTEQUAL(OP) '!='
[07](01, 26)-(01, 29): STRING(STRING) '" "'
[07](01, 29)-(01, 30): COLON(OP) ':'
[07](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 12): INDENT(INDENT) '            '
[08](01, 12)-(01, 17): NAME(NAME) 'break'
[08](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 01): NL(NL) '\n'
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 04): INDENT(INDENT) '    '
[10](01, 04)-(01, 09): NAME(NAME) 'while'
[10](01, 10)-(01, 14): NAME(NAME) 'True'
[10](01, 14)-(01, 15): COLON(OP) ':'
[10](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 08): INDENT(INDENT) '        '
[11](01, 08)-(01, 10): NAME(NAME) 'if'
[11](01, 11)-(01, 17): NAME(NAME) 'string'
[11](01, 17)-(01, 18): LSQB(OP) '['
[11](01, 18)-(01, 19): MINUS(OP) '-'
[11](01, 19)-(01, 20): NUMBER(NUMBER) '1'
[11](01, 20)-(01, 21): RSQB(OP) ']'
[11](01, 21)-(01, 23): EQEQUAL(OP) '=='
[11](01, 24)-(01, 27): STRING(STRING) '" "'
[11](01, 27)-(01, 28): COLON(OP) ':'
[11](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 12): INDENT(INDENT) '            '
[12](01, 12)-(01, 18): NAME(NAME) 'string'
[12](01, 19)-(01, 20): EQUAL(OP) '='
[12](01, 21)-(01, 27): NAME(NAME) 'string'
[12](01, 27)-(01, 28): LSQB(OP) '['
[12](01, 28)-(01, 29): COLON(OP) ':'
[12](01, 29)-(01, 30): MINUS(OP) '-'
[12](01, 30)-(01, 31): NUMBER(NUMBER) '2'
[12](01, 31)-(01, 32): RSQB(OP) ']'
[12](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 08): INDENT(INDENT) '        '
[13](01, 08)-(01, 12): NAME(NAME) 'elif'
[13](01, 13)-(01, 19): NAME(NAME) 'string'
[13](01, 19)-(01, 20): LSQB(OP) '['
[13](01, 20)-(01, 21): MINUS(OP) '-'
[13](01, 21)-(01, 22): NUMBER(NUMBER) '1'
[13](01, 22)-(01, 23): RSQB(OP) ']'
[13](01, 24)-(01, 26): NOTEQUAL(OP) '!='
[13](01, 27)-(01, 30): STRING(STRING) '" "'
[13](01, 30)-(01, 31): COLON(OP) ':'
[13](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 12): INDENT(INDENT) '            '
[14](01, 12)-(01, 17): NAME(NAME) 'break'
[14](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 25): COMMENT(COMMENT) '# buitenkanten zijn klaar'
[15](01, 25)-(01, 26): NL(NL) '\n'
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 04): INDENT(INDENT) '    '
[16](01, 04)-(01, 10): NAME(NAME) 'teller'
[16](01, 11)-(01, 12): EQUAL(OP) '='
[16](01, 13)-(01, 14): NUMBER(NUMBER) '0'
[16](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 04): INDENT(INDENT) '    '
[17](01, 04)-(01, 09): NAME(NAME) 'while'
[17](01, 10)-(01, 16): NAME(NAME) 'teller'
[17](01, 17)-(01, 18): LESS(OP) '<'
[17](01, 19)-(01, 22): NAME(NAME) 'len'
[17](01, 22)-(01, 23): LPAR(OP) '('
[17](01, 23)-(01, 29): NAME(NAME) 'string'
[17](01, 29)-(01, 30): RPAR(OP) ')'
[17](01, 30)-(01, 31): COLON(OP) ':'
[17](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 08): INDENT(INDENT) '        '
[18](01, 08)-(01, 10): NAME(NAME) 'if'
[18](01, 11)-(01, 17): NAME(NAME) 'string'
[18](01, 17)-(01, 18): LSQB(OP) '['
[18](01, 18)-(01, 24): NAME(NAME) 'teller'
[18](01, 24)-(01, 25): RSQB(OP) ']'
[18](01, 26)-(01, 28): EQEQUAL(OP) '=='
[18](01, 29)-(01, 32): STRING(STRING) '" "'
[18](01, 32)-(01, 33): COLON(OP) ':'
[18](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 12): INDENT(INDENT) '            '
[19](01, 12)-(01, 14): NAME(NAME) 'if'
[19](01, 15)-(01, 21): NAME(NAME) 'string'
[19](01, 21)-(01, 22): LSQB(OP) '['
[19](01, 22)-(01, 28): NAME(NAME) 'teller'
[19](01, 28)-(01, 29): PLUS(OP) '+'
[19](01, 29)-(01, 30): NUMBER(NUMBER) '1'
[19](01, 30)-(01, 31): RSQB(OP) ']'
[19](01, 32)-(01, 34): EQEQUAL(OP) '=='
[19](01, 35)-(01, 38): STRING(STRING) '" "'
[19](01, 38)-(01, 39): COLON(OP) ':'
[19](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): DEDENT(DEDENT)
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 16): INDENT(INDENT) '                '
[20](01, 16)-(01, 22): NAME(NAME) 'string'
[20](01, 23)-(01, 24): EQUAL(OP) '='
[20](01, 25)-(01, 31): NAME(NAME) 'string'
[20](01, 31)-(01, 32): LSQB(OP) '['
[20](01, 32)-(01, 33): COLON(OP) ':'
[20](01, 33)-(01, 39): NAME(NAME) 'teller'
[20](01, 39)-(01, 40): RSQB(OP) ']'
[20](01, 41)-(01, 42): PLUS(OP) '+'
[20](01, 43)-(01, 49): NAME(NAME) 'string'
[20](01, 49)-(01, 50): LSQB(OP) '['
[20](01, 50)-(01, 56): NAME(NAME) 'teller'
[20](01, 56)-(01, 57): PLUS(OP) '+'
[20](01, 57)-(01, 58): NUMBER(NUMBER) '1'
[20](01, 58)-(01, 59): COLON(OP) ':'
[20](01, 59)-(01, 60): RSQB(OP) ']'
[20](01, 60)-(01, 61): NEWLINE(NEWLINE) '\n'
[20](02, 00)-(02, 00): DEDENT(DEDENT)
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 16): INDENT(INDENT) '                '
[21](01, 16)-(01, 24): NAME(NAME) 'continue'
[21](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[21](02, 00)-(02, 00): DEDENT(DEDENT)
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 08): INDENT(INDENT) '        '
[22](01, 08)-(01, 14): NAME(NAME) 'teller'
[22](01, 15)-(01, 16): EQUAL(OP) '='
[22](01, 17)-(01, 23): NAME(NAME) 'teller'
[22](01, 24)-(01, 25): PLUS(OP) '+'
[22](01, 26)-(01, 27): NUMBER(NUMBER) '1'
[22](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[22](02, 00)-(02, 00): DEDENT(DEDENT)
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[23](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[23](01, 00)-(01, 04): INDENT(INDENT) '    '
[23](01, 04)-(01, 10): NAME(NAME) 'return'
[23](01, 11)-(01, 17): NAME(NAME) 'string'
[23](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[23](02, 00)-(02, 00): DEDENT(DEDENT)
[23](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

