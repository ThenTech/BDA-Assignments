[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 10): NAME(NAME) 'encode'
[00](01, 10)-(01, 11): LPAR(OP) '('
[00](01, 11)-(01, 12): NAME(NAME) 's'
[00](01, 12)-(01, 13): COMMA(OP) ','
[00](01, 14)-(01, 15): NAME(NAME) 'n'
[00](01, 15)-(01, 16): RPAR(OP) ')'
[00](01, 16)-(01, 17): COLON(OP) ':'
[00](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 05): NAME(NAME) 'n'
[01](01, 06)-(01, 07): EQUAL(OP) '='
[01](01, 08)-(01, 09): NAME(NAME) 'n'
[01](01, 10)-(01, 11): PERCENT(OP) '%'
[01](01, 12)-(01, 14): NUMBER(NUMBER) '26'
[01](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 18): NAME(NAME) 'encoded_string'
[02](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 07): NAME(NAME) 'for'
[03](01, 08)-(01, 09): NAME(NAME) 'x'
[03](01, 10)-(01, 12): NAME(NAME) 'in'
[03](01, 13)-(01, 14): NAME(NAME) 's'
[03](01, 14)-(01, 15): COLON(OP) ':'
[03](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 08): INDENT(INDENT) '        '
[04](01, 08)-(01, 10): NAME(NAME) 'if'
[04](01, 11)-(01, 14): NAME(NAME) 'ord'
[04](01, 14)-(01, 15): LPAR(OP) '('
[04](01, 15)-(01, 18): STRING(STRING) '"a"'
[04](01, 18)-(01, 19): RPAR(OP) ')'
[04](01, 20)-(01, 22): LESSEQUAL(OP) '<='
[04](01, 23)-(01, 24): LPAR(OP) '('
[04](01, 24)-(01, 27): NAME(NAME) 'ord'
[04](01, 27)-(01, 28): LPAR(OP) '('
[04](01, 28)-(01, 29): NAME(NAME) 'x'
[04](01, 29)-(01, 30): RPAR(OP) ')'
[04](01, 31)-(01, 32): PLUS(OP) '+'
[04](01, 33)-(01, 34): NAME(NAME) 'n'
[04](01, 34)-(01, 35): RPAR(OP) ')'
[04](01, 36)-(01, 38): LESSEQUAL(OP) '<='
[04](01, 39)-(01, 42): NAME(NAME) 'ord'
[04](01, 42)-(01, 43): LPAR(OP) '('
[04](01, 43)-(01, 46): STRING(STRING) '"z"'
[04](01, 46)-(01, 47): RPAR(OP) ')'
[04](01, 47)-(01, 48): COLON(OP) ':'
[04](01, 48)-(01, 49): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 12): INDENT(INDENT) '            '
[05](01, 12)-(01, 26): NAME(NAME) 'encoded_string'
[05](01, 27)-(01, 29): PLUSEQUAL(OP) '+='
[05](01, 30)-(01, 33): NAME(NAME) 'chr'
[05](01, 33)-(01, 34): LPAR(OP) '('
[05](01, 34)-(01, 37): NAME(NAME) 'ord'
[05](01, 37)-(01, 38): LPAR(OP) '('
[05](01, 38)-(01, 39): NAME(NAME) 'x'
[05](01, 39)-(01, 40): RPAR(OP) ')'
[05](01, 41)-(01, 42): PLUS(OP) '+'
[05](01, 43)-(01, 44): NAME(NAME) 'n'
[05](01, 44)-(01, 45): RPAR(OP) ')'
[05](01, 45)-(01, 46): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 08): INDENT(INDENT) '        '
[06](01, 08)-(01, 12): NAME(NAME) 'else'
[06](01, 12)-(01, 13): COLON(OP) ':'
[06](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 12): INDENT(INDENT) '            '
[07](01, 12)-(01, 26): NAME(NAME) 'encoded_string'
[07](01, 27)-(01, 29): PLUSEQUAL(OP) '+='
[07](01, 30)-(01, 31): LPAR(OP) '('
[07](01, 31)-(01, 32): LPAR(OP) '('
[07](01, 32)-(01, 35): NAME(NAME) 'ord'
[07](01, 35)-(01, 36): LPAR(OP) '('
[07](01, 36)-(01, 37): NAME(NAME) 'x'
[07](01, 37)-(01, 38): RPAR(OP) ')'
[07](01, 39)-(01, 40): PLUS(OP) '+'
[07](01, 41)-(01, 42): NAME(NAME) 'n'
[07](01, 42)-(01, 43): RPAR(OP) ')'
[07](01, 44)-(01, 45): MINUS(OP) '-'
[07](01, 46)-(01, 49): NAME(NAME) 'ord'
[07](01, 49)-(01, 50): LPAR(OP) '('
[07](01, 50)-(01, 53): STRING(STRING) '"z"'
[07](01, 53)-(01, 54): RPAR(OP) ')'
[07](01, 55)-(01, 56): PLUS(OP) '+'
[07](01, 57)-(01, 60): NAME(NAME) 'ord'
[07](01, 60)-(01, 61): LPAR(OP) '('
[07](01, 61)-(01, 64): STRING(STRING) '"a"'
[07](01, 64)-(01, 65): RPAR(OP) ')'
[07](01, 66)-(01, 67): MINUS(OP) '-'
[07](01, 68)-(01, 69): NUMBER(NUMBER) '1'
[07](01, 69)-(01, 70): RPAR(OP) ')'
[07](01, 70)-(01, 71): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 04): INDENT(INDENT) '    '
[08](01, 04)-(01, 10): NAME(NAME) 'return'
[08](01, 11)-(01, 25): NAME(NAME) 'encoded_string'
[08](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 01): NL(NL) '\n'
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 03): NAME(NAME) 'def'
[10](01, 04)-(01, 10): NAME(NAME) 'decode'
[10](01, 10)-(01, 11): LPAR(OP) '('
[10](01, 11)-(01, 12): NAME(NAME) 's'
[10](01, 12)-(01, 13): COMMA(OP) ','
[10](01, 14)-(01, 15): NAME(NAME) 'n'
[10](01, 15)-(01, 16): RPAR(OP) ')'
[10](01, 16)-(01, 17): COLON(OP) ':'
[10](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 04): INDENT(INDENT) '    '
[11](01, 04)-(01, 10): NAME(NAME) 'encode'
[11](01, 10)-(01, 11): LPAR(OP) '('
[11](01, 11)-(01, 12): NAME(NAME) 's'
[11](01, 12)-(01, 13): COMMA(OP) ','
[11](01, 14)-(01, 15): MINUS(OP) '-'
[11](01, 15)-(01, 16): NAME(NAME) 'n'
[11](01, 16)-(01, 17): RPAR(OP) ')'
[11](01, 17)-(01, 18): NEWLINE(NEWLINE)
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

