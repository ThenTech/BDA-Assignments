[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 05): NAME(NAME) 'input'
[00](01, 06)-(01, 07): EQUAL(OP) '='
[00](01, 08)-(01, 13): NAME(NAME) 'input'
[00](01, 13)-(01, 14): LPAR(OP) '('
[00](01, 14)-(01, 15): RPAR(OP) ')'
[00](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 01): NAME(NAME) 'n'
[01](01, 02)-(01, 03): EQUAL(OP) '='
[01](01, 04)-(01, 07): NAME(NAME) 'len'
[01](01, 07)-(01, 08): LPAR(OP) '('
[01](01, 08)-(01, 13): NAME(NAME) 'input'
[01](01, 13)-(01, 14): RPAR(OP) ')'
[01](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 10): NAME(NAME) 'palindrome'
[02](01, 11)-(01, 12): EQUAL(OP) '='
[02](01, 13)-(01, 15): STRING(STRING) '""'
[02](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 01): NL(NL) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 03): NAME(NAME) 'for'
[04](01, 04)-(01, 05): NAME(NAME) 'i'
[04](01, 06)-(01, 08): NAME(NAME) 'in'
[04](01, 09)-(01, 14): NAME(NAME) 'range'
[04](01, 14)-(01, 15): LPAR(OP) '('
[04](01, 15)-(01, 18): NAME(NAME) 'len'
[04](01, 18)-(01, 19): LPAR(OP) '('
[04](01, 19)-(01, 24): NAME(NAME) 'input'
[04](01, 24)-(01, 25): RPAR(OP) ')'
[04](01, 25)-(01, 26): RPAR(OP) ')'
[04](01, 26)-(01, 27): COLON(OP) ':'
[04](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 05): NAME(NAME) 'n'
[05](01, 06)-(01, 07): EQUAL(OP) '='
[05](01, 08)-(01, 09): NAME(NAME) 'n'
[05](01, 10)-(01, 11): MINUS(OP) '-'
[05](01, 12)-(01, 13): NUMBER(NUMBER) '1'
[05](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 04): INDENT(INDENT) '    '
[06](01, 04)-(01, 14): NAME(NAME) 'palindrome'
[06](01, 15)-(01, 16): EQUAL(OP) '='
[06](01, 17)-(01, 27): NAME(NAME) 'palindrome'
[06](01, 28)-(01, 29): PLUS(OP) '+'
[06](01, 30)-(01, 35): NAME(NAME) 'input'
[06](01, 35)-(01, 36): LSQB(OP) '['
[06](01, 36)-(01, 37): NAME(NAME) 'n'
[06](01, 37)-(01, 38): RSQB(OP) ']'
[06](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 01): NL(NL) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 02): NAME(NAME) 'if'
[08](01, 03)-(01, 13): NAME(NAME) 'palindrome'
[08](01, 14)-(01, 16): EQEQUAL(OP) '=='
[08](01, 17)-(01, 22): NAME(NAME) 'input'
[08](01, 22)-(01, 23): COLON(OP) ':'
[08](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 09): NAME(NAME) 'print'
[09](01, 09)-(01, 10): LPAR(OP) '('
[09](01, 10)-(01, 15): NAME(NAME) 'input'
[09](01, 15)-(01, 16): COMMA(OP) ','
[09](01, 17)-(01, 34): STRING(STRING) '"is a palindrome"'
[09](01, 34)-(01, 35): RPAR(OP) ')'
[09](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 04): NAME(NAME) 'else'
[10](01, 04)-(01, 05): COLON(OP) ':'
[10](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 04): INDENT(INDENT) '    '
[11](01, 04)-(01, 09): NAME(NAME) 'print'
[11](01, 09)-(01, 10): LPAR(OP) '('
[11](01, 10)-(01, 15): NAME(NAME) 'input'
[11](01, 15)-(01, 16): COMMA(OP) ','
[11](01, 17)-(01, 38): STRING(STRING) '"is not a palindrome"'
[11](01, 38)-(01, 39): RPAR(OP) ')'
[11](01, 39)-(01, 40): NEWLINE(NEWLINE)
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

