[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 22): COMMENT(COMMENT) '# write your code here'
[00](01, 22)-(01, 23): NL(NL) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 13): COMMENT(COMMENT) '# user inputs'
[01](01, 13)-(01, 14): NL(NL) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 01): NAME(NAME) 'x'
[02](01, 02)-(01, 03): EQUAL(OP) '='
[02](01, 04)-(01, 07): NAME(NAME) 'int'
[02](01, 07)-(01, 08): LPAR(OP) '('
[02](01, 08)-(01, 13): NAME(NAME) 'input'
[02](01, 13)-(01, 14): LPAR(OP) '('
[02](01, 14)-(01, 48): STRING(STRING) '"Give x a value (greater than 0):"'
[02](01, 48)-(01, 49): RPAR(OP) ')'
[02](01, 49)-(01, 50): RPAR(OP) ')'
[02](01, 50)-(01, 51): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 01): NAME(NAME) 'y'
[03](01, 02)-(01, 03): EQUAL(OP) '='
[03](01, 04)-(01, 07): NAME(NAME) 'int'
[03](01, 07)-(01, 08): LPAR(OP) '('
[03](01, 08)-(01, 13): NAME(NAME) 'input'
[03](01, 13)-(01, 14): LPAR(OP) '('
[03](01, 14)-(01, 48): STRING(STRING) '"Give y a value (greater than 0):"'
[03](01, 48)-(01, 49): RPAR(OP) ')'
[03](01, 49)-(01, 50): RPAR(OP) ')'
[03](01, 50)-(01, 51): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 01): NL(NL) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 33): COMMENT(COMMENT) '# default variable initialization'
[05](01, 33)-(01, 34): NL(NL) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 05): NAME(NAME) 'multi'
[06](01, 06)-(01, 07): EQUAL(OP) '='
[06](01, 08)-(01, 09): NUMBER(NUMBER) '1'
[06](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 01): NL(NL) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 19): COMMENT(COMMENT) '# start calculation'
[08](01, 19)-(01, 20): NL(NL) '\n'
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 03): NAME(NAME) 'for'
[09](01, 04)-(01, 05): NAME(NAME) 'i'
[09](01, 06)-(01, 08): NAME(NAME) 'in'
[09](01, 09)-(01, 14): NAME(NAME) 'range'
[09](01, 14)-(01, 15): LPAR(OP) '('
[09](01, 15)-(01, 16): NUMBER(NUMBER) '0'
[09](01, 16)-(01, 17): COMMA(OP) ','
[09](01, 18)-(01, 19): NAME(NAME) 'y'
[09](01, 20)-(01, 21): MINUS(OP) '-'
[09](01, 22)-(01, 23): NUMBER(NUMBER) '1'
[09](01, 23)-(01, 24): RPAR(OP) ')'
[09](01, 24)-(01, 25): COLON(OP) ':'
[09](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 04): INDENT(INDENT) '    '
[10](01, 04)-(01, 09): NAME(NAME) 'multi'
[10](01, 10)-(01, 11): EQUAL(OP) '='
[10](01, 12)-(01, 17): NAME(NAME) 'multi'
[10](01, 18)-(01, 19): STAR(OP) '*'
[10](01, 20)-(01, 21): LPAR(OP) '('
[10](01, 21)-(01, 22): LPAR(OP) '('
[10](01, 22)-(01, 23): NAME(NAME) 'x'
[10](01, 24)-(01, 25): MINUS(OP) '-'
[10](01, 26)-(01, 27): NAME(NAME) 'i'
[10](01, 27)-(01, 28): RPAR(OP) ')'
[10](01, 29)-(01, 30): SLASH(OP) '/'
[10](01, 31)-(01, 32): LPAR(OP) '('
[10](01, 32)-(01, 33): NAME(NAME) 'y'
[10](01, 34)-(01, 35): MINUS(OP) '-'
[10](01, 36)-(01, 37): NAME(NAME) 'i'
[10](01, 37)-(01, 38): RPAR(OP) ')'
[10](01, 38)-(01, 39): RPAR(OP) ')'
[10](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 01): NL(NL) '\n'
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 55): COMMENT(COMMENT) '# deze lijn code miste. het laatste deel van de formule'
[12](01, 55)-(01, 56): NL(NL) '\n'
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 05): NAME(NAME) 'multi'
[13](01, 06)-(01, 07): EQUAL(OP) '='
[13](01, 08)-(01, 13): NAME(NAME) 'multi'
[13](01, 14)-(01, 15): STAR(OP) '*'
[13](01, 16)-(01, 17): LPAR(OP) '('
[13](01, 17)-(01, 18): NAME(NAME) 'x'
[13](01, 19)-(01, 20): MINUS(OP) '-'
[13](01, 21)-(01, 22): NAME(NAME) 'y'
[13](01, 23)-(01, 24): PLUS(OP) '+'
[13](01, 25)-(01, 26): NUMBER(NUMBER) '1'
[13](01, 26)-(01, 27): RPAR(OP) ')'
[13](01, 28)-(01, 29): SLASH(OP) '/'
[13](01, 30)-(01, 31): NUMBER(NUMBER) '1'
[13](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 01): NL(NL) '\n'
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 72): COMMENT(COMMENT) "# output converted to int because we don't want anything after the comma"
[15](01, 72)-(01, 73): NL(NL) '\n'
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 05): NAME(NAME) 'print'
[16](01, 05)-(01, 06): LPAR(OP) '('
[16](01, 06)-(01, 09): NAME(NAME) 'int'
[16](01, 09)-(01, 10): LPAR(OP) '('
[16](01, 10)-(01, 15): NAME(NAME) 'multi'
[16](01, 15)-(01, 16): RPAR(OP) ')'
[16](01, 16)-(01, 17): RPAR(OP) ')'
[16](01, 17)-(01, 18): NEWLINE(NEWLINE)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

