[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 01): NAME(NAME) 's'
[00](01, 02)-(01, 03): EQUAL(OP) '='
[00](01, 04)-(01, 09): NAME(NAME) 'input'
[00](01, 09)-(01, 10): LPAR(OP) '('
[00](01, 10)-(01, 42): STRING(STRING) '"Give a word and I reverse it! "'
[00](01, 42)-(01, 43): RPAR(OP) ')'
[00](01, 43)-(01, 44): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 01): NAME(NAME) 'i'
[01](01, 02)-(01, 03): EQUAL(OP) '='
[01](01, 04)-(01, 05): NUMBER(NUMBER) '1'
[01](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 02): NAME(NAME) 'if'
[02](01, 03)-(01, 04): NAME(NAME) 's'
[02](01, 04)-(01, 05): LSQB(OP) '['
[02](01, 05)-(01, 06): NAME(NAME) 'i'
[02](01, 06)-(01, 07): RSQB(OP) ']'
[02](01, 08)-(01, 10): EQEQUAL(OP) '=='
[02](01, 11)-(01, 12): NAME(NAME) 's'
[02](01, 12)-(01, 13): LSQB(OP) '['
[02](01, 13)-(01, 16): NAME(NAME) 'len'
[02](01, 16)-(01, 17): LPAR(OP) '('
[02](01, 17)-(01, 18): NAME(NAME) 's'
[02](01, 18)-(01, 19): RPAR(OP) ')'
[02](01, 20)-(01, 21): MINUS(OP) '-'
[02](01, 22)-(01, 23): NUMBER(NUMBER) '1'
[02](01, 24)-(01, 25): MINUS(OP) '-'
[02](01, 26)-(01, 27): NAME(NAME) 'i'
[02](01, 27)-(01, 28): RSQB(OP) ']'
[02](01, 29)-(01, 32): NAME(NAME) 'and'
[02](01, 33)-(01, 34): NAME(NAME) 's'
[02](01, 35)-(01, 37): NOTEQUAL(OP) '!='
[02](01, 38)-(01, 48): STRING(STRING) '"taco cat"'
[02](01, 48)-(01, 49): COLON(OP) ':'
[02](01, 49)-(01, 50): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 09): NAME(NAME) 'print'
[03](01, 09)-(01, 10): LPAR(OP) '('
[03](01, 10)-(01, 11): NAME(NAME) 's'
[03](01, 11)-(01, 12): COMMA(OP) ','
[03](01, 13)-(01, 30): STRING(STRING) '"is a palindrome"'
[03](01, 30)-(01, 31): RPAR(OP) ')'
[03](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): NAME(NAME) 'else'
[04](01, 04)-(01, 05): COLON(OP) ':'
[04](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 09): NAME(NAME) 'print'
[05](01, 09)-(01, 10): LPAR(OP) '('
[05](01, 10)-(01, 11): NAME(NAME) 's'
[05](01, 11)-(01, 12): COMMA(OP) ','
[05](01, 13)-(01, 34): STRING(STRING) '"is not a palindrome"'
[05](01, 34)-(01, 35): RPAR(OP) ')'
[05](01, 35)-(01, 36): NEWLINE(NEWLINE)
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

