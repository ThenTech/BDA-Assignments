[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 10): NAME(NAME) 'encode'
[00](01, 10)-(01, 11): LPAR(OP) '('
[00](01, 11)-(01, 20): NAME(NAME) 'minefield'
[00](01, 20)-(01, 21): RPAR(OP) ')'
[00](01, 21)-(01, 22): COLON(OP) ':'
[00](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 11): NAME(NAME) 'encoded'
[01](01, 12)-(01, 13): EQUAL(OP) '='
[01](01, 14)-(01, 16): STRING(STRING) '""'
[01](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 01): NL(NL) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 07): NAME(NAME) 'for'
[03](01, 08)-(01, 09): NAME(NAME) 'i'
[03](01, 10)-(01, 12): NAME(NAME) 'in'
[03](01, 13)-(01, 18): NAME(NAME) 'range'
[03](01, 18)-(01, 19): LPAR(OP) '('
[03](01, 19)-(01, 22): NAME(NAME) 'len'
[03](01, 22)-(01, 23): LPAR(OP) '('
[03](01, 23)-(01, 32): NAME(NAME) 'minefield'
[03](01, 32)-(01, 33): RPAR(OP) ')'
[03](01, 33)-(01, 34): RPAR(OP) ')'
[03](01, 34)-(01, 35): COLON(OP) ':'
[03](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 08): INDENT(INDENT) '        '
[04](01, 08)-(01, 10): NAME(NAME) 'if'
[04](01, 11)-(01, 12): NAME(NAME) 'i'
[04](01, 13)-(01, 15): EQEQUAL(OP) '=='
[04](01, 16)-(01, 17): NUMBER(NUMBER) '0'
[04](01, 17)-(01, 18): COLON(OP) ':'
[04](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 12): INDENT(INDENT) '            '
[05](01, 12)-(01, 14): NAME(NAME) 'if'
[05](01, 15)-(01, 18): NAME(NAME) 'len'
[05](01, 18)-(01, 19): LPAR(OP) '('
[05](01, 19)-(01, 28): NAME(NAME) 'minefield'
[05](01, 28)-(01, 29): RPAR(OP) ')'
[05](01, 30)-(01, 32): LESSEQUAL(OP) '<='
[05](01, 33)-(01, 34): NUMBER(NUMBER) '1'
[05](01, 34)-(01, 35): COLON(OP) ':'
[05](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 16): INDENT(INDENT) '                '
[06](01, 16)-(01, 21): NAME(NAME) 'break'
[06](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 12): INDENT(INDENT) '            '
[07](01, 12)-(01, 16): NAME(NAME) 'elif'
[07](01, 17)-(01, 26): NAME(NAME) 'minefield'
[07](01, 26)-(01, 27): LSQB(OP) '['
[07](01, 27)-(01, 28): NAME(NAME) 'i'
[07](01, 29)-(01, 30): PLUS(OP) '+'
[07](01, 31)-(01, 32): NUMBER(NUMBER) '1'
[07](01, 32)-(01, 33): RSQB(OP) ']'
[07](01, 34)-(01, 36): EQEQUAL(OP) '=='
[07](01, 37)-(01, 40): STRING(STRING) '"X"'
[07](01, 40)-(01, 41): COLON(OP) ':'
[07](01, 41)-(01, 42): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 16): INDENT(INDENT) '                '
[08](01, 16)-(01, 23): NAME(NAME) 'encoded'
[08](01, 24)-(01, 26): PLUSEQUAL(OP) '+='
[08](01, 27)-(01, 30): NAME(NAME) 'str'
[08](01, 30)-(01, 31): LPAR(OP) '('
[08](01, 31)-(01, 32): NUMBER(NUMBER) '1'
[08](01, 32)-(01, 33): RPAR(OP) ')'
[08](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 08): INDENT(INDENT) '        '
[09](01, 08)-(01, 12): NAME(NAME) 'elif'
[09](01, 13)-(01, 14): NAME(NAME) 'i'
[09](01, 15)-(01, 17): EQEQUAL(OP) '=='
[09](01, 18)-(01, 21): NAME(NAME) 'len'
[09](01, 21)-(01, 22): LPAR(OP) '('
[09](01, 22)-(01, 31): NAME(NAME) 'minefield'
[09](01, 31)-(01, 32): RPAR(OP) ')'
[09](01, 33)-(01, 34): MINUS(OP) '-'
[09](01, 35)-(01, 36): NUMBER(NUMBER) '1'
[09](01, 36)-(01, 37): COLON(OP) ':'
[09](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 12): INDENT(INDENT) '            '
[10](01, 12)-(01, 14): NAME(NAME) 'if'
[10](01, 15)-(01, 24): NAME(NAME) 'minefield'
[10](01, 24)-(01, 25): LSQB(OP) '['
[10](01, 25)-(01, 26): NAME(NAME) 'i'
[10](01, 27)-(01, 28): MINUS(OP) '-'
[10](01, 29)-(01, 30): NUMBER(NUMBER) '1'
[10](01, 30)-(01, 31): RSQB(OP) ']'
[10](01, 32)-(01, 34): EQEQUAL(OP) '=='
[10](01, 35)-(01, 38): STRING(STRING) '"X"'
[10](01, 38)-(01, 39): COLON(OP) ':'
[10](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 16): INDENT(INDENT) '                '
[11](01, 16)-(01, 23): NAME(NAME) 'encoded'
[11](01, 24)-(01, 26): PLUSEQUAL(OP) '+='
[11](01, 27)-(01, 30): NAME(NAME) 'str'
[11](01, 30)-(01, 31): LPAR(OP) '('
[11](01, 31)-(01, 32): NUMBER(NUMBER) '1'
[11](01, 32)-(01, 33): RPAR(OP) ')'
[11](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 08): INDENT(INDENT) '        '
[12](01, 08)-(01, 12): NAME(NAME) 'else'
[12](01, 12)-(01, 13): COLON(OP) ':'
[12](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 12): INDENT(INDENT) '            '
[13](01, 12)-(01, 19): NAME(NAME) 'counter'
[13](01, 20)-(01, 21): EQUAL(OP) '='
[13](01, 22)-(01, 23): NUMBER(NUMBER) '0'
[13](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 12): INDENT(INDENT) '            '
[14](01, 12)-(01, 14): NAME(NAME) 'if'
[14](01, 15)-(01, 24): NAME(NAME) 'minefield'
[14](01, 24)-(01, 25): LSQB(OP) '['
[14](01, 25)-(01, 26): NAME(NAME) 'i'
[14](01, 26)-(01, 27): MINUS(OP) '-'
[14](01, 27)-(01, 28): NUMBER(NUMBER) '1'
[14](01, 28)-(01, 29): RSQB(OP) ']'
[14](01, 30)-(01, 32): EQEQUAL(OP) '=='
[14](01, 33)-(01, 36): STRING(STRING) '"X"'
[14](01, 36)-(01, 37): COLON(OP) ':'
[14](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 16): INDENT(INDENT) '                '
[15](01, 16)-(01, 23): NAME(NAME) 'counter'
[15](01, 24)-(01, 26): PLUSEQUAL(OP) '+='
[15](01, 27)-(01, 28): NUMBER(NUMBER) '1'
[15](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 12): INDENT(INDENT) '            '
[16](01, 12)-(01, 14): NAME(NAME) 'if'
[16](01, 15)-(01, 24): NAME(NAME) 'minefield'
[16](01, 24)-(01, 25): LSQB(OP) '['
[16](01, 25)-(01, 26): NAME(NAME) 'i'
[16](01, 26)-(01, 27): PLUS(OP) '+'
[16](01, 27)-(01, 28): NUMBER(NUMBER) '1'
[16](01, 28)-(01, 29): RSQB(OP) ']'
[16](01, 30)-(01, 32): EQEQUAL(OP) '=='
[16](01, 33)-(01, 36): STRING(STRING) '"X"'
[16](01, 36)-(01, 37): COLON(OP) ':'
[16](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 16): INDENT(INDENT) '                '
[17](01, 16)-(01, 23): NAME(NAME) 'counter'
[17](01, 24)-(01, 26): PLUSEQUAL(OP) '+='
[17](01, 27)-(01, 28): NUMBER(NUMBER) '1'
[17](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 12): INDENT(INDENT) '            '
[18](01, 12)-(01, 19): NAME(NAME) 'encoded'
[18](01, 20)-(01, 22): PLUSEQUAL(OP) '+='
[18](01, 23)-(01, 26): NAME(NAME) 'str'
[18](01, 26)-(01, 27): LPAR(OP) '('
[18](01, 27)-(01, 34): NAME(NAME) 'counter'
[18](01, 34)-(01, 35): RPAR(OP) ')'
[18](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 04): INDENT(INDENT) '    '
[19](01, 04)-(01, 10): NAME(NAME) 'return'
[19](01, 11)-(01, 18): NAME(NAME) 'encoded'
[19](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): DEDENT(DEDENT)
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 01): NL(NL) '\n'
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 01): NL(NL) '\n'
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 03): NAME(NAME) 'def'
[22](01, 04)-(01, 10): NAME(NAME) 'decode'
[22](01, 10)-(01, 11): LPAR(OP) '('
[22](01, 11)-(01, 20): NAME(NAME) 'minefield'
[22](01, 20)-(01, 21): RPAR(OP) ')'
[22](01, 21)-(01, 22): COLON(OP) ':'
[22](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[23](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[23](01, 00)-(01, 04): INDENT(INDENT) '    '
[23](01, 04)-(01, 11): NAME(NAME) 'decoded'
[23](01, 12)-(01, 13): EQUAL(OP) '='
[23](01, 14)-(01, 16): STRING(STRING) '""'
[23](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[23](02, 00)-(02, 00): DEDENT(DEDENT)
[23](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[24](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[24](01, 00)-(01, 01): NL(NL) '\n'
[24](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[25](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[25](01, 00)-(01, 04): INDENT(INDENT) '    '
[25](01, 04)-(01, 07): NAME(NAME) 'for'
[25](01, 08)-(01, 09): NAME(NAME) 'i'
[25](01, 10)-(01, 12): NAME(NAME) 'in'
[25](01, 13)-(01, 18): NAME(NAME) 'range'
[25](01, 18)-(01, 19): LPAR(OP) '('
[25](01, 19)-(01, 20): NUMBER(NUMBER) '2'
[25](01, 21)-(01, 23): DOUBLESTAR(OP) '**'
[25](01, 24)-(01, 27): NAME(NAME) 'len'
[25](01, 27)-(01, 28): LPAR(OP) '('
[25](01, 28)-(01, 37): NAME(NAME) 'minefield'
[25](01, 37)-(01, 38): RPAR(OP) ')'
[25](01, 38)-(01, 39): RPAR(OP) ')'
[25](01, 39)-(01, 40): COLON(OP) ':'
[25](01, 40)-(01, 41): NEWLINE(NEWLINE) '\n'
[25](02, 00)-(02, 00): DEDENT(DEDENT)
[25](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[26](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[26](01, 00)-(01, 08): INDENT(INDENT) '        '
[26](01, 08)-(01, 11): NAME(NAME) 'for'
[26](01, 12)-(01, 13): NAME(NAME) 'j'
[26](01, 14)-(01, 16): NAME(NAME) 'in'
[26](01, 17)-(01, 22): NAME(NAME) 'range'
[26](01, 22)-(01, 23): LPAR(OP) '('
[26](01, 23)-(01, 26): NAME(NAME) 'len'
[26](01, 26)-(01, 27): LPAR(OP) '('
[26](01, 27)-(01, 36): NAME(NAME) 'minefield'
[26](01, 36)-(01, 37): RPAR(OP) ')'
[26](01, 37)-(01, 38): RPAR(OP) ')'
[26](01, 38)-(01, 39): COLON(OP) ':'
[26](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[26](02, 00)-(02, 00): DEDENT(DEDENT)
[26](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[27](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[27](01, 00)-(01, 12): INDENT(INDENT) '            '
[27](01, 12)-(01, 14): NAME(NAME) 'if'
[27](01, 15)-(01, 16): LPAR(OP) '('
[27](01, 16)-(01, 17): NAME(NAME) 'i'
[27](01, 18)-(01, 20): DOUBLESLASH(OP) '//'
[27](01, 21)-(01, 22): NUMBER(NUMBER) '2'
[27](01, 22)-(01, 24): DOUBLESTAR(OP) '**'
[27](01, 24)-(01, 25): NAME(NAME) 'j'
[27](01, 25)-(01, 26): RPAR(OP) ')'
[27](01, 27)-(01, 28): PERCENT(OP) '%'
[27](01, 29)-(01, 30): NUMBER(NUMBER) '2'
[27](01, 31)-(01, 33): EQEQUAL(OP) '=='
[27](01, 34)-(01, 35): NUMBER(NUMBER) '1'
[27](01, 35)-(01, 36): COLON(OP) ':'
[27](01, 36)-(01, 37): NEWLINE(NEWLINE) '\n'
[27](02, 00)-(02, 00): DEDENT(DEDENT)
[27](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[28](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[28](01, 00)-(01, 16): INDENT(INDENT) '                '
[28](01, 16)-(01, 23): NAME(NAME) 'decoded'
[28](01, 24)-(01, 26): PLUSEQUAL(OP) '+='
[28](01, 27)-(01, 30): STRING(STRING) '"X"'
[28](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[28](02, 00)-(02, 00): DEDENT(DEDENT)
[28](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[29](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[29](01, 00)-(01, 12): INDENT(INDENT) '            '
[29](01, 12)-(01, 16): NAME(NAME) 'else'
[29](01, 16)-(01, 17): COLON(OP) ':'
[29](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[29](02, 00)-(02, 00): DEDENT(DEDENT)
[29](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[30](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[30](01, 00)-(01, 16): INDENT(INDENT) '                '
[30](01, 16)-(01, 23): NAME(NAME) 'decoded'
[30](01, 24)-(01, 26): PLUSEQUAL(OP) '+='
[30](01, 27)-(01, 30): STRING(STRING) '" "'
[30](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[30](02, 00)-(02, 00): DEDENT(DEDENT)
[30](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[31](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[31](01, 00)-(01, 08): INDENT(INDENT) '        '
[31](01, 08)-(01, 10): NAME(NAME) 'if'
[31](01, 11)-(01, 17): NAME(NAME) 'encode'
[31](01, 17)-(01, 18): LPAR(OP) '('
[31](01, 18)-(01, 25): NAME(NAME) 'decoded'
[31](01, 25)-(01, 26): RPAR(OP) ')'
[31](01, 27)-(01, 29): EQEQUAL(OP) '=='
[31](01, 30)-(01, 39): NAME(NAME) 'minefield'
[31](01, 39)-(01, 40): COLON(OP) ':'
[31](01, 40)-(01, 41): NEWLINE(NEWLINE) '\n'
[31](02, 00)-(02, 00): DEDENT(DEDENT)
[31](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[32](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[32](01, 00)-(01, 12): INDENT(INDENT) '            '
[32](01, 12)-(01, 17): NAME(NAME) 'print'
[32](01, 17)-(01, 18): LPAR(OP) '('
[32](01, 18)-(01, 25): NAME(NAME) 'decoded'
[32](01, 25)-(01, 26): RPAR(OP) ')'
[32](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[32](02, 00)-(02, 00): DEDENT(DEDENT)
[32](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[33](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[33](01, 00)-(01, 08): INDENT(INDENT) '        '
[33](01, 08)-(01, 15): NAME(NAME) 'decoded'
[33](01, 16)-(01, 17): EQUAL(OP) '='
[33](01, 18)-(01, 20): STRING(STRING) '""'
[33](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[33](02, 00)-(02, 00): DEDENT(DEDENT)
[33](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

