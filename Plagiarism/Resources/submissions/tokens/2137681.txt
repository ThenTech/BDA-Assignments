[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 02): NAME(NAME) 'w1'
[00](01, 03)-(01, 04): EQUAL(OP) '='
[00](01, 05)-(01, 10): NAME(NAME) 'input'
[00](01, 10)-(01, 11): LPAR(OP) '('
[00](01, 11)-(01, 24): STRING(STRING) "'First word?'"
[00](01, 24)-(01, 25): RPAR(OP) ')'
[00](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 02): NAME(NAME) 'w2'
[01](01, 03)-(01, 04): EQUAL(OP) '='
[01](01, 05)-(01, 10): NAME(NAME) 'input'
[01](01, 10)-(01, 11): LPAR(OP) '('
[01](01, 11)-(01, 25): STRING(STRING) "'Second word?'"
[01](01, 25)-(01, 26): RPAR(OP) ')'
[01](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 01): NAME(NAME) 'i'
[02](01, 02)-(01, 03): EQUAL(OP) '='
[02](01, 04)-(01, 07): NAME(NAME) 'len'
[02](01, 07)-(01, 08): LPAR(OP) '('
[02](01, 08)-(01, 10): NAME(NAME) 'w1'
[02](01, 10)-(01, 11): RPAR(OP) ')'
[02](01, 12)-(01, 13): MINUS(OP) '-'
[02](01, 14)-(01, 15): NUMBER(NUMBER) '1'
[02](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 01): NAME(NAME) 'k'
[03](01, 02)-(01, 03): EQUAL(OP) '='
[03](01, 04)-(01, 07): NAME(NAME) 'len'
[03](01, 07)-(01, 08): LPAR(OP) '('
[03](01, 08)-(01, 10): NAME(NAME) 'w2'
[03](01, 10)-(01, 11): RPAR(OP) ')'
[03](01, 12)-(01, 13): MINUS(OP) '-'
[03](01, 14)-(01, 15): NUMBER(NUMBER) '1'
[03](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 01): NAME(NAME) 'q'
[04](01, 02)-(01, 03): EQUAL(OP) '='
[04](01, 04)-(01, 05): NUMBER(NUMBER) '0'
[04](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 05): NAME(NAME) 'while'
[05](01, 06)-(01, 07): NAME(NAME) 'i'
[05](01, 08)-(01, 10): GREATEREQUAL(OP) '>='
[05](01, 11)-(01, 12): NUMBER(NUMBER) '0'
[05](01, 12)-(01, 13): COLON(OP) ':'
[05](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 04): INDENT(INDENT) '    '
[06](01, 04)-(01, 09): NAME(NAME) 'while'
[06](01, 10)-(01, 11): NAME(NAME) 'k'
[06](01, 12)-(01, 14): GREATEREQUAL(OP) '>='
[06](01, 15)-(01, 16): NUMBER(NUMBER) '0'
[06](01, 16)-(01, 17): COLON(OP) ':'
[06](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 08): INDENT(INDENT) '        '
[07](01, 08)-(01, 10): NAME(NAME) 'if'
[07](01, 11)-(01, 13): NAME(NAME) 'w1'
[07](01, 13)-(01, 14): LSQB(OP) '['
[07](01, 14)-(01, 15): NAME(NAME) 'i'
[07](01, 15)-(01, 16): RSQB(OP) ']'
[07](01, 17)-(01, 19): EQEQUAL(OP) '=='
[07](01, 20)-(01, 22): NAME(NAME) 'w2'
[07](01, 22)-(01, 23): LSQB(OP) '['
[07](01, 23)-(01, 24): NAME(NAME) 'k'
[07](01, 24)-(01, 25): RSQB(OP) ']'
[07](01, 25)-(01, 26): COLON(OP) ':'
[07](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 12): INDENT(INDENT) '            '
[08](01, 12)-(01, 13): NAME(NAME) 'q'
[08](01, 14)-(01, 16): PLUSEQUAL(OP) '+='
[08](01, 17)-(01, 18): NUMBER(NUMBER) '1'
[08](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 12): INDENT(INDENT) '            '
[09](01, 12)-(01, 17): NAME(NAME) 'break'
[09](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 08): INDENT(INDENT) '        '
[10](01, 08)-(01, 09): NAME(NAME) 'k'
[10](01, 10)-(01, 12): MINEQUAL(OP) '-='
[10](01, 13)-(01, 14): NUMBER(NUMBER) '1'
[10](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 04): INDENT(INDENT) '    '
[11](01, 04)-(01, 05): NAME(NAME) 'i'
[11](01, 06)-(01, 08): MINEQUAL(OP) '-='
[11](01, 09)-(01, 10): NUMBER(NUMBER) '1'
[11](01, 10)-(01, 11): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 04): INDENT(INDENT) '    '
[12](01, 04)-(01, 05): NAME(NAME) 'k'
[12](01, 06)-(01, 07): EQUAL(OP) '='
[12](01, 08)-(01, 11): NAME(NAME) 'len'
[12](01, 11)-(01, 12): LPAR(OP) '('
[12](01, 12)-(01, 14): NAME(NAME) 'w2'
[12](01, 14)-(01, 15): RPAR(OP) ')'
[12](01, 15)-(01, 16): MINUS(OP) '-'
[12](01, 16)-(01, 17): NUMBER(NUMBER) '1'
[12](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 02): NAME(NAME) 'if'
[13](01, 03)-(01, 04): NAME(NAME) 'q'
[13](01, 05)-(01, 07): EQEQUAL(OP) '=='
[13](01, 08)-(01, 11): NAME(NAME) 'len'
[13](01, 11)-(01, 12): LPAR(OP) '('
[13](01, 12)-(01, 14): NAME(NAME) 'w1'
[13](01, 14)-(01, 15): RPAR(OP) ')'
[13](01, 15)-(01, 16): COLON(OP) ':'
[13](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 04): INDENT(INDENT) '    '
[14](01, 04)-(01, 09): NAME(NAME) 'print'
[14](01, 09)-(01, 10): LPAR(OP) '('
[14](01, 10)-(01, 12): NAME(NAME) 'w1'
[14](01, 12)-(01, 13): COMMA(OP) ','
[14](01, 14)-(01, 19): STRING(STRING) "'and'"
[14](01, 19)-(01, 20): COMMA(OP) ','
[14](01, 21)-(01, 23): NAME(NAME) 'w2'
[14](01, 23)-(01, 24): COMMA(OP) ','
[14](01, 25)-(01, 39): STRING(STRING) "'are anagrams'"
[14](01, 39)-(01, 40): RPAR(OP) ')'
[14](01, 40)-(01, 41): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 04): NAME(NAME) 'else'
[15](01, 04)-(01, 05): COLON(OP) ':'
[15](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 04): INDENT(INDENT) '    '
[16](01, 04)-(01, 09): NAME(NAME) 'print'
[16](01, 09)-(01, 10): LPAR(OP) '('
[16](01, 10)-(01, 12): NAME(NAME) 'w1'
[16](01, 12)-(01, 13): COMMA(OP) ','
[16](01, 14)-(01, 19): STRING(STRING) "'and'"
[16](01, 19)-(01, 20): COMMA(OP) ','
[16](01, 21)-(01, 23): NAME(NAME) 'w2'
[16](01, 23)-(01, 24): COMMA(OP) ','
[16](01, 25)-(01, 43): STRING(STRING) "'are not anagrams'"
[16](01, 43)-(01, 44): RPAR(OP) ')'
[16](01, 44)-(01, 45): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

