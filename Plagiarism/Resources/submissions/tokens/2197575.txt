[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'zin'
[00](01, 04)-(01, 05): EQUAL(OP) '='
[00](01, 06)-(01, 11): NAME(NAME) 'input'
[00](01, 11)-(01, 12): LPAR(OP) '('
[00](01, 12)-(01, 22): STRING(STRING) '"String: "'
[00](01, 22)-(01, 23): RPAR(OP) ')'
[00](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): NAME(NAME) 'brol'
[01](01, 05)-(01, 06): EQUAL(OP) '='
[01](01, 07)-(01, 60): STRING(STRING) '\'\'\'!"#"$%&\'(\')*+,-./:;<=>?@]^_`[“\\”{|’}~0123456789\'\'\''
[01](01, 60)-(01, 61): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 03): NAME(NAME) 'def'
[02](01, 04)-(01, 11): NAME(NAME) 'cleanup'
[02](01, 11)-(01, 12): LPAR(OP) '('
[02](01, 12)-(01, 18): NAME(NAME) 'string'
[02](01, 18)-(01, 19): RPAR(OP) ')'
[02](01, 19)-(01, 20): COLON(OP) ':'
[02](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 15): NAME(NAME) 'zonder_brol'
[03](01, 16)-(01, 17): EQUAL(OP) '='
[03](01, 18)-(01, 20): STRING(STRING) '""'
[03](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 07): NAME(NAME) 'for'
[04](01, 08)-(01, 14): NAME(NAME) 'letter'
[04](01, 15)-(01, 17): NAME(NAME) 'in'
[04](01, 18)-(01, 24): NAME(NAME) 'string'
[04](01, 24)-(01, 25): COLON(OP) ':'
[04](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 08): INDENT(INDENT) '        '
[05](01, 08)-(01, 10): NAME(NAME) 'if'
[05](01, 11)-(01, 17): NAME(NAME) 'letter'
[05](01, 18)-(01, 21): NAME(NAME) 'not'
[05](01, 22)-(01, 24): NAME(NAME) 'in'
[05](01, 25)-(01, 29): NAME(NAME) 'brol'
[05](01, 29)-(01, 30): COLON(OP) ':'
[05](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 12): INDENT(INDENT) '            '
[06](01, 12)-(01, 23): NAME(NAME) 'zonder_brol'
[06](01, 24)-(01, 26): PLUSEQUAL(OP) '+='
[06](01, 27)-(01, 33): NAME(NAME) 'letter'
[06](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 04): INDENT(INDENT) '    '
[07](01, 04)-(01, 10): NAME(NAME) 'return'
[07](01, 11)-(01, 22): NAME(NAME) 'zonder_brol'
[07](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 01): NL(NL) '\n'
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 12): NAME(NAME) 'letterteller'
[09](01, 13)-(01, 14): EQUAL(OP) '='
[09](01, 15)-(01, 16): NUMBER(NUMBER) '0'
[09](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 12): NAME(NAME) 'stringteller'
[10](01, 13)-(01, 14): EQUAL(OP) '='
[10](01, 15)-(01, 16): NUMBER(NUMBER) '0'
[10](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 03): NAME(NAME) 'zin'
[11](01, 04)-(01, 05): EQUAL(OP) '='
[11](01, 06)-(01, 13): NAME(NAME) 'cleanup'
[11](01, 13)-(01, 14): LPAR(OP) '('
[11](01, 14)-(01, 17): NAME(NAME) 'zin'
[11](01, 17)-(01, 18): RPAR(OP) ')'
[11](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 03): NAME(NAME) 'for'
[12](01, 04)-(01, 10): NAME(NAME) 'letter'
[12](01, 11)-(01, 13): NAME(NAME) 'in'
[12](01, 14)-(01, 17): NAME(NAME) 'zin'
[12](01, 17)-(01, 18): COLON(OP) ':'
[12](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 04): INDENT(INDENT) '    '
[13](01, 04)-(01, 16): NAME(NAME) 'letterteller'
[13](01, 17)-(01, 19): PLUSEQUAL(OP) '+='
[13](01, 20)-(01, 21): NUMBER(NUMBER) '1'
[13](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 04): INDENT(INDENT) '    '
[14](01, 04)-(01, 16): NAME(NAME) 'stringteller'
[14](01, 17)-(01, 19): PLUSEQUAL(OP) '+='
[14](01, 20)-(01, 21): NUMBER(NUMBER) '1'
[14](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 04): INDENT(INDENT) '    '
[15](01, 04)-(01, 06): NAME(NAME) 'if'
[15](01, 07)-(01, 13): NAME(NAME) 'letter'
[15](01, 14)-(01, 16): EQEQUAL(OP) '=='
[15](01, 17)-(01, 20): STRING(STRING) '" "'
[15](01, 20)-(01, 21): COLON(OP) ':'
[15](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 08): INDENT(INDENT) '        '
[16](01, 08)-(01, 10): NAME(NAME) 'if'
[16](01, 11)-(01, 14): NAME(NAME) 'not'
[16](01, 14)-(01, 15): LPAR(OP) '('
[16](01, 15)-(01, 27): NAME(NAME) 'letterteller'
[16](01, 28)-(01, 29): MINUS(OP) '-'
[16](01, 30)-(01, 31): NUMBER(NUMBER) '1'
[16](01, 32)-(01, 34): EQEQUAL(OP) '=='
[16](01, 35)-(01, 36): NUMBER(NUMBER) '0'
[16](01, 36)-(01, 37): RPAR(OP) ')'
[16](01, 37)-(01, 38): COLON(OP) ':'
[16](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 12): INDENT(INDENT) '            '
[17](01, 12)-(01, 17): NAME(NAME) 'print'
[17](01, 17)-(01, 18): LPAR(OP) '('
[17](01, 18)-(01, 21): NAME(NAME) 'zin'
[17](01, 21)-(01, 22): LSQB(OP) '['
[17](01, 22)-(01, 34): NAME(NAME) 'stringteller'
[17](01, 35)-(01, 36): MINUS(OP) '-'
[17](01, 37)-(01, 49): NAME(NAME) 'letterteller'
[17](01, 49)-(01, 50): COLON(OP) ':'
[17](01, 50)-(01, 62): NAME(NAME) 'stringteller'
[17](01, 63)-(01, 64): MINUS(OP) '-'
[17](01, 65)-(01, 66): NUMBER(NUMBER) '1'
[17](01, 66)-(01, 67): RSQB(OP) ']'
[17](01, 67)-(01, 68): COMMA(OP) ','
[17](01, 69)-(01, 81): NAME(NAME) 'letterteller'
[17](01, 82)-(01, 83): MINUS(OP) '-'
[17](01, 84)-(01, 85): NUMBER(NUMBER) '1'
[17](01, 85)-(01, 86): RPAR(OP) ')'
[17](01, 86)-(01, 87): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 08): INDENT(INDENT) '        '
[18](01, 08)-(01, 20): NAME(NAME) 'letterteller'
[18](01, 21)-(01, 22): EQUAL(OP) '='
[18](01, 23)-(01, 24): NUMBER(NUMBER) '0'
[18](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 04): INDENT(INDENT) '    '
[19](01, 04)-(01, 06): NAME(NAME) 'if'
[19](01, 07)-(01, 19): NAME(NAME) 'stringteller'
[19](01, 20)-(01, 22): EQEQUAL(OP) '=='
[19](01, 23)-(01, 26): NAME(NAME) 'len'
[19](01, 26)-(01, 27): LPAR(OP) '('
[19](01, 27)-(01, 30): NAME(NAME) 'zin'
[19](01, 30)-(01, 31): RPAR(OP) ')'
[19](01, 31)-(01, 32): COLON(OP) ':'
[19](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): DEDENT(DEDENT)
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 08): INDENT(INDENT) '        '
[20](01, 08)-(01, 13): NAME(NAME) 'print'
[20](01, 13)-(01, 14): LPAR(OP) '('
[20](01, 14)-(01, 17): NAME(NAME) 'zin'
[20](01, 17)-(01, 18): LSQB(OP) '['
[20](01, 18)-(01, 30): NAME(NAME) 'stringteller'
[20](01, 31)-(01, 32): MINUS(OP) '-'
[20](01, 33)-(01, 45): NAME(NAME) 'letterteller'
[20](01, 45)-(01, 46): COLON(OP) ':'
[20](01, 46)-(01, 58): NAME(NAME) 'stringteller'
[20](01, 58)-(01, 59): RSQB(OP) ']'
[20](01, 59)-(01, 60): COMMA(OP) ','
[20](01, 61)-(01, 73): NAME(NAME) 'letterteller'
[20](01, 73)-(01, 74): RPAR(OP) ')'
[20](01, 74)-(01, 75): NEWLINE(NEWLINE) '\n'
[20](02, 00)-(02, 00): DEDENT(DEDENT)
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 08): INDENT(INDENT) '        '
[21](01, 08)-(01, 20): NAME(NAME) 'letterteller'
[21](01, 21)-(01, 22): EQUAL(OP) '='
[21](01, 23)-(01, 24): NUMBER(NUMBER) '0'
[21](01, 24)-(01, 25): NEWLINE(NEWLINE)
[21](02, 00)-(02, 00): DEDENT(DEDENT)
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

