[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 19): NAME(NAME) 'create_sequence'
[00](01, 19)-(01, 20): LPAR(OP) '('
[00](01, 20)-(01, 26): NAME(NAME) 'string'
[00](01, 26)-(01, 27): COMMA(OP) ','
[00](01, 28)-(01, 33): NAME(NAME) 'index'
[00](01, 33)-(01, 34): COMMA(OP) ','
[00](01, 35)-(01, 41): NAME(NAME) 'length'
[00](01, 41)-(01, 42): RPAR(OP) ')'
[00](01, 42)-(01, 43): COLON(OP) ':'
[00](01, 43)-(01, 44): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 12): NAME(NAME) 'sequence'
[01](01, 13)-(01, 14): EQUAL(OP) '='
[01](01, 15)-(01, 17): STRING(STRING) '""'
[01](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 05): NAME(NAME) 'k'
[02](01, 06)-(01, 07): EQUAL(OP) '='
[02](01, 08)-(01, 09): NUMBER(NUMBER) '1'
[02](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 09): NAME(NAME) 'while'
[03](01, 10)-(01, 11): NAME(NAME) 'k'
[03](01, 12)-(01, 14): LESSEQUAL(OP) '<='
[03](01, 15)-(01, 21): NAME(NAME) 'length'
[03](01, 21)-(01, 22): COLON(OP) ':'
[03](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 08): INDENT(INDENT) '        '
[04](01, 08)-(01, 10): NAME(NAME) 'if'
[04](01, 11)-(01, 16): NAME(NAME) 'index'
[04](01, 17)-(01, 19): GREATEREQUAL(OP) '>='
[04](01, 20)-(01, 23): NAME(NAME) 'len'
[04](01, 23)-(01, 24): LPAR(OP) '('
[04](01, 24)-(01, 30): NAME(NAME) 'string'
[04](01, 30)-(01, 31): RPAR(OP) ')'
[04](01, 32)-(01, 34): NAME(NAME) 'or'
[04](01, 35)-(01, 40): NAME(NAME) 'index'
[04](01, 41)-(01, 43): LESSEQUAL(OP) '<='
[04](01, 44)-(01, 45): MINUS(OP) '-'
[04](01, 45)-(01, 46): LPAR(OP) '('
[04](01, 46)-(01, 49): NAME(NAME) 'len'
[04](01, 49)-(01, 50): LPAR(OP) '('
[04](01, 50)-(01, 56): NAME(NAME) 'string'
[04](01, 56)-(01, 57): RPAR(OP) ')'
[04](01, 57)-(01, 58): RPAR(OP) ')'
[04](01, 58)-(01, 59): COLON(OP) ':'
[04](01, 59)-(01, 60): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 12): INDENT(INDENT) '            '
[05](01, 12)-(01, 17): NAME(NAME) 'index'
[05](01, 18)-(01, 19): EQUAL(OP) '='
[05](01, 20)-(01, 25): NAME(NAME) 'index'
[05](01, 26)-(01, 27): PERCENT(OP) '%'
[05](01, 28)-(01, 31): NAME(NAME) 'len'
[05](01, 31)-(01, 32): LPAR(OP) '('
[05](01, 32)-(01, 38): NAME(NAME) 'string'
[05](01, 38)-(01, 39): RPAR(OP) ')'
[05](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 08): INDENT(INDENT) '        '
[06](01, 08)-(01, 16): NAME(NAME) 'sequence'
[06](01, 17)-(01, 19): PLUSEQUAL(OP) '+='
[06](01, 20)-(01, 26): NAME(NAME) 'string'
[06](01, 26)-(01, 27): LSQB(OP) '['
[06](01, 27)-(01, 32): NAME(NAME) 'index'
[06](01, 32)-(01, 33): RSQB(OP) ']'
[06](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 08): INDENT(INDENT) '        '
[07](01, 08)-(01, 13): NAME(NAME) 'index'
[07](01, 14)-(01, 16): PLUSEQUAL(OP) '+='
[07](01, 17)-(01, 18): NUMBER(NUMBER) '1'
[07](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 08): INDENT(INDENT) '        '
[08](01, 08)-(01, 09): NAME(NAME) 'k'
[08](01, 10)-(01, 12): PLUSEQUAL(OP) '+='
[08](01, 12)-(01, 13): NUMBER(NUMBER) '1'
[08](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 10): NAME(NAME) 'return'
[09](01, 11)-(01, 19): NAME(NAME) 'sequence'
[09](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

