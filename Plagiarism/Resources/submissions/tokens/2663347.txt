[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 25): NAME(NAME) 'possible_combinations'
[00](01, 25)-(01, 26): LPAR(OP) '('
[00](01, 26)-(01, 29): NAME(NAME) 'dna'
[00](01, 29)-(01, 30): COMMA(OP) ','
[00](01, 31)-(01, 37): NAME(NAME) 'prefix'
[00](01, 37)-(01, 38): COMMA(OP) ','
[00](01, 39)-(01, 40): NAME(NAME) 'n'
[00](01, 40)-(01, 41): RPAR(OP) ')'
[00](01, 41)-(01, 42): COLON(OP) ':'
[00](01, 42)-(01, 43): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 07): NAME(NAME) 'for'
[01](01, 08)-(01, 12): NAME(NAME) 'char'
[01](01, 13)-(01, 15): NAME(NAME) 'in'
[01](01, 16)-(01, 19): NAME(NAME) 'dna'
[01](01, 19)-(01, 20): COLON(OP) ':'
[01](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 08): INDENT(INDENT) '        '
[02](01, 08)-(01, 10): NAME(NAME) 'if'
[02](01, 11)-(01, 14): NAME(NAME) 'len'
[02](01, 14)-(01, 15): LPAR(OP) '('
[02](01, 15)-(01, 21): NAME(NAME) 'prefix'
[02](01, 22)-(01, 23): PLUS(OP) '+'
[02](01, 24)-(01, 28): NAME(NAME) 'char'
[02](01, 28)-(01, 29): RPAR(OP) ')'
[02](01, 30)-(01, 32): EQEQUAL(OP) '=='
[02](01, 33)-(01, 34): NAME(NAME) 'n'
[02](01, 34)-(01, 35): COLON(OP) ':'
[02](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 12): INDENT(INDENT) '            '
[03](01, 12)-(01, 17): NAME(NAME) 'print'
[03](01, 17)-(01, 18): LPAR(OP) '('
[03](01, 18)-(01, 24): NAME(NAME) 'prefix'
[03](01, 25)-(01, 26): PLUS(OP) '+'
[03](01, 27)-(01, 31): NAME(NAME) 'char'
[03](01, 31)-(01, 32): RPAR(OP) ')'
[03](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 08): INDENT(INDENT) '        '
[04](01, 08)-(01, 12): NAME(NAME) 'else'
[04](01, 12)-(01, 13): COLON(OP) ':'
[04](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 12): INDENT(INDENT) '            '
[05](01, 12)-(01, 33): NAME(NAME) 'possible_combinations'
[05](01, 33)-(01, 34): LPAR(OP) '('
[05](01, 34)-(01, 37): NAME(NAME) 'dna'
[05](01, 37)-(01, 38): COMMA(OP) ','
[05](01, 39)-(01, 45): NAME(NAME) 'prefix'
[05](01, 46)-(01, 47): PLUS(OP) '+'
[05](01, 48)-(01, 52): NAME(NAME) 'char'
[05](01, 52)-(01, 53): COMMA(OP) ','
[05](01, 54)-(01, 55): NAME(NAME) 'n'
[05](01, 55)-(01, 56): RPAR(OP) ')'
[05](01, 56)-(01, 57): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 01): NL(NL) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 03): NAME(NAME) 'dna'
[07](01, 04)-(01, 05): EQUAL(OP) '='
[07](01, 06)-(01, 12): STRING(STRING) "'ACGT'"
[07](01, 12)-(01, 13): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 01): NAME(NAME) 'n'
[08](01, 02)-(01, 03): EQUAL(OP) '='
[08](01, 04)-(01, 07): NAME(NAME) 'int'
[08](01, 07)-(01, 08): LPAR(OP) '('
[08](01, 08)-(01, 13): NAME(NAME) 'input'
[08](01, 13)-(01, 14): LPAR(OP) '('
[08](01, 14)-(01, 18): STRING(STRING) "': '"
[08](01, 18)-(01, 19): RPAR(OP) ')'
[08](01, 19)-(01, 20): RPAR(OP) ')'
[08](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 21): NAME(NAME) 'possible_combinations'
[09](01, 21)-(01, 22): LPAR(OP) '('
[09](01, 22)-(01, 25): NAME(NAME) 'dna'
[09](01, 25)-(01, 26): COMMA(OP) ','
[09](01, 27)-(01, 29): STRING(STRING) '""'
[09](01, 29)-(01, 30): COMMA(OP) ','
[09](01, 31)-(01, 32): NAME(NAME) 'n'
[09](01, 32)-(01, 33): RPAR(OP) ')'
[09](01, 33)-(01, 34): NEWLINE(NEWLINE)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

