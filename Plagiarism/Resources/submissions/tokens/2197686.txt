[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 18): NAME(NAME) 'cleanup_spaces'
[00](01, 18)-(01, 19): LPAR(OP) '('
[00](01, 19)-(01, 25): NAME(NAME) 'string'
[00](01, 25)-(01, 26): RPAR(OP) ')'
[00](01, 26)-(01, 27): COLON(OP) ':'
[00](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 15): NAME(NAME) 'space_count'
[01](01, 16)-(01, 17): EQUAL(OP) '='
[01](01, 18)-(01, 19): NUMBER(NUMBER) '0'
[01](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 18): NAME(NAME) 'cleaned_string'
[02](01, 19)-(01, 20): EQUAL(OP) '='
[02](01, 21)-(01, 23): STRING(STRING) '""'
[02](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 09): NAME(NAME) 'index'
[03](01, 10)-(01, 11): EQUAL(OP) '='
[03](01, 12)-(01, 13): NUMBER(NUMBER) '0'
[03](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 07): NAME(NAME) 'for'
[04](01, 08)-(01, 12): NAME(NAME) 'char'
[04](01, 13)-(01, 15): NAME(NAME) 'in'
[04](01, 16)-(01, 22): NAME(NAME) 'string'
[04](01, 22)-(01, 23): COLON(OP) ':'
[04](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 08): INDENT(INDENT) '        '
[05](01, 08)-(01, 10): NAME(NAME) 'if'
[05](01, 11)-(01, 15): NAME(NAME) 'char'
[05](01, 16)-(01, 18): EQEQUAL(OP) '=='
[05](01, 19)-(01, 22): STRING(STRING) '" "'
[05](01, 22)-(01, 23): COLON(OP) ':'
[05](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 12): INDENT(INDENT) '            '
[06](01, 12)-(01, 23): NAME(NAME) 'space_count'
[06](01, 24)-(01, 26): PLUSEQUAL(OP) '+='
[06](01, 27)-(01, 28): NUMBER(NUMBER) '1'
[06](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 08): INDENT(INDENT) '        '
[07](01, 08)-(01, 12): NAME(NAME) 'else'
[07](01, 12)-(01, 13): COLON(OP) ':'
[07](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 12): INDENT(INDENT) '            '
[08](01, 12)-(01, 14): NAME(NAME) 'if'
[08](01, 15)-(01, 26): NAME(NAME) 'space_count'
[08](01, 27)-(01, 28): GREATER(OP) '>'
[08](01, 29)-(01, 30): NUMBER(NUMBER) '1'
[08](01, 30)-(01, 31): COLON(OP) ':'
[08](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 16): INDENT(INDENT) '                '
[09](01, 16)-(01, 30): NAME(NAME) 'cleaned_string'
[09](01, 31)-(01, 33): PLUSEQUAL(OP) '+='
[09](01, 34)-(01, 40): NAME(NAME) 'string'
[09](01, 40)-(01, 41): LSQB(OP) '['
[09](01, 41)-(01, 46): NAME(NAME) 'index'
[09](01, 46)-(01, 47): MINUS(OP) '-'
[09](01, 47)-(01, 48): NUMBER(NUMBER) '1'
[09](01, 48)-(01, 49): COLON(OP) ':'
[09](01, 50)-(01, 55): NAME(NAME) 'index'
[09](01, 55)-(01, 56): PLUS(OP) '+'
[09](01, 56)-(01, 57): NUMBER(NUMBER) '1'
[09](01, 57)-(01, 58): RSQB(OP) ']'
[09](01, 58)-(01, 59): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 12): INDENT(INDENT) '            '
[10](01, 12)-(01, 16): NAME(NAME) 'elif'
[10](01, 17)-(01, 28): NAME(NAME) 'space_count'
[10](01, 29)-(01, 31): EQEQUAL(OP) '=='
[10](01, 32)-(01, 33): NUMBER(NUMBER) '1'
[10](01, 33)-(01, 34): COLON(OP) ':'
[10](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 16): INDENT(INDENT) '                '
[11](01, 16)-(01, 30): NAME(NAME) 'cleaned_string'
[11](01, 31)-(01, 33): PLUSEQUAL(OP) '+='
[11](01, 34)-(01, 37): STRING(STRING) '" "'
[11](01, 38)-(01, 39): PLUS(OP) '+'
[11](01, 40)-(01, 46): NAME(NAME) 'string'
[11](01, 46)-(01, 47): LSQB(OP) '['
[11](01, 47)-(01, 52): NAME(NAME) 'index'
[11](01, 52)-(01, 53): RSQB(OP) ']'
[11](01, 53)-(01, 54): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 12): INDENT(INDENT) '            '
[12](01, 12)-(01, 16): NAME(NAME) 'else'
[12](01, 16)-(01, 17): COLON(OP) ':'
[12](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 16): INDENT(INDENT) '                '
[13](01, 16)-(01, 30): NAME(NAME) 'cleaned_string'
[13](01, 31)-(01, 33): PLUSEQUAL(OP) '+='
[13](01, 34)-(01, 40): NAME(NAME) 'string'
[13](01, 40)-(01, 41): LSQB(OP) '['
[13](01, 41)-(01, 46): NAME(NAME) 'index'
[13](01, 46)-(01, 47): RSQB(OP) ']'
[13](01, 47)-(01, 48): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 12): INDENT(INDENT) '            '
[14](01, 12)-(01, 23): NAME(NAME) 'space_count'
[14](01, 24)-(01, 25): EQUAL(OP) '='
[14](01, 26)-(01, 27): NUMBER(NUMBER) '0'
[14](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 08): INDENT(INDENT) '        '
[15](01, 08)-(01, 13): NAME(NAME) 'index'
[15](01, 14)-(01, 16): PLUSEQUAL(OP) '+='
[15](01, 17)-(01, 18): NUMBER(NUMBER) '1'
[15](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 01): NL(NL) '\n'
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 04): INDENT(INDENT) '    '
[17](01, 04)-(01, 06): NAME(NAME) 'if'
[17](01, 07)-(01, 21): NAME(NAME) 'cleaned_string'
[17](01, 21)-(01, 22): LSQB(OP) '['
[17](01, 22)-(01, 23): NUMBER(NUMBER) '0'
[17](01, 23)-(01, 24): RSQB(OP) ']'
[17](01, 25)-(01, 27): EQEQUAL(OP) '=='
[17](01, 28)-(01, 31): STRING(STRING) '" "'
[17](01, 31)-(01, 32): COLON(OP) ':'
[17](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 08): INDENT(INDENT) '        '
[18](01, 08)-(01, 22): NAME(NAME) 'cleaned_string'
[18](01, 23)-(01, 24): EQUAL(OP) '='
[18](01, 25)-(01, 39): NAME(NAME) 'cleaned_string'
[18](01, 39)-(01, 40): LSQB(OP) '['
[18](01, 40)-(01, 41): NUMBER(NUMBER) '1'
[18](01, 41)-(01, 42): COLON(OP) ':'
[18](01, 42)-(01, 43): RSQB(OP) ']'
[18](01, 43)-(01, 44): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 08)-(01, 09): NL(NL) '\n'
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 04): INDENT(INDENT) '    '
[20](01, 04)-(01, 10): NAME(NAME) 'return'
[20](01, 11)-(01, 25): NAME(NAME) 'cleaned_string'
[20](01, 25)-(01, 26): NEWLINE(NEWLINE)
[20](02, 00)-(02, 00): DEDENT(DEDENT)
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

