[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'dia'
[00](01, 03)-(01, 04): EQUAL(OP) '='
[00](01, 04)-(01, 07): NAME(NAME) 'int'
[00](01, 07)-(01, 08): LPAR(OP) '('
[00](01, 08)-(01, 13): NAME(NAME) 'input'
[00](01, 13)-(01, 14): LPAR(OP) '('
[00](01, 14)-(01, 21): STRING(STRING) '"dia: "'
[00](01, 21)-(01, 22): RPAR(OP) ')'
[00](01, 22)-(01, 23): RPAR(OP) ')'
[00](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 03): NAME(NAME) 'mes'
[01](01, 03)-(01, 04): EQUAL(OP) '='
[01](01, 04)-(01, 07): NAME(NAME) 'int'
[01](01, 07)-(01, 08): LPAR(OP) '('
[01](01, 08)-(01, 13): NAME(NAME) 'input'
[01](01, 13)-(01, 14): LPAR(OP) '('
[01](01, 14)-(01, 21): STRING(STRING) '"mes: "'
[01](01, 21)-(01, 22): RPAR(OP) ')'
[01](01, 22)-(01, 23): RPAR(OP) ')'
[01](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): NAME(NAME) 'anho'
[02](01, 04)-(01, 05): EQUAL(OP) '='
[02](01, 06)-(01, 09): NAME(NAME) 'int'
[02](01, 09)-(01, 10): LPAR(OP) '('
[02](01, 10)-(01, 15): NAME(NAME) 'input'
[02](01, 15)-(01, 16): LPAR(OP) '('
[02](01, 16)-(01, 24): STRING(STRING) '"anho: "'
[02](01, 24)-(01, 25): RPAR(OP) ')'
[02](01, 25)-(01, 26): RPAR(OP) ')'
[02](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 01): NL(NL) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 06): NAME(NAME) 'hoydia'
[04](01, 06)-(01, 07): EQUAL(OP) '='
[04](01, 07)-(01, 10): NAME(NAME) 'int'
[04](01, 10)-(01, 11): LPAR(OP) '('
[04](01, 11)-(01, 16): NAME(NAME) 'input'
[04](01, 16)-(01, 17): LPAR(OP) '('
[04](01, 17)-(01, 28): STRING(STRING) '"hoy dia: "'
[04](01, 28)-(01, 29): RPAR(OP) ')'
[04](01, 29)-(01, 30): RPAR(OP) ')'
[04](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 06): NAME(NAME) 'meshoy'
[05](01, 06)-(01, 07): EQUAL(OP) '='
[05](01, 07)-(01, 10): NAME(NAME) 'int'
[05](01, 10)-(01, 11): LPAR(OP) '('
[05](01, 11)-(01, 16): NAME(NAME) 'input'
[05](01, 16)-(01, 17): LPAR(OP) '('
[05](01, 17)-(01, 28): STRING(STRING) '"mes dia: "'
[05](01, 28)-(01, 29): RPAR(OP) ')'
[05](01, 29)-(01, 30): RPAR(OP) ')'
[05](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 07): NAME(NAME) 'anhohoy'
[06](01, 07)-(01, 08): EQUAL(OP) '='
[06](01, 08)-(01, 11): NAME(NAME) 'int'
[06](01, 11)-(01, 12): LPAR(OP) '('
[06](01, 12)-(01, 17): NAME(NAME) 'input'
[06](01, 17)-(01, 18): LPAR(OP) '('
[06](01, 18)-(01, 30): STRING(STRING) '"anho dia: "'
[06](01, 30)-(01, 31): RPAR(OP) ')'
[06](01, 31)-(01, 32): RPAR(OP) ')'
[06](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 01): NL(NL) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 01): NL(NL) '\n'
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): NAME(NAME) 'edad'
[09](01, 05)-(01, 06): EQUAL(OP) '='
[09](01, 07)-(01, 14): NAME(NAME) 'anhohoy'
[09](01, 15)-(01, 16): MINUS(OP) '-'
[09](01, 17)-(01, 21): NAME(NAME) 'anho'
[09](01, 22)-(01, 23): MINUS(OP) '-'
[09](01, 24)-(01, 25): NUMBER(NUMBER) '1'
[09](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 01): NL(NL) '\n'
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 02): NAME(NAME) 'if'
[11](01, 03)-(01, 04): LPAR(OP) '('
[11](01, 04)-(01, 10): NAME(NAME) 'meshoy'
[11](01, 11)-(01, 12): GREATER(OP) '>'
[11](01, 13)-(01, 16): NAME(NAME) 'mes'
[11](01, 16)-(01, 17): RPAR(OP) ')'
[11](01, 17)-(01, 18): COLON(OP) ':'
[11](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 04): INDENT(INDENT) '    '
[12](01, 04)-(01, 08): NAME(NAME) 'edad'
[12](01, 09)-(01, 10): EQUAL(OP) '='
[12](01, 11)-(01, 15): NAME(NAME) 'edad'
[12](01, 16)-(01, 17): PLUS(OP) '+'
[12](01, 18)-(01, 19): NUMBER(NUMBER) '1'
[12](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 04): NAME(NAME) 'elif'
[13](01, 05)-(01, 06): LPAR(OP) '('
[13](01, 06)-(01, 12): NAME(NAME) 'meshoy'
[13](01, 12)-(01, 14): EQEQUAL(OP) '=='
[13](01, 15)-(01, 18): NAME(NAME) 'mes'
[13](01, 19)-(01, 22): NAME(NAME) 'and'
[13](01, 23)-(01, 29): NAME(NAME) 'hoydia'
[13](01, 30)-(01, 32): GREATEREQUAL(OP) '>='
[13](01, 33)-(01, 36): NAME(NAME) 'dia'
[13](01, 36)-(01, 37): RPAR(OP) ')'
[13](01, 37)-(01, 38): COLON(OP) ':'
[13](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 04): INDENT(INDENT) '    '
[14](01, 04)-(01, 08): NAME(NAME) 'edad'
[14](01, 09)-(01, 10): EQUAL(OP) '='
[14](01, 11)-(01, 15): NAME(NAME) 'edad'
[14](01, 16)-(01, 17): PLUS(OP) '+'
[14](01, 18)-(01, 19): NUMBER(NUMBER) '1'
[14](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 01): NL(NL) '\n'
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 05): NAME(NAME) 'print'
[16](01, 05)-(01, 06): LPAR(OP) '('
[16](01, 06)-(01, 10): NAME(NAME) 'edad'
[16](01, 10)-(01, 11): RPAR(OP) ')'
[16](01, 11)-(01, 12): NEWLINE(NEWLINE)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

