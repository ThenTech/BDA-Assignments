[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 11): NAME(NAME) 'replace'
[00](01, 11)-(01, 12): LPAR(OP) '('
[00](01, 12)-(01, 19): NAME(NAME) 'pattern'
[00](01, 19)-(01, 20): COMMA(OP) ','
[00](01, 21)-(01, 32): NAME(NAME) 'replacement'
[00](01, 32)-(01, 33): COMMA(OP) ','
[00](01, 34)-(01, 40): NAME(NAME) 'corpus'
[00](01, 40)-(01, 41): RPAR(OP) ')'
[00](01, 41)-(01, 42): COLON(OP) ':'
[00](01, 42)-(01, 43): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 10): NAME(NAME) 'teller'
[01](01, 11)-(01, 12): EQUAL(OP) '='
[01](01, 13)-(01, 14): NUMBER(NUMBER) '0'
[01](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 11): NAME(NAME) 'teller2'
[02](01, 12)-(01, 13): EQUAL(OP) '='
[02](01, 14)-(01, 15): NUMBER(NUMBER) '0'
[02](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 07): NAME(NAME) 'for'
[03](01, 08)-(01, 09): NAME(NAME) 'i'
[03](01, 10)-(01, 12): NAME(NAME) 'in'
[03](01, 13)-(01, 19): NAME(NAME) 'corpus'
[03](01, 19)-(01, 20): COLON(OP) ':'
[03](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 08): INDENT(INDENT) '        '
[04](01, 08)-(01, 10): NAME(NAME) 'if'
[04](01, 11)-(01, 12): NAME(NAME) 'i'
[04](01, 13)-(01, 15): EQEQUAL(OP) '=='
[04](01, 16)-(01, 23): NAME(NAME) 'pattern'
[04](01, 23)-(01, 24): LSQB(OP) '['
[04](01, 24)-(01, 25): NUMBER(NUMBER) '0'
[04](01, 25)-(01, 26): RSQB(OP) ']'
[04](01, 26)-(01, 27): COLON(OP) ':'
[04](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 12): INDENT(INDENT) '            '
[05](01, 12)-(01, 14): NAME(NAME) 'if'
[05](01, 15)-(01, 21): NAME(NAME) 'corpus'
[05](01, 21)-(01, 22): LSQB(OP) '['
[05](01, 22)-(01, 28): NAME(NAME) 'teller'
[05](01, 28)-(01, 29): PLUS(OP) '+'
[05](01, 29)-(01, 30): NUMBER(NUMBER) '1'
[05](01, 30)-(01, 31): RSQB(OP) ']'
[05](01, 32)-(01, 34): EQEQUAL(OP) '=='
[05](01, 35)-(01, 42): NAME(NAME) 'pattern'
[05](01, 42)-(01, 43): LSQB(OP) '['
[05](01, 43)-(01, 44): NUMBER(NUMBER) '1'
[05](01, 44)-(01, 45): RSQB(OP) ']'
[05](01, 45)-(01, 46): COLON(OP) ':'
[05](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 16): INDENT(INDENT) '                '
[06](01, 16)-(01, 22): NAME(NAME) 'nieuwe'
[06](01, 23)-(01, 24): EQUAL(OP) '='
[06](01, 25)-(01, 31): NAME(NAME) 'corpus'
[06](01, 31)-(01, 32): LSQB(OP) '['
[06](01, 32)-(01, 33): COLON(OP) ':'
[06](01, 33)-(01, 39): NAME(NAME) 'teller'
[06](01, 39)-(01, 40): RSQB(OP) ']'
[06](01, 41)-(01, 42): PLUS(OP) '+'
[06](01, 43)-(01, 54): NAME(NAME) 'replacement'
[06](01, 55)-(01, 56): PLUS(OP) '+'
[06](01, 57)-(01, 63): NAME(NAME) 'corpus'
[06](01, 63)-(01, 64): LSQB(OP) '['
[06](01, 64)-(01, 70): NAME(NAME) 'teller'
[06](01, 70)-(01, 71): PLUS(OP) '+'
[06](01, 71)-(01, 74): NAME(NAME) 'len'
[06](01, 74)-(01, 75): LPAR(OP) '('
[06](01, 75)-(01, 82): NAME(NAME) 'pattern'
[06](01, 82)-(01, 83): RPAR(OP) ')'
[06](01, 83)-(01, 84): COLON(OP) ':'
[06](01, 84)-(01, 85): RSQB(OP) ']'
[06](01, 85)-(01, 86): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 16): INDENT(INDENT) '                '
[07](01, 16)-(01, 19): NAME(NAME) 'for'
[07](01, 20)-(01, 21): NAME(NAME) 'j'
[07](01, 22)-(01, 24): NAME(NAME) 'in'
[07](01, 25)-(01, 31): NAME(NAME) 'corpus'
[07](01, 31)-(01, 32): LSQB(OP) '['
[07](01, 32)-(01, 38): NAME(NAME) 'teller'
[07](01, 38)-(01, 39): PLUS(OP) '+'
[07](01, 39)-(01, 42): NAME(NAME) 'len'
[07](01, 42)-(01, 43): LPAR(OP) '('
[07](01, 43)-(01, 50): NAME(NAME) 'pattern'
[07](01, 50)-(01, 51): RPAR(OP) ')'
[07](01, 51)-(01, 52): COLON(OP) ':'
[07](01, 52)-(01, 53): RSQB(OP) ']'
[07](01, 53)-(01, 54): COLON(OP) ':'
[07](01, 54)-(01, 55): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 20): INDENT(INDENT) '                    '
[08](01, 20)-(01, 22): NAME(NAME) 'if'
[08](01, 23)-(01, 24): NAME(NAME) 'j'
[08](01, 25)-(01, 27): EQEQUAL(OP) '=='
[08](01, 28)-(01, 35): NAME(NAME) 'pattern'
[08](01, 35)-(01, 36): LSQB(OP) '['
[08](01, 36)-(01, 37): NUMBER(NUMBER) '0'
[08](01, 37)-(01, 38): RSQB(OP) ']'
[08](01, 38)-(01, 39): COLON(OP) ':'
[08](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 24): INDENT(INDENT) '                        '
[09](01, 24)-(01, 26): NAME(NAME) 'if'
[09](01, 27)-(01, 33): NAME(NAME) 'corpus'
[09](01, 33)-(01, 34): LSQB(OP) '['
[09](01, 34)-(01, 41): NAME(NAME) 'teller2'
[09](01, 42)-(01, 43): PLUS(OP) '+'
[09](01, 44)-(01, 45): NUMBER(NUMBER) '1'
[09](01, 45)-(01, 46): RSQB(OP) ']'
[09](01, 47)-(01, 49): EQEQUAL(OP) '=='
[09](01, 50)-(01, 57): NAME(NAME) 'pattern'
[09](01, 57)-(01, 58): LSQB(OP) '['
[09](01, 58)-(01, 59): NUMBER(NUMBER) '1'
[09](01, 59)-(01, 60): RSQB(OP) ']'
[09](01, 60)-(01, 61): COLON(OP) ':'
[09](01, 61)-(01, 62): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 28): INDENT(INDENT) '                            '
[10](01, 28)-(01, 34): NAME(NAME) 'nieuwe'
[10](01, 35)-(01, 36): EQUAL(OP) '='
[10](01, 37)-(01, 43): NAME(NAME) 'corpus'
[10](01, 43)-(01, 44): LSQB(OP) '['
[10](01, 44)-(01, 45): COLON(OP) ':'
[10](01, 45)-(01, 51): NAME(NAME) 'teller'
[10](01, 51)-(01, 52): RSQB(OP) ']'
[10](01, 53)-(01, 54): PLUS(OP) '+'
[10](01, 55)-(01, 66): NAME(NAME) 'replacement'
[10](01, 67)-(01, 68): PLUS(OP) '+'
[10](01, 69)-(01, 75): NAME(NAME) 'corpus'
[10](01, 75)-(01, 76): LSQB(OP) '['
[10](01, 76)-(01, 82): NAME(NAME) 'teller'
[10](01, 83)-(01, 84): PLUS(OP) '+'
[10](01, 85)-(01, 88): NAME(NAME) 'len'
[10](01, 88)-(01, 89): LPAR(OP) '('
[10](01, 89)-(01, 96): NAME(NAME) 'pattern'
[10](01, 96)-(01, 97): RPAR(OP) ')'
[10](01, 97)-(01, 98): COLON(OP) ':'
[10](01, 99)-(01, 106): NAME(NAME) 'teller2'
[10](01, 106)-(01, 107): RSQB(OP) ']'
[10](01, 108)-(01, 109): PLUS(OP) '+'
[10](01, 110)-(01, 121): NAME(NAME) 'replacement'
[10](01, 122)-(01, 123): PLUS(OP) '+'
[10](01, 124)-(01, 130): NAME(NAME) 'corpus'
[10](01, 130)-(01, 131): LSQB(OP) '['
[10](01, 131)-(01, 138): NAME(NAME) 'teller2'
[10](01, 139)-(01, 140): PLUS(OP) '+'
[10](01, 141)-(01, 144): NAME(NAME) 'len'
[10](01, 144)-(01, 145): LPAR(OP) '('
[10](01, 145)-(01, 152): NAME(NAME) 'pattern'
[10](01, 152)-(01, 153): RPAR(OP) ')'
[10](01, 153)-(01, 154): RSQB(OP) ']'
[10](01, 154)-(01, 155): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 20): INDENT(INDENT) '                    '
[11](01, 20)-(01, 24): NAME(NAME) 'else'
[11](01, 24)-(01, 25): COLON(OP) ':'
[11](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 24): INDENT(INDENT) '                        '
[12](01, 24)-(01, 31): NAME(NAME) 'teller2'
[12](01, 32)-(01, 34): PLUSEQUAL(OP) '+='
[12](01, 35)-(01, 36): NUMBER(NUMBER) '1'
[12](01, 36)-(01, 37): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 08): INDENT(INDENT) '        '
[13](01, 08)-(01, 12): NAME(NAME) 'else'
[13](01, 12)-(01, 13): COLON(OP) ':'
[13](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 12): INDENT(INDENT) '            '
[14](01, 12)-(01, 18): NAME(NAME) 'teller'
[14](01, 19)-(01, 21): PLUSEQUAL(OP) '+='
[14](01, 22)-(01, 23): NUMBER(NUMBER) '1'
[14](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 04): INDENT(INDENT) '    '
[15](01, 04)-(01, 06): NAME(NAME) 'if'
[15](01, 07)-(01, 13): NAME(NAME) 'teller'
[15](01, 14)-(01, 16): EQEQUAL(OP) '=='
[15](01, 17)-(01, 20): NAME(NAME) 'len'
[15](01, 20)-(01, 21): LPAR(OP) '('
[15](01, 21)-(01, 27): NAME(NAME) 'corpus'
[15](01, 27)-(01, 28): RPAR(OP) ')'
[15](01, 28)-(01, 29): COLON(OP) ':'
[15](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 08): INDENT(INDENT) '        '
[16](01, 08)-(01, 14): NAME(NAME) 'return'
[16](01, 15)-(01, 21): NAME(NAME) 'corpus'
[16](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 04): INDENT(INDENT) '    '
[17](01, 04)-(01, 08): NAME(NAME) 'else'
[17](01, 08)-(01, 09): COLON(OP) ':'
[17](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 08): INDENT(INDENT) '        '
[18](01, 08)-(01, 14): NAME(NAME) 'return'
[18](01, 15)-(01, 21): NAME(NAME) 'nieuwe'
[18](01, 21)-(01, 22): NEWLINE(NEWLINE)
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

