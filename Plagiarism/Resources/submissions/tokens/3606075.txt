[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 26): NAME(NAME) 'is_palindrome_sentence'
[00](01, 26)-(01, 27): LPAR(OP) '('
[00](01, 27)-(01, 35): NAME(NAME) 'sentence'
[00](01, 35)-(01, 36): RPAR(OP) ')'
[00](01, 36)-(01, 37): COLON(OP) ':'
[00](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 18): NAME(NAME) 'alphabetstring'
[01](01, 19)-(01, 20): EQUAL(OP) '='
[01](01, 21)-(01, 49): STRING(STRING) '"abcdefghijklmnopqrstuvwxyz"'
[01](01, 49)-(01, 50): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 14): NAME(NAME) 'letterlist'
[02](01, 15)-(01, 16): EQUAL(OP) '='
[02](01, 17)-(01, 18): LSQB(OP) '['
[02](01, 18)-(01, 19): RSQB(OP) ']'
[02](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 16): NAME(NAME) 'isPalindrome'
[03](01, 17)-(01, 18): EQUAL(OP) '='
[03](01, 19)-(01, 24): NAME(NAME) 'False'
[03](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 04)-(01, 05): NL(NL) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 07): NAME(NAME) 'for'
[05](01, 08)-(01, 09): NAME(NAME) 'i'
[05](01, 10)-(01, 12): NAME(NAME) 'in'
[05](01, 13)-(01, 21): NAME(NAME) 'sentence'
[05](01, 21)-(01, 22): COLON(OP) ':'
[05](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 08): INDENT(INDENT) '        '
[06](01, 08)-(01, 10): NAME(NAME) 'if'
[06](01, 11)-(01, 12): NAME(NAME) 'i'
[06](01, 13)-(01, 15): NAME(NAME) 'in'
[06](01, 16)-(01, 30): NAME(NAME) 'alphabetstring'
[06](01, 30)-(01, 31): COLON(OP) ':'
[06](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 12): INDENT(INDENT) '            '
[07](01, 12)-(01, 22): NAME(NAME) 'letterlist'
[07](01, 22)-(01, 23): DOT(OP) '.'
[07](01, 23)-(01, 29): NAME(NAME) 'append'
[07](01, 29)-(01, 30): LPAR(OP) '('
[07](01, 30)-(01, 31): NAME(NAME) 'i'
[07](01, 31)-(01, 32): RPAR(OP) ')'
[07](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 04): INDENT(INDENT) '    '
[08](01, 04)-(01, 08): NAME(NAME) 'word'
[08](01, 09)-(01, 10): EQUAL(OP) '='
[08](01, 11)-(01, 13): STRING(STRING) '""'
[08](01, 13)-(01, 14): DOT(OP) '.'
[08](01, 14)-(01, 18): NAME(NAME) 'join'
[08](01, 18)-(01, 19): LPAR(OP) '('
[08](01, 19)-(01, 29): NAME(NAME) 'letterlist'
[08](01, 29)-(01, 30): RPAR(OP) ')'
[08](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 04)-(01, 05): NL(NL) '\n'
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 04): INDENT(INDENT) '    '
[10](01, 04)-(01, 07): NAME(NAME) 'for'
[10](01, 08)-(01, 09): NAME(NAME) 'i'
[10](01, 10)-(01, 12): NAME(NAME) 'in'
[10](01, 13)-(01, 18): NAME(NAME) 'range'
[10](01, 18)-(01, 19): LPAR(OP) '('
[10](01, 19)-(01, 20): NUMBER(NUMBER) '0'
[10](01, 20)-(01, 21): COMMA(OP) ','
[10](01, 22)-(01, 25): NAME(NAME) 'len'
[10](01, 25)-(01, 26): LPAR(OP) '('
[10](01, 26)-(01, 30): NAME(NAME) 'word'
[10](01, 30)-(01, 31): RPAR(OP) ')'
[10](01, 32)-(01, 34): DOUBLESLASH(OP) '//'
[10](01, 35)-(01, 36): NUMBER(NUMBER) '2'
[10](01, 36)-(01, 37): RPAR(OP) ')'
[10](01, 37)-(01, 38): COLON(OP) ':'
[10](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 08): INDENT(INDENT) '        '
[11](01, 08)-(01, 10): NAME(NAME) 'if'
[11](01, 11)-(01, 15): NAME(NAME) 'word'
[11](01, 15)-(01, 16): LSQB(OP) '['
[11](01, 16)-(01, 17): NAME(NAME) 'i'
[11](01, 17)-(01, 18): RSQB(OP) ']'
[11](01, 19)-(01, 21): NOTEQUAL(OP) '!='
[11](01, 22)-(01, 26): NAME(NAME) 'word'
[11](01, 26)-(01, 27): LSQB(OP) '['
[11](01, 27)-(01, 30): NAME(NAME) 'len'
[11](01, 30)-(01, 31): LPAR(OP) '('
[11](01, 31)-(01, 35): NAME(NAME) 'word'
[11](01, 35)-(01, 36): RPAR(OP) ')'
[11](01, 37)-(01, 38): MINUS(OP) '-'
[11](01, 39)-(01, 40): NUMBER(NUMBER) '1'
[11](01, 41)-(01, 42): MINUS(OP) '-'
[11](01, 43)-(01, 44): NAME(NAME) 'i'
[11](01, 44)-(01, 45): RSQB(OP) ']'
[11](01, 45)-(01, 46): COLON(OP) ':'
[11](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 12): INDENT(INDENT) '            '
[12](01, 12)-(01, 17): NAME(NAME) 'break'
[12](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 08): INDENT(INDENT) '        '
[13](01, 08)-(01, 12): NAME(NAME) 'elif'
[13](01, 13)-(01, 14): NAME(NAME) 'i'
[13](01, 15)-(01, 17): EQEQUAL(OP) '=='
[13](01, 18)-(01, 19): LPAR(OP) '('
[13](01, 19)-(01, 22): NAME(NAME) 'len'
[13](01, 22)-(01, 23): LPAR(OP) '('
[13](01, 23)-(01, 27): NAME(NAME) 'word'
[13](01, 27)-(01, 28): RPAR(OP) ')'
[13](01, 29)-(01, 31): DOUBLESLASH(OP) '//'
[13](01, 32)-(01, 33): NUMBER(NUMBER) '2'
[13](01, 33)-(01, 34): RPAR(OP) ')'
[13](01, 35)-(01, 36): MINUS(OP) '-'
[13](01, 37)-(01, 38): NUMBER(NUMBER) '1'
[13](01, 39)-(01, 42): NAME(NAME) 'and'
[13](01, 43)-(01, 47): NAME(NAME) 'word'
[13](01, 47)-(01, 48): LSQB(OP) '['
[13](01, 48)-(01, 49): NAME(NAME) 'i'
[13](01, 49)-(01, 50): RSQB(OP) ']'
[13](01, 51)-(01, 53): EQEQUAL(OP) '=='
[13](01, 54)-(01, 58): NAME(NAME) 'word'
[13](01, 58)-(01, 59): LSQB(OP) '['
[13](01, 59)-(01, 62): NAME(NAME) 'len'
[13](01, 62)-(01, 63): LPAR(OP) '('
[13](01, 63)-(01, 67): NAME(NAME) 'word'
[13](01, 67)-(01, 68): RPAR(OP) ')'
[13](01, 69)-(01, 70): MINUS(OP) '-'
[13](01, 71)-(01, 72): NUMBER(NUMBER) '1'
[13](01, 73)-(01, 74): MINUS(OP) '-'
[13](01, 75)-(01, 76): NAME(NAME) 'i'
[13](01, 76)-(01, 77): RSQB(OP) ']'
[13](01, 77)-(01, 78): COLON(OP) ':'
[13](01, 78)-(01, 79): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 12): INDENT(INDENT) '            '
[14](01, 12)-(01, 24): NAME(NAME) 'isPalindrome'
[14](01, 25)-(01, 26): EQUAL(OP) '='
[14](01, 27)-(01, 31): NAME(NAME) 'True'
[14](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 04): INDENT(INDENT) '    '
[15](01, 04)-(01, 10): NAME(NAME) 'return'
[15](01, 11)-(01, 23): NAME(NAME) 'isPalindrome'
[15](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 04): INDENT(INDENT) '    '
[16](01, 04)-(01, 08): NAME(NAME) 'pass'
[16](01, 08)-(01, 09): NEWLINE(NEWLINE)
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

