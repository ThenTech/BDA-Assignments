[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 07): NAME(NAME) 'alfabet'
[00](01, 07)-(01, 08): EQUAL(OP) '='
[00](01, 08)-(01, 62): STRING(STRING) '"AZERTYUIOPQSDFGHJKLMWXCVBNazertyuiopqsdfghjklmwxcvbn"'
[00](01, 62)-(01, 63): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 01): NL(NL) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 03): NAME(NAME) 'def'
[02](01, 04)-(01, 18): NAME(NAME) 'herken_woorden'
[02](01, 18)-(01, 19): LPAR(OP) '('
[02](01, 19)-(01, 25): NAME(NAME) 'string'
[02](01, 25)-(01, 26): RPAR(OP) ')'
[02](01, 26)-(01, 27): COLON(OP) ':'
[02](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 20): NAME(NAME) 'string_aangepast'
[03](01, 21)-(01, 22): EQUAL(OP) '='
[03](01, 23)-(01, 25): STRING(STRING) '""'
[03](01, 32)-(01, 58): COMMENT(COMMENT) '#filtert string van tekens'
[03](01, 58)-(01, 59): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 07): NAME(NAME) 'for'
[04](01, 08)-(01, 10): NAME(NAME) 'el'
[04](01, 11)-(01, 13): NAME(NAME) 'in'
[04](01, 14)-(01, 20): NAME(NAME) 'string'
[04](01, 20)-(01, 21): COLON(OP) ':'
[04](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 08): INDENT(INDENT) '        '
[05](01, 08)-(01, 10): NAME(NAME) 'if'
[05](01, 11)-(01, 13): NAME(NAME) 'el'
[05](01, 14)-(01, 16): NAME(NAME) 'in'
[05](01, 17)-(01, 24): NAME(NAME) 'alfabet'
[05](01, 24)-(01, 25): COLON(OP) ':'
[05](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 12): INDENT(INDENT) '            '
[06](01, 12)-(01, 28): NAME(NAME) 'string_aangepast'
[06](01, 29)-(01, 30): EQUAL(OP) '='
[06](01, 31)-(01, 47): NAME(NAME) 'string_aangepast'
[06](01, 48)-(01, 49): PLUS(OP) '+'
[06](01, 50)-(01, 52): NAME(NAME) 'el'
[06](01, 52)-(01, 53): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 08): INDENT(INDENT) '        '
[07](01, 08)-(01, 12): NAME(NAME) 'else'
[07](01, 12)-(01, 13): COLON(OP) ':'
[07](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 12): INDENT(INDENT) '            '
[08](01, 12)-(01, 28): NAME(NAME) 'string_aangepast'
[08](01, 29)-(01, 30): EQUAL(OP) '='
[08](01, 31)-(01, 47): NAME(NAME) 'string_aangepast'
[08](01, 48)-(01, 49): PLUS(OP) '+'
[08](01, 50)-(01, 53): STRING(STRING) '" "'
[08](01, 64)-(01, 113): COMMENT(COMMENT) '# zet teveel spaties als die teveel moet filteren'
[08](01, 113)-(01, 114): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 01): NL(NL) '\n'
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 04): INDENT(INDENT) '    '
[10](01, 04)-(01, 16): NAME(NAME) 'string_print'
[10](01, 17)-(01, 18): EQUAL(OP) '='
[10](01, 19)-(01, 21): STRING(STRING) '""'
[10](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 04): INDENT(INDENT) '    '
[11](01, 04)-(01, 20): NAME(NAME) 'string_aangepast'
[11](01, 21)-(01, 22): EQUAL(OP) '='
[11](01, 23)-(01, 39): NAME(NAME) 'string_aangepast'
[11](01, 40)-(01, 41): PLUS(OP) '+'
[11](01, 42)-(01, 45): STRING(STRING) '" "'
[11](01, 64)-(01, 104): COMMENT(COMMENT) '# zo wordt ook het laatste woord geprint'
[11](01, 104)-(01, 105): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 04): INDENT(INDENT) '    '
[12](01, 04)-(01, 07): NAME(NAME) 'for'
[12](01, 08)-(01, 10): NAME(NAME) 'el'
[12](01, 11)-(01, 13): NAME(NAME) 'in'
[12](01, 14)-(01, 30): NAME(NAME) 'string_aangepast'
[12](01, 30)-(01, 31): COLON(OP) ':'
[12](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 08): INDENT(INDENT) '        '
[13](01, 08)-(01, 10): NAME(NAME) 'if'
[13](01, 11)-(01, 14): NAME(NAME) 'not'
[13](01, 15)-(01, 17): NAME(NAME) 'el'
[13](01, 18)-(01, 20): EQEQUAL(OP) '=='
[13](01, 21)-(01, 24): STRING(STRING) '" "'
[13](01, 24)-(01, 25): COLON(OP) ':'
[13](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 12): INDENT(INDENT) '            '
[14](01, 12)-(01, 24): NAME(NAME) 'string_print'
[14](01, 25)-(01, 26): EQUAL(OP) '='
[14](01, 27)-(01, 39): NAME(NAME) 'string_print'
[14](01, 40)-(01, 41): PLUS(OP) '+'
[14](01, 42)-(01, 44): NAME(NAME) 'el'
[14](01, 44)-(01, 45): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 08): INDENT(INDENT) '        '
[15](01, 08)-(01, 12): NAME(NAME) 'elif'
[15](01, 13)-(01, 16): NAME(NAME) 'len'
[15](01, 16)-(01, 17): LPAR(OP) '('
[15](01, 17)-(01, 29): NAME(NAME) 'string_print'
[15](01, 29)-(01, 30): RPAR(OP) ')'
[15](01, 31)-(01, 33): EQEQUAL(OP) '=='
[15](01, 34)-(01, 35): NUMBER(NUMBER) '0'
[15](01, 35)-(01, 36): COLON(OP) ':'
[15](01, 36)-(01, 37): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 12): INDENT(INDENT) '            '
[16](01, 12)-(01, 20): NAME(NAME) 'continue'
[16](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 08): INDENT(INDENT) '        '
[17](01, 08)-(01, 12): NAME(NAME) 'else'
[17](01, 12)-(01, 13): COLON(OP) ':'
[17](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 12): INDENT(INDENT) '            '
[18](01, 12)-(01, 17): NAME(NAME) 'print'
[18](01, 17)-(01, 18): LPAR(OP) '('
[18](01, 18)-(01, 30): NAME(NAME) 'string_print'
[18](01, 30)-(01, 31): COMMA(OP) ','
[18](01, 32)-(01, 35): NAME(NAME) 'len'
[18](01, 35)-(01, 36): LPAR(OP) '('
[18](01, 36)-(01, 48): NAME(NAME) 'string_print'
[18](01, 48)-(01, 49): RPAR(OP) ')'
[18](01, 49)-(01, 50): RPAR(OP) ')'
[18](01, 50)-(01, 51): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 12): INDENT(INDENT) '            '
[19](01, 12)-(01, 24): NAME(NAME) 'string_print'
[19](01, 25)-(01, 26): EQUAL(OP) '='
[19](01, 27)-(01, 29): STRING(STRING) '""'
[19](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): DEDENT(DEDENT)
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 01): NL(NL) '\n'
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 14): NAME(NAME) 'herken_woorden'
[21](01, 14)-(01, 15): LPAR(OP) '('
[21](01, 15)-(01, 20): NAME(NAME) 'input'
[21](01, 20)-(01, 21): LPAR(OP) '('
[21](01, 21)-(01, 22): RPAR(OP) ')'
[21](01, 22)-(01, 23): RPAR(OP) ')'
[21](01, 23)-(01, 24): NEWLINE(NEWLINE)
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

