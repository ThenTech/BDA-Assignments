[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 10): NAME(NAME) 'encode'
[00](01, 10)-(01, 11): LPAR(OP) '('
[00](01, 11)-(01, 17): NAME(NAME) 'string'
[00](01, 17)-(01, 18): RPAR(OP) ')'
[00](01, 18)-(01, 19): COLON(OP) ':'
[00](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 14): NAME(NAME) 'count_mine'
[01](01, 15)-(01, 16): EQUAL(OP) '='
[01](01, 17)-(01, 18): NUMBER(NUMBER) '0'
[01](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 15): NAME(NAME) 'mine_string'
[02](01, 16)-(01, 17): EQUAL(OP) '='
[02](01, 18)-(01, 20): STRING(STRING) '""'
[02](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 06): NAME(NAME) 'if'
[03](01, 07)-(01, 10): NAME(NAME) 'len'
[03](01, 10)-(01, 11): LPAR(OP) '('
[03](01, 11)-(01, 17): NAME(NAME) 'string'
[03](01, 17)-(01, 18): RPAR(OP) ')'
[03](01, 19)-(01, 21): EQEQUAL(OP) '=='
[03](01, 22)-(01, 23): NUMBER(NUMBER) '1'
[03](01, 23)-(01, 24): COLON(OP) ':'
[03](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 08): INDENT(INDENT) '        '
[04](01, 08)-(01, 19): NAME(NAME) 'mine_string'
[04](01, 20)-(01, 21): EQUAL(OP) '='
[04](01, 22)-(01, 25): STRING(STRING) '"0"'
[04](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 08): INDENT(INDENT) '        '
[05](01, 08)-(01, 14): NAME(NAME) 'return'
[05](01, 15)-(01, 26): NAME(NAME) 'mine_string'
[05](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 01): NL(NL) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 04): INDENT(INDENT) '    '
[07](01, 04)-(01, 07): NAME(NAME) 'for'
[07](01, 08)-(01, 09): NAME(NAME) 'i'
[07](01, 10)-(01, 12): NAME(NAME) 'in'
[07](01, 13)-(01, 18): NAME(NAME) 'range'
[07](01, 18)-(01, 19): LPAR(OP) '('
[07](01, 19)-(01, 20): NUMBER(NUMBER) '0'
[07](01, 20)-(01, 21): COMMA(OP) ','
[07](01, 22)-(01, 25): NAME(NAME) 'len'
[07](01, 25)-(01, 26): LPAR(OP) '('
[07](01, 26)-(01, 32): NAME(NAME) 'string'
[07](01, 32)-(01, 33): RPAR(OP) ')'
[07](01, 33)-(01, 34): RPAR(OP) ')'
[07](01, 34)-(01, 35): COLON(OP) ':'
[07](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 08): INDENT(INDENT) '        '
[08](01, 08)-(01, 10): NAME(NAME) 'if'
[08](01, 11)-(01, 12): NAME(NAME) 'i'
[08](01, 13)-(01, 15): EQEQUAL(OP) '=='
[08](01, 16)-(01, 17): NUMBER(NUMBER) '0'
[08](01, 17)-(01, 18): COLON(OP) ':'
[08](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 12): INDENT(INDENT) '            '
[09](01, 12)-(01, 14): NAME(NAME) 'if'
[09](01, 15)-(01, 21): NAME(NAME) 'string'
[09](01, 21)-(01, 22): LSQB(OP) '['
[09](01, 22)-(01, 23): NAME(NAME) 'i'
[09](01, 23)-(01, 24): PLUS(OP) '+'
[09](01, 24)-(01, 25): NUMBER(NUMBER) '1'
[09](01, 25)-(01, 26): RSQB(OP) ']'
[09](01, 27)-(01, 29): EQEQUAL(OP) '=='
[09](01, 30)-(01, 33): STRING(STRING) '"X"'
[09](01, 33)-(01, 34): COLON(OP) ':'
[09](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 16): INDENT(INDENT) '                '
[10](01, 16)-(01, 26): NAME(NAME) 'count_mine'
[10](01, 27)-(01, 29): PLUSEQUAL(OP) '+='
[10](01, 30)-(01, 31): NUMBER(NUMBER) '1'
[10](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 08): INDENT(INDENT) '        '
[11](01, 08)-(01, 12): NAME(NAME) 'elif'
[11](01, 13)-(01, 14): NAME(NAME) 'i'
[11](01, 15)-(01, 17): EQEQUAL(OP) '=='
[11](01, 18)-(01, 21): NAME(NAME) 'len'
[11](01, 21)-(01, 22): LPAR(OP) '('
[11](01, 22)-(01, 28): NAME(NAME) 'string'
[11](01, 28)-(01, 29): RPAR(OP) ')'
[11](01, 29)-(01, 30): MINUS(OP) '-'
[11](01, 30)-(01, 31): NUMBER(NUMBER) '1'
[11](01, 31)-(01, 32): COLON(OP) ':'
[11](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 12): INDENT(INDENT) '            '
[12](01, 12)-(01, 14): NAME(NAME) 'if'
[12](01, 15)-(01, 21): NAME(NAME) 'string'
[12](01, 21)-(01, 22): LSQB(OP) '['
[12](01, 22)-(01, 23): NAME(NAME) 'i'
[12](01, 23)-(01, 24): MINUS(OP) '-'
[12](01, 24)-(01, 25): NUMBER(NUMBER) '1'
[12](01, 25)-(01, 26): RSQB(OP) ']'
[12](01, 27)-(01, 29): EQEQUAL(OP) '=='
[12](01, 30)-(01, 33): STRING(STRING) '"X"'
[12](01, 33)-(01, 34): COLON(OP) ':'
[12](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 16): INDENT(INDENT) '                '
[13](01, 16)-(01, 26): NAME(NAME) 'count_mine'
[13](01, 27)-(01, 29): PLUSEQUAL(OP) '+='
[13](01, 30)-(01, 31): NUMBER(NUMBER) '1'
[13](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 08): INDENT(INDENT) '        '
[14](01, 08)-(01, 12): NAME(NAME) 'else'
[14](01, 12)-(01, 13): COLON(OP) ':'
[14](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 12): INDENT(INDENT) '            '
[15](01, 12)-(01, 14): NAME(NAME) 'if'
[15](01, 15)-(01, 21): NAME(NAME) 'string'
[15](01, 21)-(01, 22): LSQB(OP) '['
[15](01, 22)-(01, 23): NAME(NAME) 'i'
[15](01, 23)-(01, 24): PLUS(OP) '+'
[15](01, 24)-(01, 25): NUMBER(NUMBER) '1'
[15](01, 25)-(01, 26): RSQB(OP) ']'
[15](01, 27)-(01, 29): EQEQUAL(OP) '=='
[15](01, 30)-(01, 33): STRING(STRING) '"X"'
[15](01, 33)-(01, 34): COLON(OP) ':'
[15](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 16): INDENT(INDENT) '                '
[16](01, 16)-(01, 26): NAME(NAME) 'count_mine'
[16](01, 27)-(01, 29): PLUSEQUAL(OP) '+='
[16](01, 30)-(01, 31): NUMBER(NUMBER) '1'
[16](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 12): INDENT(INDENT) '            '
[17](01, 12)-(01, 14): NAME(NAME) 'if'
[17](01, 15)-(01, 21): NAME(NAME) 'string'
[17](01, 21)-(01, 22): LSQB(OP) '['
[17](01, 22)-(01, 23): NAME(NAME) 'i'
[17](01, 23)-(01, 24): MINUS(OP) '-'
[17](01, 24)-(01, 25): NUMBER(NUMBER) '1'
[17](01, 25)-(01, 26): RSQB(OP) ']'
[17](01, 27)-(01, 29): EQEQUAL(OP) '=='
[17](01, 30)-(01, 33): STRING(STRING) '"X"'
[17](01, 33)-(01, 34): COLON(OP) ':'
[17](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 16): INDENT(INDENT) '                '
[18](01, 16)-(01, 26): NAME(NAME) 'count_mine'
[18](01, 27)-(01, 29): PLUSEQUAL(OP) '+='
[18](01, 30)-(01, 31): NUMBER(NUMBER) '1'
[18](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 08): INDENT(INDENT) '        '
[19](01, 08)-(01, 19): NAME(NAME) 'mine_string'
[19](01, 20)-(01, 22): PLUSEQUAL(OP) '+='
[19](01, 23)-(01, 26): NAME(NAME) 'str'
[19](01, 26)-(01, 27): LPAR(OP) '('
[19](01, 27)-(01, 37): NAME(NAME) 'count_mine'
[19](01, 37)-(01, 38): RPAR(OP) ')'
[19](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): DEDENT(DEDENT)
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 08): INDENT(INDENT) '        '
[20](01, 08)-(01, 18): NAME(NAME) 'count_mine'
[20](01, 19)-(01, 20): EQUAL(OP) '='
[20](01, 21)-(01, 22): NUMBER(NUMBER) '0'
[20](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[20](02, 00)-(02, 00): DEDENT(DEDENT)
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 01): NL(NL) '\n'
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 04): INDENT(INDENT) '    '
[22](01, 04)-(01, 10): NAME(NAME) 'return'
[22](01, 11)-(01, 22): NAME(NAME) 'mine_string'
[22](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[22](02, 00)-(02, 00): DEDENT(DEDENT)
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[23](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[23](01, 00)-(01, 01): NL(NL) '\n'
[23](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[24](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[24](01, 00)-(01, 03): NAME(NAME) 'def'
[24](01, 04)-(01, 10): NAME(NAME) 'decode'
[24](01, 10)-(01, 11): LPAR(OP) '('
[24](01, 11)-(01, 17): NAME(NAME) 'string'
[24](01, 17)-(01, 18): RPAR(OP) ')'
[24](01, 18)-(01, 19): COLON(OP) ':'
[24](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[24](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[25](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[25](01, 00)-(01, 04): INDENT(INDENT) '    '
[25](01, 04)-(01, 16): NAME(NAME) 'mine_string1'
[25](01, 17)-(01, 18): EQUAL(OP) '='
[25](01, 19)-(01, 21): STRING(STRING) '""'
[25](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[25](02, 00)-(02, 00): DEDENT(DEDENT)
[25](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[26](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[26](01, 00)-(01, 04): INDENT(INDENT) '    '
[26](01, 04)-(01, 16): NAME(NAME) 'mine_string2'
[26](01, 17)-(01, 18): EQUAL(OP) '='
[26](01, 19)-(01, 21): STRING(STRING) '""'
[26](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[26](02, 00)-(02, 00): DEDENT(DEDENT)
[26](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[27](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[27](01, 00)-(01, 01): NL(NL) '\n'
[27](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[28](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[28](01, 00)-(01, 04): INDENT(INDENT) '    '
[28](01, 04)-(01, 07): NAME(NAME) 'for'
[28](01, 08)-(01, 09): NAME(NAME) 'i'
[28](01, 10)-(01, 12): NAME(NAME) 'in'
[28](01, 13)-(01, 18): NAME(NAME) 'range'
[28](01, 18)-(01, 19): LPAR(OP) '('
[28](01, 19)-(01, 20): NUMBER(NUMBER) '0'
[28](01, 20)-(01, 21): COMMA(OP) ','
[28](01, 22)-(01, 25): NAME(NAME) 'len'
[28](01, 25)-(01, 26): LPAR(OP) '('
[28](01, 26)-(01, 32): NAME(NAME) 'string'
[28](01, 32)-(01, 33): RPAR(OP) ')'
[28](01, 33)-(01, 34): RPAR(OP) ')'
[28](01, 34)-(01, 35): COLON(OP) ':'
[28](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[28](02, 00)-(02, 00): DEDENT(DEDENT)
[28](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[29](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[29](01, 00)-(01, 08): INDENT(INDENT) '        '
[29](01, 08)-(01, 10): NAME(NAME) 'if'
[29](01, 11)-(01, 12): NAME(NAME) 'i'
[29](01, 13)-(01, 15): EQEQUAL(OP) '=='
[29](01, 16)-(01, 17): NUMBER(NUMBER) '0'
[29](01, 17)-(01, 18): COLON(OP) ':'
[29](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[29](02, 00)-(02, 00): DEDENT(DEDENT)
[29](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[30](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[30](01, 00)-(01, 12): INDENT(INDENT) '            '
[30](01, 12)-(01, 24): NAME(NAME) 'mine_string1'
[30](01, 25)-(01, 27): PLUSEQUAL(OP) '+='
[30](01, 28)-(01, 31): STRING(STRING) '" "'
[30](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[30](02, 00)-(02, 00): DEDENT(DEDENT)
[30](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[31](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[31](01, 00)-(01, 08): INDENT(INDENT) '        '
[31](01, 08)-(01, 12): NAME(NAME) 'elif'
[31](01, 13)-(01, 14): NAME(NAME) 'i'
[31](01, 15)-(01, 17): GREATEREQUAL(OP) '>='
[31](01, 18)-(01, 19): NUMBER(NUMBER) '2'
[31](01, 19)-(01, 20): COLON(OP) ':'
[31](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[31](02, 00)-(02, 00): DEDENT(DEDENT)
[31](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[32](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[32](01, 00)-(01, 12): INDENT(INDENT) '            '
[32](01, 12)-(01, 14): NAME(NAME) 'if'
[32](01, 15)-(01, 21): NAME(NAME) 'string'
[32](01, 21)-(01, 22): LSQB(OP) '['
[32](01, 22)-(01, 23): NAME(NAME) 'i'
[32](01, 23)-(01, 24): MINUS(OP) '-'
[32](01, 24)-(01, 25): NUMBER(NUMBER) '1'
[32](01, 25)-(01, 26): RSQB(OP) ']'
[32](01, 27)-(01, 29): EQEQUAL(OP) '=='
[32](01, 30)-(01, 33): STRING(STRING) '"1"'
[32](01, 33)-(01, 34): COLON(OP) ':'
[32](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[32](02, 00)-(02, 00): DEDENT(DEDENT)
[32](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[33](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[33](01, 00)-(01, 16): INDENT(INDENT) '                '
[33](01, 16)-(01, 18): NAME(NAME) 'if'
[33](01, 19)-(01, 31): NAME(NAME) 'mine_string1'
[33](01, 31)-(01, 32): LSQB(OP) '['
[33](01, 32)-(01, 33): NAME(NAME) 'i'
[33](01, 33)-(01, 34): MINUS(OP) '-'
[33](01, 34)-(01, 35): NUMBER(NUMBER) '2'
[33](01, 35)-(01, 36): RSQB(OP) ']'
[33](01, 37)-(01, 39): EQEQUAL(OP) '=='
[33](01, 40)-(01, 43): STRING(STRING) '" "'
[33](01, 43)-(01, 44): COLON(OP) ':'
[33](01, 44)-(01, 45): NEWLINE(NEWLINE) '\n'
[33](02, 00)-(02, 00): DEDENT(DEDENT)
[33](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[34](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[34](01, 00)-(01, 20): INDENT(INDENT) '                    '
[34](01, 20)-(01, 32): NAME(NAME) 'mine_string1'
[34](01, 33)-(01, 35): PLUSEQUAL(OP) '+='
[34](01, 36)-(01, 39): STRING(STRING) '"X"'
[34](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[34](02, 00)-(02, 00): DEDENT(DEDENT)
[34](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[35](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[35](01, 00)-(01, 16): INDENT(INDENT) '                '
[35](01, 16)-(01, 20): NAME(NAME) 'else'
[35](01, 20)-(01, 21): COLON(OP) ':'
[35](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[35](02, 00)-(02, 00): DEDENT(DEDENT)
[35](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[36](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[36](01, 00)-(01, 20): INDENT(INDENT) '                    '
[36](01, 20)-(01, 32): NAME(NAME) 'mine_string1'
[36](01, 33)-(01, 35): PLUSEQUAL(OP) '+='
[36](01, 36)-(01, 39): STRING(STRING) '" "'
[36](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[36](02, 00)-(02, 00): DEDENT(DEDENT)
[36](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[37](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[37](01, 00)-(01, 12): INDENT(INDENT) '            '
[37](01, 12)-(01, 14): NAME(NAME) 'if'
[37](01, 15)-(01, 21): NAME(NAME) 'string'
[37](01, 21)-(01, 22): LSQB(OP) '['
[37](01, 22)-(01, 23): NAME(NAME) 'i'
[37](01, 23)-(01, 24): MINUS(OP) '-'
[37](01, 24)-(01, 25): NUMBER(NUMBER) '1'
[37](01, 25)-(01, 26): RSQB(OP) ']'
[37](01, 27)-(01, 29): EQEQUAL(OP) '=='
[37](01, 30)-(01, 33): STRING(STRING) '"2"'
[37](01, 33)-(01, 34): COLON(OP) ':'
[37](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[37](02, 00)-(02, 00): DEDENT(DEDENT)
[37](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[38](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[38](01, 00)-(01, 16): INDENT(INDENT) '                '
[38](01, 16)-(01, 28): NAME(NAME) 'mine_string1'
[38](01, 29)-(01, 31): PLUSEQUAL(OP) '+='
[38](01, 32)-(01, 35): STRING(STRING) '"X"'
[38](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[38](02, 00)-(02, 00): DEDENT(DEDENT)
[38](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[39](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[39](01, 00)-(01, 12): INDENT(INDENT) '            '
[39](01, 12)-(01, 14): NAME(NAME) 'if'
[39](01, 15)-(01, 21): NAME(NAME) 'string'
[39](01, 21)-(01, 22): LSQB(OP) '['
[39](01, 22)-(01, 23): NAME(NAME) 'i'
[39](01, 23)-(01, 24): MINUS(OP) '-'
[39](01, 24)-(01, 25): NUMBER(NUMBER) '1'
[39](01, 25)-(01, 26): RSQB(OP) ']'
[39](01, 27)-(01, 29): EQEQUAL(OP) '=='
[39](01, 30)-(01, 33): STRING(STRING) '"0"'
[39](01, 33)-(01, 34): COLON(OP) ':'
[39](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[39](02, 00)-(02, 00): DEDENT(DEDENT)
[39](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[40](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[40](01, 00)-(01, 16): INDENT(INDENT) '                '
[40](01, 16)-(01, 28): NAME(NAME) 'mine_string1'
[40](01, 29)-(01, 31): PLUSEQUAL(OP) '+='
[40](01, 32)-(01, 35): STRING(STRING) '" "'
[40](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[40](02, 00)-(02, 00): DEDENT(DEDENT)
[40](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[41](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[41](01, 00)-(01, 08): INDENT(INDENT) '        '
[41](01, 08)-(01, 12): NAME(NAME) 'else'
[41](01, 12)-(01, 13): COLON(OP) ':'
[41](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[41](02, 00)-(02, 00): DEDENT(DEDENT)
[41](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[42](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[42](01, 00)-(01, 12): INDENT(INDENT) '            '
[42](01, 12)-(01, 14): NAME(NAME) 'if'
[42](01, 15)-(01, 21): NAME(NAME) 'string'
[42](01, 21)-(01, 22): LSQB(OP) '['
[42](01, 22)-(01, 23): NAME(NAME) 'i'
[42](01, 23)-(01, 24): MINUS(OP) '-'
[42](01, 24)-(01, 25): NUMBER(NUMBER) '1'
[42](01, 25)-(01, 26): RSQB(OP) ']'
[42](01, 27)-(01, 29): EQEQUAL(OP) '=='
[42](01, 30)-(01, 33): STRING(STRING) '"1"'
[42](01, 33)-(01, 34): COLON(OP) ':'
[42](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[42](02, 00)-(02, 00): DEDENT(DEDENT)
[42](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[43](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[43](01, 00)-(01, 16): INDENT(INDENT) '                '
[43](01, 16)-(01, 28): NAME(NAME) 'mine_string1'
[43](01, 29)-(01, 31): PLUSEQUAL(OP) '+='
[43](01, 32)-(01, 35): STRING(STRING) '"X"'
[43](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[43](02, 00)-(02, 00): DEDENT(DEDENT)
[43](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[44](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[44](01, 00)-(01, 12): INDENT(INDENT) '            '
[44](01, 12)-(01, 16): NAME(NAME) 'else'
[44](01, 16)-(01, 17): COLON(OP) ':'
[44](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[44](02, 00)-(02, 00): DEDENT(DEDENT)
[44](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[45](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[45](01, 00)-(01, 16): INDENT(INDENT) '                '
[45](01, 16)-(01, 28): NAME(NAME) 'mine_string1'
[45](01, 29)-(01, 31): PLUSEQUAL(OP) '+='
[45](01, 32)-(01, 35): STRING(STRING) '" "'
[45](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[45](02, 00)-(02, 00): DEDENT(DEDENT)
[45](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[46](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[46](01, 00)-(01, 01): NL(NL) '\n'
[46](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[47](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[47](01, 00)-(01, 04): INDENT(INDENT) '    '
[47](01, 04)-(01, 07): NAME(NAME) 'for'
[47](01, 08)-(01, 09): NAME(NAME) 'i'
[47](01, 10)-(01, 12): NAME(NAME) 'in'
[47](01, 13)-(01, 18): NAME(NAME) 'range'
[47](01, 18)-(01, 19): LPAR(OP) '('
[47](01, 19)-(01, 20): NUMBER(NUMBER) '0'
[47](01, 20)-(01, 21): COMMA(OP) ','
[47](01, 22)-(01, 25): NAME(NAME) 'len'
[47](01, 25)-(01, 26): LPAR(OP) '('
[47](01, 26)-(01, 32): NAME(NAME) 'string'
[47](01, 32)-(01, 33): RPAR(OP) ')'
[47](01, 33)-(01, 34): RPAR(OP) ')'
[47](01, 34)-(01, 35): COLON(OP) ':'
[47](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[47](02, 00)-(02, 00): DEDENT(DEDENT)
[47](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[48](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[48](01, 00)-(01, 08): INDENT(INDENT) '        '
[48](01, 08)-(01, 10): NAME(NAME) 'if'
[48](01, 11)-(01, 12): NAME(NAME) 'i'
[48](01, 13)-(01, 15): EQEQUAL(OP) '=='
[48](01, 16)-(01, 17): NUMBER(NUMBER) '0'
[48](01, 17)-(01, 18): COLON(OP) ':'
[48](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[48](02, 00)-(02, 00): DEDENT(DEDENT)
[48](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[49](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[49](01, 00)-(01, 12): INDENT(INDENT) '            '
[49](01, 12)-(01, 24): NAME(NAME) 'mine_string2'
[49](01, 25)-(01, 27): PLUSEQUAL(OP) '+='
[49](01, 28)-(01, 31): STRING(STRING) '"X"'
[49](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[49](02, 00)-(02, 00): DEDENT(DEDENT)
[49](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[50](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[50](01, 00)-(01, 08): INDENT(INDENT) '        '
[50](01, 08)-(01, 12): NAME(NAME) 'elif'
[50](01, 13)-(01, 14): NAME(NAME) 'i'
[50](01, 15)-(01, 17): GREATEREQUAL(OP) '>='
[50](01, 18)-(01, 19): NUMBER(NUMBER) '2'
[50](01, 19)-(01, 20): COLON(OP) ':'
[50](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[50](02, 00)-(02, 00): DEDENT(DEDENT)
[50](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[51](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[51](01, 00)-(01, 12): INDENT(INDENT) '            '
[51](01, 12)-(01, 14): NAME(NAME) 'if'
[51](01, 15)-(01, 21): NAME(NAME) 'string'
[51](01, 21)-(01, 22): LSQB(OP) '['
[51](01, 22)-(01, 23): NAME(NAME) 'i'
[51](01, 23)-(01, 24): MINUS(OP) '-'
[51](01, 24)-(01, 25): NUMBER(NUMBER) '1'
[51](01, 25)-(01, 26): RSQB(OP) ']'
[51](01, 27)-(01, 29): EQEQUAL(OP) '=='
[51](01, 30)-(01, 33): STRING(STRING) '"1"'
[51](01, 33)-(01, 34): COLON(OP) ':'
[51](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[51](02, 00)-(02, 00): DEDENT(DEDENT)
[51](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[52](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[52](01, 00)-(01, 16): INDENT(INDENT) '                '
[52](01, 16)-(01, 18): NAME(NAME) 'if'
[52](01, 19)-(01, 31): NAME(NAME) 'mine_string2'
[52](01, 31)-(01, 32): LSQB(OP) '['
[52](01, 32)-(01, 33): NAME(NAME) 'i'
[52](01, 33)-(01, 34): MINUS(OP) '-'
[52](01, 34)-(01, 35): NUMBER(NUMBER) '2'
[52](01, 35)-(01, 36): RSQB(OP) ']'
[52](01, 37)-(01, 39): EQEQUAL(OP) '=='
[52](01, 40)-(01, 43): STRING(STRING) '" "'
[52](01, 43)-(01, 44): COLON(OP) ':'
[52](01, 44)-(01, 45): NEWLINE(NEWLINE) '\n'
[52](02, 00)-(02, 00): DEDENT(DEDENT)
[52](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[53](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[53](01, 00)-(01, 20): INDENT(INDENT) '                    '
[53](01, 20)-(01, 32): NAME(NAME) 'mine_string2'
[53](01, 33)-(01, 35): PLUSEQUAL(OP) '+='
[53](01, 36)-(01, 39): STRING(STRING) '"X"'
[53](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[53](02, 00)-(02, 00): DEDENT(DEDENT)
[53](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[54](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[54](01, 00)-(01, 16): INDENT(INDENT) '                '
[54](01, 16)-(01, 20): NAME(NAME) 'else'
[54](01, 20)-(01, 21): COLON(OP) ':'
[54](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[54](02, 00)-(02, 00): DEDENT(DEDENT)
[54](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[55](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[55](01, 00)-(01, 20): INDENT(INDENT) '                    '
[55](01, 20)-(01, 32): NAME(NAME) 'mine_string2'
[55](01, 33)-(01, 35): PLUSEQUAL(OP) '+='
[55](01, 36)-(01, 39): STRING(STRING) '" "'
[55](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[55](02, 00)-(02, 00): DEDENT(DEDENT)
[55](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[56](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[56](01, 00)-(01, 12): INDENT(INDENT) '            '
[56](01, 12)-(01, 14): NAME(NAME) 'if'
[56](01, 15)-(01, 21): NAME(NAME) 'string'
[56](01, 21)-(01, 22): LSQB(OP) '['
[56](01, 22)-(01, 23): NAME(NAME) 'i'
[56](01, 23)-(01, 24): MINUS(OP) '-'
[56](01, 24)-(01, 25): NUMBER(NUMBER) '1'
[56](01, 25)-(01, 26): RSQB(OP) ']'
[56](01, 27)-(01, 29): EQEQUAL(OP) '=='
[56](01, 30)-(01, 33): STRING(STRING) '"2"'
[56](01, 33)-(01, 34): COLON(OP) ':'
[56](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[56](02, 00)-(02, 00): DEDENT(DEDENT)
[56](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[57](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[57](01, 00)-(01, 16): INDENT(INDENT) '                '
[57](01, 16)-(01, 28): NAME(NAME) 'mine_string2'
[57](01, 29)-(01, 31): PLUSEQUAL(OP) '+='
[57](01, 32)-(01, 35): STRING(STRING) '"X"'
[57](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[57](02, 00)-(02, 00): DEDENT(DEDENT)
[57](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[58](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[58](01, 00)-(01, 12): INDENT(INDENT) '            '
[58](01, 12)-(01, 14): NAME(NAME) 'if'
[58](01, 15)-(01, 21): NAME(NAME) 'string'
[58](01, 21)-(01, 22): LSQB(OP) '['
[58](01, 22)-(01, 23): NAME(NAME) 'i'
[58](01, 23)-(01, 24): MINUS(OP) '-'
[58](01, 24)-(01, 25): NUMBER(NUMBER) '1'
[58](01, 25)-(01, 26): RSQB(OP) ']'
[58](01, 27)-(01, 29): EQEQUAL(OP) '=='
[58](01, 30)-(01, 33): STRING(STRING) '"0"'
[58](01, 33)-(01, 34): COLON(OP) ':'
[58](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[58](02, 00)-(02, 00): DEDENT(DEDENT)
[58](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[59](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[59](01, 00)-(01, 16): INDENT(INDENT) '                '
[59](01, 16)-(01, 28): NAME(NAME) 'mine_string2'
[59](01, 29)-(01, 31): PLUSEQUAL(OP) '+='
[59](01, 32)-(01, 35): STRING(STRING) '" "'
[59](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[59](02, 00)-(02, 00): DEDENT(DEDENT)
[59](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[60](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[60](01, 00)-(01, 08): INDENT(INDENT) '        '
[60](01, 08)-(01, 12): NAME(NAME) 'else'
[60](01, 12)-(01, 13): COLON(OP) ':'
[60](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[60](02, 00)-(02, 00): DEDENT(DEDENT)
[60](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[61](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[61](01, 00)-(01, 12): INDENT(INDENT) '            '
[61](01, 12)-(01, 14): NAME(NAME) 'if'
[61](01, 15)-(01, 21): NAME(NAME) 'string'
[61](01, 21)-(01, 22): LSQB(OP) '['
[61](01, 22)-(01, 23): NAME(NAME) 'i'
[61](01, 23)-(01, 24): MINUS(OP) '-'
[61](01, 24)-(01, 25): NUMBER(NUMBER) '1'
[61](01, 25)-(01, 26): RSQB(OP) ']'
[61](01, 27)-(01, 29): EQEQUAL(OP) '=='
[61](01, 30)-(01, 33): STRING(STRING) '"1"'
[61](01, 33)-(01, 34): COLON(OP) ':'
[61](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[61](02, 00)-(02, 00): DEDENT(DEDENT)
[61](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[62](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[62](01, 00)-(01, 16): INDENT(INDENT) '                '
[62](01, 16)-(01, 28): NAME(NAME) 'mine_string2'
[62](01, 29)-(01, 31): PLUSEQUAL(OP) '+='
[62](01, 32)-(01, 35): STRING(STRING) '"X"'
[62](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[62](02, 00)-(02, 00): DEDENT(DEDENT)
[62](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[63](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[63](01, 00)-(01, 12): INDENT(INDENT) '            '
[63](01, 12)-(01, 16): NAME(NAME) 'else'
[63](01, 16)-(01, 17): COLON(OP) ':'
[63](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[63](02, 00)-(02, 00): DEDENT(DEDENT)
[63](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[64](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[64](01, 00)-(01, 16): INDENT(INDENT) '                '
[64](01, 16)-(01, 28): NAME(NAME) 'mine_string2'
[64](01, 29)-(01, 31): PLUSEQUAL(OP) '+='
[64](01, 32)-(01, 35): STRING(STRING) '" "'
[64](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[64](02, 00)-(02, 00): DEDENT(DEDENT)
[64](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[65](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[65](01, 00)-(01, 01): NL(NL) '\n'
[65](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[66](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[66](01, 04)-(01, 32): COMMENT(COMMENT) '#print(encode(mine_string1))'
[66](01, 32)-(01, 33): NL(NL) '\n'
[66](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[67](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[67](01, 04)-(01, 32): COMMENT(COMMENT) '#print(encode(mine_string2))'
[67](01, 32)-(01, 33): NL(NL) '\n'
[67](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[68](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[68](01, 00)-(01, 01): NL(NL) '\n'
[68](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[69](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[69](01, 00)-(01, 04): INDENT(INDENT) '    '
[69](01, 04)-(01, 06): NAME(NAME) 'if'
[69](01, 07)-(01, 13): NAME(NAME) 'encode'
[69](01, 13)-(01, 14): LPAR(OP) '('
[69](01, 14)-(01, 26): NAME(NAME) 'mine_string1'
[69](01, 26)-(01, 27): RPAR(OP) ')'
[69](01, 28)-(01, 30): EQEQUAL(OP) '=='
[69](01, 31)-(01, 37): NAME(NAME) 'string'
[69](01, 38)-(01, 41): NAME(NAME) 'and'
[69](01, 42)-(01, 48): NAME(NAME) 'encode'
[69](01, 48)-(01, 49): LPAR(OP) '('
[69](01, 49)-(01, 61): NAME(NAME) 'mine_string2'
[69](01, 61)-(01, 62): RPAR(OP) ')'
[69](01, 63)-(01, 65): EQEQUAL(OP) '=='
[69](01, 66)-(01, 72): NAME(NAME) 'string'
[69](01, 72)-(01, 73): COLON(OP) ':'
[69](01, 73)-(01, 74): NEWLINE(NEWLINE) '\n'
[69](02, 00)-(02, 00): DEDENT(DEDENT)
[69](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[70](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[70](01, 00)-(01, 08): INDENT(INDENT) '        '
[70](01, 08)-(01, 25): NAME(NAME) 'mine_string_total'
[70](01, 26)-(01, 27): EQUAL(OP) '='
[70](01, 28)-(01, 40): NAME(NAME) 'mine_string1'
[70](01, 41)-(01, 42): PLUS(OP) '+'
[70](01, 43)-(01, 47): STRING(STRING) '"\\n"'
[70](01, 48)-(01, 49): PLUS(OP) '+'
[70](01, 50)-(01, 62): NAME(NAME) 'mine_string2'
[70](01, 62)-(01, 63): NEWLINE(NEWLINE) '\n'
[70](02, 00)-(02, 00): DEDENT(DEDENT)
[70](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[71](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[71](01, 00)-(01, 04): INDENT(INDENT) '    '
[71](01, 04)-(01, 08): NAME(NAME) 'elif'
[71](01, 09)-(01, 15): NAME(NAME) 'encode'
[71](01, 15)-(01, 16): LPAR(OP) '('
[71](01, 16)-(01, 28): NAME(NAME) 'mine_string1'
[71](01, 28)-(01, 29): RPAR(OP) ')'
[71](01, 30)-(01, 32): EQEQUAL(OP) '=='
[71](01, 33)-(01, 39): NAME(NAME) 'string'
[71](01, 39)-(01, 40): COLON(OP) ':'
[71](01, 40)-(01, 41): NEWLINE(NEWLINE) '\n'
[71](02, 00)-(02, 00): DEDENT(DEDENT)
[71](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[72](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[72](01, 00)-(01, 08): INDENT(INDENT) '        '
[72](01, 08)-(01, 25): NAME(NAME) 'mine_string_total'
[72](01, 26)-(01, 27): EQUAL(OP) '='
[72](01, 28)-(01, 40): NAME(NAME) 'mine_string1'
[72](01, 40)-(01, 41): NEWLINE(NEWLINE) '\n'
[72](02, 00)-(02, 00): DEDENT(DEDENT)
[72](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[73](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[73](01, 00)-(01, 04): INDENT(INDENT) '    '
[73](01, 04)-(01, 08): NAME(NAME) 'elif'
[73](01, 09)-(01, 15): NAME(NAME) 'encode'
[73](01, 15)-(01, 16): LPAR(OP) '('
[73](01, 16)-(01, 28): NAME(NAME) 'mine_string2'
[73](01, 28)-(01, 29): RPAR(OP) ')'
[73](01, 30)-(01, 32): EQEQUAL(OP) '=='
[73](01, 33)-(01, 39): NAME(NAME) 'string'
[73](01, 39)-(01, 40): COLON(OP) ':'
[73](01, 40)-(01, 41): NEWLINE(NEWLINE) '\n'
[73](02, 00)-(02, 00): DEDENT(DEDENT)
[73](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[74](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[74](01, 00)-(01, 08): INDENT(INDENT) '        '
[74](01, 08)-(01, 25): NAME(NAME) 'mine_string_total'
[74](01, 26)-(01, 27): EQUAL(OP) '='
[74](01, 28)-(01, 40): NAME(NAME) 'mine_string2'
[74](01, 40)-(01, 41): NEWLINE(NEWLINE) '\n'
[74](02, 00)-(02, 00): DEDENT(DEDENT)
[74](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[75](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[75](01, 00)-(01, 01): NL(NL) '\n'
[75](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[76](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[76](01, 00)-(01, 04): INDENT(INDENT) '    '
[76](01, 04)-(01, 10): NAME(NAME) 'return'
[76](01, 11)-(01, 14): NAME(NAME) 'str'
[76](01, 14)-(01, 15): LPAR(OP) '('
[76](01, 15)-(01, 32): NAME(NAME) 'mine_string_total'
[76](01, 32)-(01, 33): RPAR(OP) ')'
[76](01, 33)-(01, 34): NEWLINE(NEWLINE)
[76](02, 00)-(02, 00): DEDENT(DEDENT)
[76](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

