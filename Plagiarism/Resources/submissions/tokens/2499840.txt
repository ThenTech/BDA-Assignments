[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 12): NAME(NAME) 'magic_square'
[00](01, 13)-(01, 14): EQUAL(OP) '='
[00](01, 15)-(01, 16): LSQB(OP) '['
[00](01, 16)-(01, 17): RSQB(OP) ']'
[00](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 01): NL(NL) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 01): NL(NL) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 03): NAME(NAME) 'def'
[03](01, 04)-(01, 15): NAME(NAME) 'check_diag1'
[03](01, 15)-(01, 16): LPAR(OP) '('
[03](01, 16)-(01, 17): NAME(NAME) 'l'
[03](01, 17)-(01, 18): COMMA(OP) ','
[03](01, 19)-(01, 20): NAME(NAME) 'n'
[03](01, 20)-(01, 21): RPAR(OP) ')'
[03](01, 21)-(01, 22): COLON(OP) ':'
[03](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 01): NL(NL) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 07): NAME(NAME) 'sum'
[05](01, 08)-(01, 09): EQUAL(OP) '='
[05](01, 10)-(01, 11): NUMBER(NUMBER) '0'
[05](01, 11)-(01, 12): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 04): INDENT(INDENT) '    '
[06](01, 04)-(01, 07): NAME(NAME) 'for'
[06](01, 08)-(01, 09): NAME(NAME) 'i'
[06](01, 10)-(01, 12): NAME(NAME) 'in'
[06](01, 13)-(01, 18): NAME(NAME) 'range'
[06](01, 18)-(01, 19): LPAR(OP) '('
[06](01, 19)-(01, 20): NUMBER(NUMBER) '0'
[06](01, 20)-(01, 21): COMMA(OP) ','
[06](01, 21)-(01, 24): NAME(NAME) 'len'
[06](01, 24)-(01, 25): LPAR(OP) '('
[06](01, 25)-(01, 26): NAME(NAME) 'l'
[06](01, 26)-(01, 27): RPAR(OP) ')'
[06](01, 27)-(01, 28): RPAR(OP) ')'
[06](01, 28)-(01, 29): COLON(OP) ':'
[06](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 08): INDENT(INDENT) '        '
[07](01, 08)-(01, 11): NAME(NAME) 'sum'
[07](01, 12)-(01, 14): PLUSEQUAL(OP) '+='
[07](01, 15)-(01, 16): NAME(NAME) 'l'
[07](01, 16)-(01, 17): LSQB(OP) '['
[07](01, 17)-(01, 18): NAME(NAME) 'i'
[07](01, 18)-(01, 19): RSQB(OP) ']'
[07](01, 19)-(01, 20): LSQB(OP) '['
[07](01, 20)-(01, 21): NAME(NAME) 'i'
[07](01, 21)-(01, 22): RSQB(OP) ']'
[07](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 01): NL(NL) '\n'
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 10): NAME(NAME) 'return'
[09](01, 11)-(01, 14): NAME(NAME) 'sum'
[09](01, 15)-(01, 17): EQEQUAL(OP) '=='
[09](01, 18)-(01, 19): NAME(NAME) 'n'
[09](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 01): NL(NL) '\n'
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 01): NL(NL) '\n'
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 03): NAME(NAME) 'def'
[12](01, 04)-(01, 15): NAME(NAME) 'check_diag2'
[12](01, 15)-(01, 16): LPAR(OP) '('
[12](01, 16)-(01, 17): NAME(NAME) 'l'
[12](01, 17)-(01, 18): COMMA(OP) ','
[12](01, 19)-(01, 20): NAME(NAME) 'n'
[12](01, 20)-(01, 21): RPAR(OP) ')'
[12](01, 21)-(01, 22): COLON(OP) ':'
[12](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 01): NL(NL) '\n'
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 04): INDENT(INDENT) '    '
[14](01, 04)-(01, 07): NAME(NAME) 'sum'
[14](01, 08)-(01, 09): EQUAL(OP) '='
[14](01, 10)-(01, 11): NUMBER(NUMBER) '0'
[14](01, 11)-(01, 12): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 04): INDENT(INDENT) '    '
[15](01, 04)-(01, 07): NAME(NAME) 'for'
[15](01, 08)-(01, 09): NAME(NAME) 'i'
[15](01, 10)-(01, 12): NAME(NAME) 'in'
[15](01, 13)-(01, 18): NAME(NAME) 'range'
[15](01, 18)-(01, 19): LPAR(OP) '('
[15](01, 19)-(01, 20): NUMBER(NUMBER) '0'
[15](01, 20)-(01, 21): COMMA(OP) ','
[15](01, 21)-(01, 24): NAME(NAME) 'len'
[15](01, 24)-(01, 25): LPAR(OP) '('
[15](01, 25)-(01, 26): NAME(NAME) 'l'
[15](01, 26)-(01, 27): RPAR(OP) ')'
[15](01, 27)-(01, 28): RPAR(OP) ')'
[15](01, 28)-(01, 29): COLON(OP) ':'
[15](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 08): INDENT(INDENT) '        '
[16](01, 08)-(01, 11): NAME(NAME) 'sum'
[16](01, 12)-(01, 14): PLUSEQUAL(OP) '+='
[16](01, 15)-(01, 16): NAME(NAME) 'l'
[16](01, 16)-(01, 17): LSQB(OP) '['
[16](01, 17)-(01, 18): NAME(NAME) 'i'
[16](01, 18)-(01, 19): RSQB(OP) ']'
[16](01, 19)-(01, 20): LSQB(OP) '['
[16](01, 20)-(01, 23): NAME(NAME) 'len'
[16](01, 23)-(01, 24): LPAR(OP) '('
[16](01, 24)-(01, 25): NAME(NAME) 'l'
[16](01, 25)-(01, 26): RPAR(OP) ')'
[16](01, 26)-(01, 27): MINUS(OP) '-'
[16](01, 27)-(01, 28): NAME(NAME) 'i'
[16](01, 28)-(01, 29): MINUS(OP) '-'
[16](01, 29)-(01, 30): NUMBER(NUMBER) '1'
[16](01, 30)-(01, 31): RSQB(OP) ']'
[16](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 01): NL(NL) '\n'
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 04): INDENT(INDENT) '    '
[18](01, 04)-(01, 10): NAME(NAME) 'return'
[18](01, 11)-(01, 14): NAME(NAME) 'sum'
[18](01, 15)-(01, 17): EQEQUAL(OP) '=='
[18](01, 18)-(01, 19): NAME(NAME) 'n'
[18](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 01): NL(NL) '\n'
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 01): NL(NL) '\n'
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 03): NAME(NAME) 'def'
[21](01, 04)-(01, 14): NAME(NAME) 'check_cols'
[21](01, 14)-(01, 15): LPAR(OP) '('
[21](01, 15)-(01, 16): NAME(NAME) 'l'
[21](01, 16)-(01, 17): COMMA(OP) ','
[21](01, 18)-(01, 19): NAME(NAME) 'n'
[21](01, 19)-(01, 20): RPAR(OP) ')'
[21](01, 20)-(01, 21): COLON(OP) ':'
[21](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 01): NL(NL) '\n'
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[23](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[23](01, 00)-(01, 04): INDENT(INDENT) '    '
[23](01, 04)-(01, 07): NAME(NAME) 'for'
[23](01, 08)-(01, 09): NAME(NAME) 'j'
[23](01, 10)-(01, 12): NAME(NAME) 'in'
[23](01, 13)-(01, 18): NAME(NAME) 'range'
[23](01, 18)-(01, 19): LPAR(OP) '('
[23](01, 19)-(01, 20): NUMBER(NUMBER) '0'
[23](01, 20)-(01, 21): COMMA(OP) ','
[23](01, 21)-(01, 24): NAME(NAME) 'len'
[23](01, 24)-(01, 25): LPAR(OP) '('
[23](01, 25)-(01, 26): NAME(NAME) 'l'
[23](01, 26)-(01, 27): RPAR(OP) ')'
[23](01, 27)-(01, 28): RPAR(OP) ')'
[23](01, 28)-(01, 29): COLON(OP) ':'
[23](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[23](02, 00)-(02, 00): DEDENT(DEDENT)
[23](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[24](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[24](01, 00)-(01, 08): INDENT(INDENT) '        '
[24](01, 08)-(01, 11): NAME(NAME) 'sum'
[24](01, 12)-(01, 13): EQUAL(OP) '='
[24](01, 14)-(01, 15): NUMBER(NUMBER) '0'
[24](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[24](02, 00)-(02, 00): DEDENT(DEDENT)
[24](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[25](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[25](01, 00)-(01, 08): INDENT(INDENT) '        '
[25](01, 08)-(01, 11): NAME(NAME) 'for'
[25](01, 12)-(01, 13): NAME(NAME) 'i'
[25](01, 14)-(01, 16): NAME(NAME) 'in'
[25](01, 17)-(01, 22): NAME(NAME) 'range'
[25](01, 22)-(01, 23): LPAR(OP) '('
[25](01, 23)-(01, 24): NUMBER(NUMBER) '0'
[25](01, 24)-(01, 25): COMMA(OP) ','
[25](01, 25)-(01, 28): NAME(NAME) 'len'
[25](01, 28)-(01, 29): LPAR(OP) '('
[25](01, 29)-(01, 30): NAME(NAME) 'l'
[25](01, 30)-(01, 31): RPAR(OP) ')'
[25](01, 31)-(01, 32): RPAR(OP) ')'
[25](01, 32)-(01, 33): COLON(OP) ':'
[25](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[25](02, 00)-(02, 00): DEDENT(DEDENT)
[25](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[26](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[26](01, 00)-(01, 12): INDENT(INDENT) '            '
[26](01, 12)-(01, 15): NAME(NAME) 'sum'
[26](01, 16)-(01, 18): PLUSEQUAL(OP) '+='
[26](01, 19)-(01, 20): NAME(NAME) 'l'
[26](01, 20)-(01, 21): LSQB(OP) '['
[26](01, 21)-(01, 22): NAME(NAME) 'i'
[26](01, 22)-(01, 23): RSQB(OP) ']'
[26](01, 23)-(01, 24): LSQB(OP) '['
[26](01, 24)-(01, 25): NAME(NAME) 'j'
[26](01, 25)-(01, 26): RSQB(OP) ']'
[26](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[26](02, 00)-(02, 00): DEDENT(DEDENT)
[26](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[27](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[27](01, 00)-(01, 01): NL(NL) '\n'
[27](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[28](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[28](01, 00)-(01, 08): INDENT(INDENT) '        '
[28](01, 08)-(01, 10): NAME(NAME) 'if'
[28](01, 11)-(01, 14): NAME(NAME) 'sum'
[28](01, 15)-(01, 17): NOTEQUAL(OP) '!='
[28](01, 18)-(01, 19): NAME(NAME) 'n'
[28](01, 19)-(01, 20): COLON(OP) ':'
[28](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[28](02, 00)-(02, 00): DEDENT(DEDENT)
[28](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[29](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[29](01, 00)-(01, 12): INDENT(INDENT) '            '
[29](01, 12)-(01, 18): NAME(NAME) 'return'
[29](01, 19)-(01, 24): NAME(NAME) 'False'
[29](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[29](02, 00)-(02, 00): DEDENT(DEDENT)
[29](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[30](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[30](01, 00)-(01, 01): NL(NL) '\n'
[30](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[31](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[31](01, 00)-(01, 04): INDENT(INDENT) '    '
[31](01, 04)-(01, 10): NAME(NAME) 'return'
[31](01, 11)-(01, 15): NAME(NAME) 'True'
[31](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[31](02, 00)-(02, 00): DEDENT(DEDENT)
[31](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[32](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[32](01, 00)-(01, 01): NL(NL) '\n'
[32](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[33](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[33](01, 00)-(01, 01): NL(NL) '\n'
[33](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[34](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[34](01, 00)-(01, 03): NAME(NAME) 'def'
[34](01, 04)-(01, 14): NAME(NAME) 'check_rows'
[34](01, 14)-(01, 15): LPAR(OP) '('
[34](01, 15)-(01, 16): NAME(NAME) 'l'
[34](01, 16)-(01, 17): COMMA(OP) ','
[34](01, 18)-(01, 19): NAME(NAME) 'n'
[34](01, 19)-(01, 20): RPAR(OP) ')'
[34](01, 20)-(01, 21): COLON(OP) ':'
[34](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[34](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[35](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[35](01, 00)-(01, 01): NL(NL) '\n'
[35](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[36](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[36](01, 00)-(01, 04): INDENT(INDENT) '    '
[36](01, 04)-(01, 07): NAME(NAME) 'for'
[36](01, 08)-(01, 09): NAME(NAME) 'i'
[36](01, 10)-(01, 12): NAME(NAME) 'in'
[36](01, 13)-(01, 18): NAME(NAME) 'range'
[36](01, 18)-(01, 19): LPAR(OP) '('
[36](01, 19)-(01, 20): NUMBER(NUMBER) '0'
[36](01, 20)-(01, 21): COMMA(OP) ','
[36](01, 21)-(01, 24): NAME(NAME) 'len'
[36](01, 24)-(01, 25): LPAR(OP) '('
[36](01, 25)-(01, 26): NAME(NAME) 'l'
[36](01, 26)-(01, 27): RPAR(OP) ')'
[36](01, 27)-(01, 28): RPAR(OP) ')'
[36](01, 28)-(01, 29): COLON(OP) ':'
[36](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[36](02, 00)-(02, 00): DEDENT(DEDENT)
[36](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[37](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[37](01, 00)-(01, 08): INDENT(INDENT) '        '
[37](01, 08)-(01, 11): NAME(NAME) 'sum'
[37](01, 12)-(01, 13): EQUAL(OP) '='
[37](01, 14)-(01, 15): NUMBER(NUMBER) '0'
[37](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[37](02, 00)-(02, 00): DEDENT(DEDENT)
[37](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[38](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[38](01, 00)-(01, 08): INDENT(INDENT) '        '
[38](01, 08)-(01, 11): NAME(NAME) 'for'
[38](01, 12)-(01, 13): NAME(NAME) 'j'
[38](01, 14)-(01, 16): NAME(NAME) 'in'
[38](01, 17)-(01, 22): NAME(NAME) 'range'
[38](01, 22)-(01, 23): LPAR(OP) '('
[38](01, 23)-(01, 24): NUMBER(NUMBER) '0'
[38](01, 24)-(01, 25): COMMA(OP) ','
[38](01, 25)-(01, 28): NAME(NAME) 'len'
[38](01, 28)-(01, 29): LPAR(OP) '('
[38](01, 29)-(01, 30): NAME(NAME) 'l'
[38](01, 30)-(01, 31): RPAR(OP) ')'
[38](01, 31)-(01, 32): RPAR(OP) ')'
[38](01, 32)-(01, 33): COLON(OP) ':'
[38](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[38](02, 00)-(02, 00): DEDENT(DEDENT)
[38](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[39](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[39](01, 00)-(01, 12): INDENT(INDENT) '            '
[39](01, 12)-(01, 15): NAME(NAME) 'sum'
[39](01, 16)-(01, 18): PLUSEQUAL(OP) '+='
[39](01, 19)-(01, 20): NAME(NAME) 'l'
[39](01, 20)-(01, 21): LSQB(OP) '['
[39](01, 21)-(01, 22): NAME(NAME) 'i'
[39](01, 22)-(01, 23): RSQB(OP) ']'
[39](01, 23)-(01, 24): LSQB(OP) '['
[39](01, 24)-(01, 25): NAME(NAME) 'j'
[39](01, 25)-(01, 26): RSQB(OP) ']'
[39](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[39](02, 00)-(02, 00): DEDENT(DEDENT)
[39](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[40](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[40](01, 00)-(01, 01): NL(NL) '\n'
[40](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[41](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[41](01, 00)-(01, 08): INDENT(INDENT) '        '
[41](01, 08)-(01, 10): NAME(NAME) 'if'
[41](01, 11)-(01, 14): NAME(NAME) 'sum'
[41](01, 15)-(01, 17): NOTEQUAL(OP) '!='
[41](01, 18)-(01, 19): NAME(NAME) 'n'
[41](01, 19)-(01, 20): COLON(OP) ':'
[41](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[41](02, 00)-(02, 00): DEDENT(DEDENT)
[41](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[42](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[42](01, 00)-(01, 12): INDENT(INDENT) '            '
[42](01, 12)-(01, 18): NAME(NAME) 'return'
[42](01, 19)-(01, 24): NAME(NAME) 'False'
[42](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[42](02, 00)-(02, 00): DEDENT(DEDENT)
[42](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[43](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[43](01, 00)-(01, 01): NL(NL) '\n'
[43](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[44](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[44](01, 00)-(01, 04): INDENT(INDENT) '    '
[44](01, 04)-(01, 10): NAME(NAME) 'return'
[44](01, 11)-(01, 15): NAME(NAME) 'True'
[44](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[44](02, 00)-(02, 00): DEDENT(DEDENT)
[44](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[45](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[45](01, 00)-(01, 01): NL(NL) '\n'
[45](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[46](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[46](01, 00)-(01, 01): NL(NL) '\n'
[46](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[47](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[47](01, 00)-(01, 03): NAME(NAME) 'def'
[47](01, 04)-(01, 20): NAME(NAME) 'check_dimensions'
[47](01, 20)-(01, 21): LPAR(OP) '('
[47](01, 21)-(01, 22): NAME(NAME) 'l'
[47](01, 22)-(01, 23): RPAR(OP) ')'
[47](01, 23)-(01, 24): COLON(OP) ':'
[47](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[47](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[48](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[48](01, 04)-(01, 37): COMMENT(COMMENT) '# number of rows should be uneven'
[48](01, 37)-(01, 38): NL(NL) '\n'
[48](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[49](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[49](01, 00)-(01, 04): INDENT(INDENT) '    '
[49](01, 04)-(01, 06): NAME(NAME) 'if'
[49](01, 07)-(01, 10): NAME(NAME) 'len'
[49](01, 10)-(01, 11): LPAR(OP) '('
[49](01, 11)-(01, 12): NAME(NAME) 'l'
[49](01, 12)-(01, 13): RPAR(OP) ')'
[49](01, 14)-(01, 15): PERCENT(OP) '%'
[49](01, 16)-(01, 17): NUMBER(NUMBER) '2'
[49](01, 18)-(01, 20): EQEQUAL(OP) '=='
[49](01, 21)-(01, 22): NUMBER(NUMBER) '0'
[49](01, 22)-(01, 23): COLON(OP) ':'
[49](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[49](02, 00)-(02, 00): DEDENT(DEDENT)
[49](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[50](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[50](01, 00)-(01, 08): INDENT(INDENT) '        '
[50](01, 08)-(01, 14): NAME(NAME) 'return'
[50](01, 15)-(01, 20): NAME(NAME) 'False'
[50](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[50](02, 00)-(02, 00): DEDENT(DEDENT)
[50](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[51](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[51](01, 00)-(01, 01): NL(NL) '\n'
[51](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[52](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[52](01, 00)-(01, 04): INDENT(INDENT) '    '
[52](01, 04)-(01, 05): NAME(NAME) 'n'
[52](01, 06)-(01, 07): EQUAL(OP) '='
[52](01, 08)-(01, 11): NAME(NAME) 'len'
[52](01, 11)-(01, 12): LPAR(OP) '('
[52](01, 12)-(01, 13): NAME(NAME) 'l'
[52](01, 13)-(01, 14): RPAR(OP) ')'
[52](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[52](02, 00)-(02, 00): DEDENT(DEDENT)
[52](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[53](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[53](01, 00)-(01, 01): NL(NL) '\n'
[53](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[54](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[54](01, 04)-(01, 39): COMMENT(COMMENT) '# every column should have length n'
[54](01, 39)-(01, 40): NL(NL) '\n'
[54](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[55](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[55](01, 00)-(01, 04): INDENT(INDENT) '    '
[55](01, 04)-(01, 07): NAME(NAME) 'for'
[55](01, 08)-(01, 09): NAME(NAME) 'i'
[55](01, 10)-(01, 12): NAME(NAME) 'in'
[55](01, 13)-(01, 18): NAME(NAME) 'range'
[55](01, 18)-(01, 19): LPAR(OP) '('
[55](01, 19)-(01, 20): NUMBER(NUMBER) '0'
[55](01, 20)-(01, 21): COMMA(OP) ','
[55](01, 21)-(01, 22): NAME(NAME) 'n'
[55](01, 22)-(01, 23): RPAR(OP) ')'
[55](01, 23)-(01, 24): COLON(OP) ':'
[55](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[55](02, 00)-(02, 00): DEDENT(DEDENT)
[55](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[56](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[56](01, 00)-(01, 08): INDENT(INDENT) '        '
[56](01, 08)-(01, 10): NAME(NAME) 'if'
[56](01, 11)-(01, 14): NAME(NAME) 'len'
[56](01, 14)-(01, 15): LPAR(OP) '('
[56](01, 15)-(01, 16): NAME(NAME) 'l'
[56](01, 16)-(01, 17): LSQB(OP) '['
[56](01, 17)-(01, 18): NAME(NAME) 'i'
[56](01, 18)-(01, 19): RSQB(OP) ']'
[56](01, 19)-(01, 20): RPAR(OP) ')'
[56](01, 21)-(01, 23): NOTEQUAL(OP) '!='
[56](01, 24)-(01, 25): NAME(NAME) 'n'
[56](01, 25)-(01, 26): COLON(OP) ':'
[56](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[56](02, 00)-(02, 00): DEDENT(DEDENT)
[56](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[57](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[57](01, 00)-(01, 12): INDENT(INDENT) '            '
[57](01, 12)-(01, 18): NAME(NAME) 'return'
[57](01, 19)-(01, 24): NAME(NAME) 'False'
[57](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[57](02, 00)-(02, 00): DEDENT(DEDENT)
[57](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[58](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[58](01, 00)-(01, 01): NL(NL) '\n'
[58](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[59](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[59](01, 00)-(01, 04): INDENT(INDENT) '    '
[59](01, 04)-(01, 10): NAME(NAME) 'return'
[59](01, 11)-(01, 15): NAME(NAME) 'True'
[59](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[59](02, 00)-(02, 00): DEDENT(DEDENT)
[59](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[60](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[60](01, 00)-(01, 01): NL(NL) '\n'
[60](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[61](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[61](01, 00)-(01, 01): NL(NL) '\n'
[61](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[62](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[62](01, 00)-(01, 03): NAME(NAME) 'def'
[62](01, 04)-(01, 16): NAME(NAME) 'check_unique'
[62](01, 16)-(01, 17): LPAR(OP) '('
[62](01, 17)-(01, 18): NAME(NAME) 'l'
[62](01, 18)-(01, 19): RPAR(OP) ')'
[62](01, 19)-(01, 20): COLON(OP) ':'
[62](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[62](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[63](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[63](01, 04)-(01, 26): COMMENT(COMMENT) '# transform to 1D list'
[63](01, 26)-(01, 27): NL(NL) '\n'
[63](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[64](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[64](01, 00)-(01, 04): INDENT(INDENT) '    '
[64](01, 04)-(01, 07): NAME(NAME) 'l1d'
[64](01, 08)-(01, 09): EQUAL(OP) '='
[64](01, 10)-(01, 11): LSQB(OP) '['
[64](01, 11)-(01, 12): RSQB(OP) ']'
[64](01, 12)-(01, 13): NEWLINE(NEWLINE) '\n'
[64](02, 00)-(02, 00): DEDENT(DEDENT)
[64](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[65](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[65](01, 00)-(01, 04): INDENT(INDENT) '    '
[65](01, 04)-(01, 07): NAME(NAME) 'for'
[65](01, 08)-(01, 11): NAME(NAME) 'row'
[65](01, 12)-(01, 14): NAME(NAME) 'in'
[65](01, 15)-(01, 16): NAME(NAME) 'l'
[65](01, 16)-(01, 17): COLON(OP) ':'
[65](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[65](02, 00)-(02, 00): DEDENT(DEDENT)
[65](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[66](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[66](01, 00)-(01, 08): INDENT(INDENT) '        '
[66](01, 08)-(01, 11): NAME(NAME) 'for'
[66](01, 12)-(01, 16): NAME(NAME) 'item'
[66](01, 17)-(01, 19): NAME(NAME) 'in'
[66](01, 20)-(01, 23): NAME(NAME) 'row'
[66](01, 23)-(01, 24): COLON(OP) ':'
[66](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[66](02, 00)-(02, 00): DEDENT(DEDENT)
[66](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[67](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[67](01, 00)-(01, 12): INDENT(INDENT) '            '
[67](01, 12)-(01, 15): NAME(NAME) 'l1d'
[67](01, 15)-(01, 16): DOT(OP) '.'
[67](01, 16)-(01, 22): NAME(NAME) 'append'
[67](01, 22)-(01, 23): LPAR(OP) '('
[67](01, 23)-(01, 27): NAME(NAME) 'item'
[67](01, 27)-(01, 28): RPAR(OP) ')'
[67](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[67](02, 00)-(02, 00): DEDENT(DEDENT)
[67](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[68](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[68](01, 00)-(01, 01): NL(NL) '\n'
[68](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[69](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[69](01, 04)-(01, 60): COMMENT(COMMENT) '# use previously created is_unique function for 1D lists'
[69](01, 60)-(01, 61): NL(NL) '\n'
[69](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[70](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[70](01, 00)-(01, 04): INDENT(INDENT) '    '
[70](01, 04)-(01, 10): NAME(NAME) 'return'
[70](01, 11)-(01, 20): NAME(NAME) 'is_unique'
[70](01, 20)-(01, 21): LPAR(OP) '('
[70](01, 21)-(01, 24): NAME(NAME) 'l1d'
[70](01, 24)-(01, 25): RPAR(OP) ')'
[70](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[70](02, 00)-(02, 00): DEDENT(DEDENT)
[70](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[71](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[71](01, 00)-(01, 01): NL(NL) '\n'
[71](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[72](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[72](01, 00)-(01, 01): NL(NL) '\n'
[72](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[73](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[73](01, 00)-(01, 03): NAME(NAME) 'def'
[73](01, 04)-(01, 13): NAME(NAME) 'is_unique'
[73](01, 13)-(01, 14): LPAR(OP) '('
[73](01, 14)-(01, 15): NAME(NAME) 'l'
[73](01, 15)-(01, 16): RPAR(OP) ')'
[73](01, 16)-(01, 17): COLON(OP) ':'
[73](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[73](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[74](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[74](01, 04)-(01, 26): COMMENT(COMMENT) '# for all combinations'
[74](01, 26)-(01, 27): NL(NL) '\n'
[74](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[75](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[75](01, 00)-(01, 04): INDENT(INDENT) '    '
[75](01, 04)-(01, 07): NAME(NAME) 'for'
[75](01, 08)-(01, 09): NAME(NAME) 'i'
[75](01, 10)-(01, 12): NAME(NAME) 'in'
[75](01, 13)-(01, 18): NAME(NAME) 'range'
[75](01, 18)-(01, 19): LPAR(OP) '('
[75](01, 19)-(01, 20): NUMBER(NUMBER) '0'
[75](01, 20)-(01, 21): COMMA(OP) ','
[75](01, 22)-(01, 25): NAME(NAME) 'len'
[75](01, 25)-(01, 26): LPAR(OP) '('
[75](01, 26)-(01, 27): NAME(NAME) 'l'
[75](01, 27)-(01, 28): RPAR(OP) ')'
[75](01, 28)-(01, 29): RPAR(OP) ')'
[75](01, 29)-(01, 30): COLON(OP) ':'
[75](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[75](02, 00)-(02, 00): DEDENT(DEDENT)
[75](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[76](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[76](01, 00)-(01, 08): INDENT(INDENT) '        '
[76](01, 08)-(01, 11): NAME(NAME) 'for'
[76](01, 12)-(01, 13): NAME(NAME) 'j'
[76](01, 14)-(01, 16): NAME(NAME) 'in'
[76](01, 17)-(01, 22): NAME(NAME) 'range'
[76](01, 22)-(01, 23): LPAR(OP) '('
[76](01, 23)-(01, 24): NUMBER(NUMBER) '0'
[76](01, 24)-(01, 25): COMMA(OP) ','
[76](01, 26)-(01, 29): NAME(NAME) 'len'
[76](01, 29)-(01, 30): LPAR(OP) '('
[76](01, 30)-(01, 31): NAME(NAME) 'l'
[76](01, 31)-(01, 32): RPAR(OP) ')'
[76](01, 32)-(01, 33): RPAR(OP) ')'
[76](01, 33)-(01, 34): COLON(OP) ':'
[76](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[76](02, 00)-(02, 00): DEDENT(DEDENT)
[76](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[77](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[77](01, 12)-(01, 41): COMMENT(COMMENT) '# check if they are different'
[77](01, 41)-(01, 42): NL(NL) '\n'
[77](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[78](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[78](01, 00)-(01, 12): INDENT(INDENT) '            '
[78](01, 12)-(01, 14): NAME(NAME) 'if'
[78](01, 15)-(01, 16): NAME(NAME) 'i'
[78](01, 17)-(01, 19): NOTEQUAL(OP) '!='
[78](01, 20)-(01, 21): NAME(NAME) 'j'
[78](01, 22)-(01, 25): NAME(NAME) 'and'
[78](01, 26)-(01, 27): NAME(NAME) 'l'
[78](01, 27)-(01, 28): LSQB(OP) '['
[78](01, 28)-(01, 29): NAME(NAME) 'i'
[78](01, 29)-(01, 30): RSQB(OP) ']'
[78](01, 31)-(01, 33): EQEQUAL(OP) '=='
[78](01, 34)-(01, 35): NAME(NAME) 'l'
[78](01, 35)-(01, 36): LSQB(OP) '['
[78](01, 36)-(01, 37): NAME(NAME) 'j'
[78](01, 37)-(01, 38): RSQB(OP) ']'
[78](01, 38)-(01, 39): COLON(OP) ':'
[78](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[78](02, 00)-(02, 00): DEDENT(DEDENT)
[78](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[79](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[79](01, 00)-(01, 16): INDENT(INDENT) '                '
[79](01, 16)-(01, 22): NAME(NAME) 'return'
[79](01, 23)-(01, 28): NAME(NAME) 'False'
[79](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[79](02, 00)-(02, 00): DEDENT(DEDENT)
[79](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[80](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[80](01, 00)-(01, 01): NL(NL) '\n'
[80](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[81](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[81](01, 00)-(01, 04): INDENT(INDENT) '    '
[81](01, 04)-(01, 10): NAME(NAME) 'return'
[81](01, 11)-(01, 15): NAME(NAME) 'True'
[81](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[81](02, 00)-(02, 00): DEDENT(DEDENT)
[81](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[82](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[82](01, 00)-(01, 01): NL(NL) '\n'
[82](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[83](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[83](01, 00)-(01, 01): NL(NL) '\n'
[83](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[84](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[84](01, 00)-(01, 03): NAME(NAME) 'def'
[84](01, 04)-(01, 19): NAME(NAME) 'is_magic_square'
[84](01, 19)-(01, 20): LPAR(OP) '('
[84](01, 20)-(01, 21): NAME(NAME) 'l'
[84](01, 21)-(01, 22): RPAR(OP) ')'
[84](01, 22)-(01, 23): COLON(OP) ':'
[84](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[84](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[85](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[85](01, 00)-(01, 01): NL(NL) '\n'
[85](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[86](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[86](01, 00)-(01, 04): INDENT(INDENT) '    '
[86](01, 04)-(01, 06): NAME(NAME) 'if'
[86](01, 07)-(01, 10): NAME(NAME) 'not'
[86](01, 11)-(01, 27): NAME(NAME) 'check_dimensions'
[86](01, 27)-(01, 28): LPAR(OP) '('
[86](01, 28)-(01, 29): NAME(NAME) 'l'
[86](01, 29)-(01, 30): RPAR(OP) ')'
[86](01, 31)-(01, 33): NAME(NAME) 'or'
[86](01, 34)-(01, 37): NAME(NAME) 'not'
[86](01, 38)-(01, 50): NAME(NAME) 'check_unique'
[86](01, 50)-(01, 51): LPAR(OP) '('
[86](01, 51)-(01, 52): NAME(NAME) 'l'
[86](01, 52)-(01, 53): RPAR(OP) ')'
[86](01, 53)-(01, 54): COLON(OP) ':'
[86](01, 54)-(01, 55): NEWLINE(NEWLINE) '\n'
[86](02, 00)-(02, 00): DEDENT(DEDENT)
[86](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[87](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[87](01, 00)-(01, 08): INDENT(INDENT) '        '
[87](01, 08)-(01, 14): NAME(NAME) 'return'
[87](01, 15)-(01, 20): NAME(NAME) 'False'
[87](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[87](02, 00)-(02, 00): DEDENT(DEDENT)
[87](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[88](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[88](01, 00)-(01, 01): NL(NL) '\n'
[88](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[89](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[89](01, 00)-(01, 04): INDENT(INDENT) '    '
[89](01, 04)-(01, 05): NAME(NAME) 'n'
[89](01, 06)-(01, 07): EQUAL(OP) '='
[89](01, 08)-(01, 11): NAME(NAME) 'sum'
[89](01, 11)-(01, 12): LPAR(OP) '('
[89](01, 12)-(01, 13): NAME(NAME) 'l'
[89](01, 13)-(01, 14): LSQB(OP) '['
[89](01, 14)-(01, 15): NUMBER(NUMBER) '0'
[89](01, 15)-(01, 16): RSQB(OP) ']'
[89](01, 16)-(01, 17): RPAR(OP) ')'
[89](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[89](02, 00)-(02, 00): DEDENT(DEDENT)
[89](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[90](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[90](01, 00)-(01, 04): INDENT(INDENT) '    '
[90](01, 04)-(01, 10): NAME(NAME) 'return'
[90](01, 11)-(01, 21): NAME(NAME) 'check_rows'
[90](01, 21)-(01, 22): LPAR(OP) '('
[90](01, 22)-(01, 23): NAME(NAME) 'l'
[90](01, 23)-(01, 24): COMMA(OP) ','
[90](01, 24)-(01, 25): NAME(NAME) 'n'
[90](01, 25)-(01, 26): RPAR(OP) ')'
[90](01, 27)-(01, 30): NAME(NAME) 'and'
[90](01, 31)-(01, 41): NAME(NAME) 'check_cols'
[90](01, 41)-(01, 42): LPAR(OP) '('
[90](01, 42)-(01, 43): NAME(NAME) 'l'
[90](01, 43)-(01, 44): COMMA(OP) ','
[90](01, 44)-(01, 45): NAME(NAME) 'n'
[90](01, 45)-(01, 46): RPAR(OP) ')'
[90](01, 47)-(01, 50): NAME(NAME) 'and'
[90](01, 51)-(01, 62): NAME(NAME) 'check_diag1'
[90](01, 62)-(01, 63): LPAR(OP) '('
[90](01, 63)-(01, 64): NAME(NAME) 'l'
[90](01, 64)-(01, 65): COMMA(OP) ','
[90](01, 65)-(01, 66): NAME(NAME) 'n'
[90](01, 66)-(01, 67): RPAR(OP) ')'
[90](01, 68)-(01, 71): NAME(NAME) 'and'
[90](01, 72)-(01, 83): NAME(NAME) 'check_diag2'
[90](01, 83)-(01, 84): LPAR(OP) '('
[90](01, 84)-(01, 85): NAME(NAME) 'l'
[90](01, 85)-(01, 86): COMMA(OP) ','
[90](01, 86)-(01, 87): NAME(NAME) 'n'
[90](01, 87)-(01, 88): RPAR(OP) ')'
[90](01, 88)-(01, 89): NEWLINE(NEWLINE) '\n'
[90](02, 00)-(02, 00): DEDENT(DEDENT)
[90](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[91](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[91](01, 00)-(01, 01): NL(NL) '\n'
[91](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

