[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 06): NAME(NAME) 'import'
[00](01, 07)-(01, 13): NAME(NAME) 'string'
[00](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 01): NL(NL) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 08): NAME(NAME) 'alphabet'
[02](01, 09)-(01, 10): EQUAL(OP) '='
[02](01, 11)-(01, 17): NAME(NAME) 'string'
[02](01, 17)-(01, 18): DOT(OP) '.'
[02](01, 18)-(01, 33): NAME(NAME) 'ascii_lowercase'
[02](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 01): NL(NL) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 02): NAME(NAME) 's1'
[04](01, 03)-(01, 04): EQUAL(OP) '='
[04](01, 05)-(01, 10): NAME(NAME) 'input'
[04](01, 10)-(01, 11): LPAR(OP) '('
[04](01, 11)-(01, 13): STRING(STRING) '""'
[04](01, 13)-(01, 14): RPAR(OP) ')'
[04](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 02): NAME(NAME) 's2'
[05](01, 03)-(01, 04): EQUAL(OP) '='
[05](01, 05)-(01, 10): NAME(NAME) 'input'
[05](01, 10)-(01, 11): LPAR(OP) '('
[05](01, 11)-(01, 13): STRING(STRING) '""'
[05](01, 13)-(01, 14): RPAR(OP) ')'
[05](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 01): NL(NL) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 05): NAME(NAME) 'count'
[07](01, 06)-(01, 07): EQUAL(OP) '='
[07](01, 08)-(01, 09): NUMBER(NUMBER) '0'
[07](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 04): NAME(NAME) 'test'
[08](01, 05)-(01, 06): EQUAL(OP) '='
[08](01, 07)-(01, 11): NAME(NAME) 'True'
[08](01, 11)-(01, 12): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 01): NL(NL) '\n'
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 05): NAME(NAME) 'while'
[10](01, 06)-(01, 11): NAME(NAME) 'count'
[10](01, 12)-(01, 13): LESS(OP) '<'
[10](01, 14)-(01, 16): NUMBER(NUMBER) '26'
[10](01, 17)-(01, 20): NAME(NAME) 'and'
[10](01, 21)-(01, 25): NAME(NAME) 'test'
[10](01, 26)-(01, 28): EQEQUAL(OP) '=='
[10](01, 29)-(01, 33): NAME(NAME) 'True'
[10](01, 33)-(01, 34): COLON(OP) ':'
[10](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 04): INDENT(INDENT) '    '
[11](01, 04)-(01, 06): NAME(NAME) 'if'
[11](01, 07)-(01, 09): NAME(NAME) 's1'
[11](01, 09)-(01, 10): DOT(OP) '.'
[11](01, 10)-(01, 15): NAME(NAME) 'count'
[11](01, 15)-(01, 16): LPAR(OP) '('
[11](01, 16)-(01, 24): NAME(NAME) 'alphabet'
[11](01, 24)-(01, 25): LSQB(OP) '['
[11](01, 25)-(01, 30): NAME(NAME) 'count'
[11](01, 30)-(01, 31): RSQB(OP) ']'
[11](01, 31)-(01, 32): RPAR(OP) ')'
[11](01, 33)-(01, 35): EQEQUAL(OP) '=='
[11](01, 36)-(01, 38): NAME(NAME) 's2'
[11](01, 38)-(01, 39): DOT(OP) '.'
[11](01, 39)-(01, 44): NAME(NAME) 'count'
[11](01, 44)-(01, 45): LPAR(OP) '('
[11](01, 45)-(01, 53): NAME(NAME) 'alphabet'
[11](01, 53)-(01, 54): LSQB(OP) '['
[11](01, 54)-(01, 59): NAME(NAME) 'count'
[11](01, 59)-(01, 60): RSQB(OP) ']'
[11](01, 60)-(01, 61): RPAR(OP) ')'
[11](01, 61)-(01, 62): COLON(OP) ':'
[11](01, 62)-(01, 63): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 08): INDENT(INDENT) '        '
[12](01, 08)-(01, 12): NAME(NAME) 'test'
[12](01, 13)-(01, 14): EQUAL(OP) '='
[12](01, 15)-(01, 19): NAME(NAME) 'True'
[12](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 04): INDENT(INDENT) '    '
[13](01, 04)-(01, 08): NAME(NAME) 'else'
[13](01, 08)-(01, 09): COLON(OP) ':'
[13](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 08): INDENT(INDENT) '        '
[14](01, 08)-(01, 12): NAME(NAME) 'test'
[14](01, 13)-(01, 14): EQUAL(OP) '='
[14](01, 15)-(01, 20): NAME(NAME) 'False'
[14](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 04): INDENT(INDENT) '    '
[15](01, 04)-(01, 09): NAME(NAME) 'count'
[15](01, 10)-(01, 12): PLUSEQUAL(OP) '+='
[15](01, 13)-(01, 14): NUMBER(NUMBER) '1'
[15](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 01): NL(NL) '\n'
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 02): NAME(NAME) 'if'
[17](01, 03)-(01, 07): NAME(NAME) 'test'
[17](01, 08)-(01, 10): EQEQUAL(OP) '=='
[17](01, 11)-(01, 15): NAME(NAME) 'True'
[17](01, 15)-(01, 16): COLON(OP) ':'
[17](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 04): INDENT(INDENT) '    '
[18](01, 04)-(01, 09): NAME(NAME) 'print'
[18](01, 09)-(01, 10): LPAR(OP) '('
[18](01, 10)-(01, 12): NAME(NAME) 's1'
[18](01, 12)-(01, 13): COMMA(OP) ','
[18](01, 14)-(01, 19): STRING(STRING) '"and"'
[18](01, 19)-(01, 20): COMMA(OP) ','
[18](01, 21)-(01, 23): NAME(NAME) 's2'
[18](01, 23)-(01, 24): COMMA(OP) ','
[18](01, 25)-(01, 39): STRING(STRING) '"are anagrams"'
[18](01, 39)-(01, 40): RPAR(OP) ')'
[18](01, 40)-(01, 41): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 04): NAME(NAME) 'else'
[19](01, 04)-(01, 05): COLON(OP) ':'
[19](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 04): INDENT(INDENT) '    '
[20](01, 04)-(01, 09): NAME(NAME) 'print'
[20](01, 09)-(01, 10): LPAR(OP) '('
[20](01, 10)-(01, 12): NAME(NAME) 's1'
[20](01, 12)-(01, 13): COMMA(OP) ','
[20](01, 14)-(01, 19): STRING(STRING) '"and"'
[20](01, 19)-(01, 20): COMMA(OP) ','
[20](01, 21)-(01, 23): NAME(NAME) 's2'
[20](01, 23)-(01, 24): COMMA(OP) ','
[20](01, 25)-(01, 43): STRING(STRING) '"are not anagrams"'
[20](01, 43)-(01, 44): RPAR(OP) ')'
[20](01, 44)-(01, 45): NEWLINE(NEWLINE)
[20](02, 00)-(02, 00): DEDENT(DEDENT)
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

