[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 12): NAME(NAME) 'is_prime'
[00](01, 12)-(01, 13): LPAR(OP) '('
[00](01, 13)-(01, 14): NAME(NAME) 'x'
[00](01, 14)-(01, 15): RPAR(OP) ')'
[00](01, 15)-(01, 16): COLON(OP) ':'
[00](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 17): NAME(NAME) 'prime_counter'
[01](01, 18)-(01, 19): EQUAL(OP) '='
[01](01, 20)-(01, 21): NUMBER(NUMBER) '0'
[01](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 06): NAME(NAME) 'if'
[02](01, 07)-(01, 10): NAME(NAME) 'not'
[02](01, 10)-(01, 11): LPAR(OP) '('
[02](01, 11)-(01, 12): NAME(NAME) 'x'
[02](01, 13)-(01, 14): GREATER(OP) '>'
[02](01, 15)-(01, 16): NUMBER(NUMBER) '1'
[02](01, 16)-(01, 17): RPAR(OP) ')'
[02](01, 17)-(01, 18): COLON(OP) ':'
[02](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 08): INDENT(INDENT) '        '
[03](01, 08)-(01, 14): NAME(NAME) 'return'
[03](01, 15)-(01, 20): NAME(NAME) 'False'
[03](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 07): NAME(NAME) 'for'
[04](01, 08)-(01, 09): NAME(NAME) 'i'
[04](01, 10)-(01, 12): NAME(NAME) 'in'
[04](01, 13)-(01, 18): NAME(NAME) 'range'
[04](01, 18)-(01, 19): LPAR(OP) '('
[04](01, 19)-(01, 20): NUMBER(NUMBER) '2'
[04](01, 20)-(01, 21): COMMA(OP) ','
[04](01, 22)-(01, 24): NUMBER(NUMBER) '10'
[04](01, 24)-(01, 25): RPAR(OP) ')'
[04](01, 25)-(01, 26): COLON(OP) ':'
[04](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 08): INDENT(INDENT) '        '
[05](01, 08)-(01, 10): NAME(NAME) 'if'
[05](01, 11)-(01, 12): NAME(NAME) 'x'
[05](01, 13)-(01, 14): PERCENT(OP) '%'
[05](01, 15)-(01, 16): NAME(NAME) 'i'
[05](01, 17)-(01, 19): EQEQUAL(OP) '=='
[05](01, 20)-(01, 21): NUMBER(NUMBER) '0'
[05](01, 21)-(01, 22): COLON(OP) ':'
[05](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 12): INDENT(INDENT) '            '
[06](01, 12)-(01, 14): NAME(NAME) 'if'
[06](01, 15)-(01, 16): NAME(NAME) 'x'
[06](01, 17)-(01, 19): EQEQUAL(OP) '=='
[06](01, 20)-(01, 21): NAME(NAME) 'i'
[06](01, 21)-(01, 22): COLON(OP) ':'
[06](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 16): INDENT(INDENT) '                '
[07](01, 16)-(01, 29): NAME(NAME) 'prime_counter'
[07](01, 30)-(01, 32): MINEQUAL(OP) '-='
[07](01, 33)-(01, 34): NUMBER(NUMBER) '1'
[07](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 12): INDENT(INDENT) '            '
[08](01, 12)-(01, 25): NAME(NAME) 'prime_counter'
[08](01, 26)-(01, 28): PLUSEQUAL(OP) '+='
[08](01, 29)-(01, 30): NUMBER(NUMBER) '1'
[08](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 06): NAME(NAME) 'if'
[09](01, 07)-(01, 20): NAME(NAME) 'prime_counter'
[09](01, 21)-(01, 23): EQEQUAL(OP) '=='
[09](01, 24)-(01, 25): NUMBER(NUMBER) '0'
[09](01, 25)-(01, 26): COLON(OP) ':'
[09](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 08): INDENT(INDENT) '        '
[10](01, 08)-(01, 14): NAME(NAME) 'return'
[10](01, 15)-(01, 19): NAME(NAME) 'True'
[10](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 04): INDENT(INDENT) '    '
[11](01, 04)-(01, 08): NAME(NAME) 'else'
[11](01, 08)-(01, 09): COLON(OP) ':'
[11](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 08): INDENT(INDENT) '        '
[12](01, 08)-(01, 14): NAME(NAME) 'return'
[12](01, 15)-(01, 20): NAME(NAME) 'False'
[12](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 01): NL(NL) '\n'
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 01): NL(NL) '\n'
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 03): NAME(NAME) 'def'
[15](01, 04)-(01, 19): NAME(NAME) 'all_primes_upto'
[15](01, 19)-(01, 20): LPAR(OP) '('
[15](01, 20)-(01, 21): NAME(NAME) 'y'
[15](01, 21)-(01, 22): RPAR(OP) ')'
[15](01, 22)-(01, 23): COLON(OP) ':'
[15](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 04): INDENT(INDENT) '    '
[16](01, 04)-(01, 07): NAME(NAME) 'for'
[16](01, 08)-(01, 09): NAME(NAME) 'i'
[16](01, 10)-(01, 12): NAME(NAME) 'in'
[16](01, 13)-(01, 18): NAME(NAME) 'range'
[16](01, 18)-(01, 19): LPAR(OP) '('
[16](01, 19)-(01, 20): NUMBER(NUMBER) '2'
[16](01, 20)-(01, 21): COMMA(OP) ','
[16](01, 22)-(01, 23): NAME(NAME) 'y'
[16](01, 23)-(01, 24): PLUS(OP) '+'
[16](01, 24)-(01, 25): NUMBER(NUMBER) '1'
[16](01, 25)-(01, 26): RPAR(OP) ')'
[16](01, 26)-(01, 27): COLON(OP) ':'
[16](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 08): INDENT(INDENT) '        '
[17](01, 08)-(01, 10): NAME(NAME) 'if'
[17](01, 11)-(01, 19): NAME(NAME) 'is_prime'
[17](01, 19)-(01, 20): LPAR(OP) '('
[17](01, 20)-(01, 21): NAME(NAME) 'i'
[17](01, 21)-(01, 22): RPAR(OP) ')'
[17](01, 22)-(01, 23): COLON(OP) ':'
[17](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 12): INDENT(INDENT) '            '
[18](01, 12)-(01, 17): NAME(NAME) 'print'
[18](01, 17)-(01, 18): LPAR(OP) '('
[18](01, 18)-(01, 19): NAME(NAME) 'i'
[18](01, 19)-(01, 20): RPAR(OP) ')'
[18](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 01): NL(NL) '\n'
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 01): NL(NL) '\n'
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 03): NAME(NAME) 'def'
[21](01, 04)-(01, 13): NAME(NAME) 'factorize'
[21](01, 13)-(01, 14): LPAR(OP) '('
[21](01, 14)-(01, 15): NAME(NAME) 'z'
[21](01, 15)-(01, 16): RPAR(OP) ')'
[21](01, 16)-(01, 17): COLON(OP) ':'
[21](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 04): INDENT(INDENT) '    '
[22](01, 04)-(01, 10): NAME(NAME) 'result'
[22](01, 11)-(01, 12): EQUAL(OP) '='
[22](01, 13)-(01, 14): NAME(NAME) 'z'
[22](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[22](02, 00)-(02, 00): DEDENT(DEDENT)
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[23](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[23](01, 00)-(01, 04): INDENT(INDENT) '    '
[23](01, 04)-(01, 09): NAME(NAME) 'while'
[23](01, 10)-(01, 14): NAME(NAME) 'True'
[23](01, 14)-(01, 15): COLON(OP) ':'
[23](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[23](02, 00)-(02, 00): DEDENT(DEDENT)
[23](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[24](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[24](01, 00)-(01, 08): INDENT(INDENT) '        '
[24](01, 08)-(01, 10): NAME(NAME) 'if'
[24](01, 11)-(01, 17): NAME(NAME) 'result'
[24](01, 18)-(01, 20): EQEQUAL(OP) '=='
[24](01, 21)-(01, 22): NUMBER(NUMBER) '1'
[24](01, 22)-(01, 23): COLON(OP) ':'
[24](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[24](02, 00)-(02, 00): DEDENT(DEDENT)
[24](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[25](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[25](01, 00)-(01, 12): INDENT(INDENT) '            '
[25](01, 12)-(01, 18): NAME(NAME) 'return'
[25](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[25](02, 00)-(02, 00): DEDENT(DEDENT)
[25](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[26](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[26](01, 00)-(01, 08): INDENT(INDENT) '        '
[26](01, 08)-(01, 10): NAME(NAME) 'if'
[26](01, 11)-(01, 19): NAME(NAME) 'is_prime'
[26](01, 19)-(01, 20): LPAR(OP) '('
[26](01, 20)-(01, 26): NAME(NAME) 'result'
[26](01, 26)-(01, 27): RPAR(OP) ')'
[26](01, 27)-(01, 28): COLON(OP) ':'
[26](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[26](02, 00)-(02, 00): DEDENT(DEDENT)
[26](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[27](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[27](01, 00)-(01, 12): INDENT(INDENT) '            '
[27](01, 12)-(01, 18): NAME(NAME) 'return'
[27](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[27](02, 00)-(02, 00): DEDENT(DEDENT)
[27](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[28](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[28](01, 00)-(01, 08): INDENT(INDENT) '        '
[28](01, 08)-(01, 12): NAME(NAME) 'else'
[28](01, 12)-(01, 13): COLON(OP) ':'
[28](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[28](02, 00)-(02, 00): DEDENT(DEDENT)
[28](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[29](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[29](01, 00)-(01, 12): INDENT(INDENT) '            '
[29](01, 12)-(01, 15): NAME(NAME) 'for'
[29](01, 16)-(01, 17): NAME(NAME) 'i'
[29](01, 18)-(01, 20): NAME(NAME) 'in'
[29](01, 21)-(01, 26): NAME(NAME) 'range'
[29](01, 26)-(01, 27): LPAR(OP) '('
[29](01, 27)-(01, 28): NUMBER(NUMBER) '2'
[29](01, 28)-(01, 29): COMMA(OP) ','
[29](01, 30)-(01, 36): NAME(NAME) 'result'
[29](01, 36)-(01, 37): RPAR(OP) ')'
[29](01, 37)-(01, 38): COLON(OP) ':'
[29](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[29](02, 00)-(02, 00): DEDENT(DEDENT)
[29](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[30](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[30](01, 00)-(01, 16): INDENT(INDENT) '                '
[30](01, 16)-(01, 18): NAME(NAME) 'if'
[30](01, 19)-(01, 27): NAME(NAME) 'is_prime'
[30](01, 27)-(01, 28): LPAR(OP) '('
[30](01, 28)-(01, 29): NAME(NAME) 'i'
[30](01, 29)-(01, 30): RPAR(OP) ')'
[30](01, 31)-(01, 34): NAME(NAME) 'and'
[30](01, 35)-(01, 36): LPAR(OP) '('
[30](01, 36)-(01, 42): NAME(NAME) 'result'
[30](01, 43)-(01, 44): PERCENT(OP) '%'
[30](01, 45)-(01, 46): NAME(NAME) 'i'
[30](01, 46)-(01, 47): RPAR(OP) ')'
[30](01, 48)-(01, 50): EQEQUAL(OP) '=='
[30](01, 51)-(01, 52): NUMBER(NUMBER) '0'
[30](01, 52)-(01, 53): COLON(OP) ':'
[30](01, 53)-(01, 54): NEWLINE(NEWLINE) '\n'
[30](02, 00)-(02, 00): DEDENT(DEDENT)
[30](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[31](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[31](01, 00)-(01, 20): INDENT(INDENT) '                    '
[31](01, 20)-(01, 25): NAME(NAME) 'print'
[31](01, 25)-(01, 26): LPAR(OP) '('
[31](01, 26)-(01, 27): NAME(NAME) 'i'
[31](01, 27)-(01, 28): RPAR(OP) ')'
[31](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[31](02, 00)-(02, 00): DEDENT(DEDENT)
[31](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[32](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[32](01, 00)-(01, 20): INDENT(INDENT) '                    '
[32](01, 20)-(01, 26): NAME(NAME) 'result'
[32](01, 27)-(01, 30): DOUBLESLASHEQUAL(OP) '//='
[32](01, 31)-(01, 32): NAME(NAME) 'i'
[32](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[32](02, 00)-(02, 00): DEDENT(DEDENT)
[32](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[33](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[33](01, 00)-(01, 20): INDENT(INDENT) '                    '
[33](01, 20)-(01, 25): NAME(NAME) 'print'
[33](01, 25)-(01, 26): LPAR(OP) '('
[33](01, 26)-(01, 32): NAME(NAME) 'result'
[33](01, 32)-(01, 33): RPAR(OP) ')'
[33](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[33](02, 00)-(02, 00): DEDENT(DEDENT)
[33](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[34](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[34](01, 00)-(01, 20): INDENT(INDENT) '                    '
[34](01, 20)-(01, 22): NAME(NAME) 'if'
[34](01, 23)-(01, 26): NAME(NAME) 'int'
[34](01, 26)-(01, 27): LPAR(OP) '('
[34](01, 27)-(01, 33): NAME(NAME) 'result'
[34](01, 33)-(01, 34): RPAR(OP) ')'
[34](01, 35)-(01, 37): EQEQUAL(OP) '=='
[34](01, 38)-(01, 41): NAME(NAME) 'int'
[34](01, 41)-(01, 42): LPAR(OP) '('
[34](01, 42)-(01, 43): NAME(NAME) 'i'
[34](01, 43)-(01, 44): RPAR(OP) ')'
[34](01, 44)-(01, 45): COLON(OP) ':'
[34](01, 45)-(01, 46): NEWLINE(NEWLINE) '\n'
[34](02, 00)-(02, 00): DEDENT(DEDENT)
[34](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[35](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[35](01, 00)-(01, 24): INDENT(INDENT) '                        '
[35](01, 24)-(01, 30): NAME(NAME) 'return'
[35](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[35](02, 00)-(02, 00): DEDENT(DEDENT)
[35](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[36](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[36](01, 00)-(01, 20): INDENT(INDENT) '                    '
[36](01, 20)-(01, 25): NAME(NAME) 'break'
[36](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[36](02, 00)-(02, 00): DEDENT(DEDENT)
[36](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[37](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[37](01, 00)-(01, 01): NL(NL) '\n'
[37](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[38](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[38](01, 00)-(01, 01): NL(NL) '\n'
[38](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[39](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[39](01, 00)-(01, 01): NL(NL) '\n'
[39](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[40](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[40](01, 00)-(01, 09): NAME(NAME) 'factorize'
[40](01, 09)-(01, 10): LPAR(OP) '('
[40](01, 10)-(01, 13): NUMBER(NUMBER) '126'
[40](01, 13)-(01, 14): RPAR(OP) ')'
[40](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[40](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[41](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[41](01, 00)-(01, 08): NAME(NAME) 'is_prime'
[41](01, 08)-(01, 09): LPAR(OP) '('
[41](01, 09)-(01, 11): NUMBER(NUMBER) '22'
[41](01, 11)-(01, 12): RPAR(OP) ')'
[41](01, 12)-(01, 13): NEWLINE(NEWLINE) '\n'
[41](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[42](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[42](01, 00)-(01, 15): NAME(NAME) 'all_primes_upto'
[42](01, 15)-(01, 16): LPAR(OP) '('
[42](01, 16)-(01, 18): NUMBER(NUMBER) '25'
[42](01, 18)-(01, 19): RPAR(OP) ')'
[42](01, 19)-(01, 20): NEWLINE(NEWLINE)
[42](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

