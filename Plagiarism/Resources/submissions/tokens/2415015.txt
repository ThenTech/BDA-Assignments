[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'DNA'
[00](01, 04)-(01, 05): EQUAL(OP) '='
[00](01, 06)-(01, 12): STRING(STRING) "'ACGT'"
[00](01, 12)-(01, 13): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 01): NL(NL) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 01): NL(NL) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 03): NAME(NAME) 'def'
[03](01, 04)-(01, 23): NAME(NAME) 'print_possibilities'
[03](01, 23)-(01, 24): LPAR(OP) '('
[03](01, 24)-(01, 25): NAME(NAME) 'n'
[03](01, 25)-(01, 26): COMMA(OP) ','
[03](01, 27)-(01, 31): NAME(NAME) 'base'
[03](01, 31)-(01, 32): COMMA(OP) ','
[03](01, 33)-(01, 39): NAME(NAME) 'prefix'
[03](01, 39)-(01, 40): RPAR(OP) ')'
[03](01, 40)-(01, 41): COLON(OP) ':'
[03](01, 41)-(01, 42): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 10): NAME(NAME) 'global'
[04](01, 11)-(01, 14): NAME(NAME) 'DNA'
[04](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 06): NAME(NAME) 'if'
[05](01, 07)-(01, 10): NAME(NAME) 'len'
[05](01, 10)-(01, 11): LPAR(OP) '('
[05](01, 11)-(01, 17): NAME(NAME) 'prefix'
[05](01, 17)-(01, 18): PLUS(OP) '+'
[05](01, 18)-(01, 22): NAME(NAME) 'base'
[05](01, 22)-(01, 23): RPAR(OP) ')'
[05](01, 24)-(01, 26): EQEQUAL(OP) '=='
[05](01, 27)-(01, 28): NAME(NAME) 'n'
[05](01, 28)-(01, 29): COLON(OP) ':'
[05](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 08): INDENT(INDENT) '        '
[06](01, 08)-(01, 13): NAME(NAME) 'print'
[06](01, 13)-(01, 14): LPAR(OP) '('
[06](01, 14)-(01, 20): NAME(NAME) 'prefix'
[06](01, 20)-(01, 21): PLUS(OP) '+'
[06](01, 21)-(01, 25): NAME(NAME) 'base'
[06](01, 25)-(01, 26): RPAR(OP) ')'
[06](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 04): INDENT(INDENT) '    '
[07](01, 04)-(01, 08): NAME(NAME) 'elif'
[07](01, 09)-(01, 12): NAME(NAME) 'len'
[07](01, 12)-(01, 13): LPAR(OP) '('
[07](01, 13)-(01, 19): NAME(NAME) 'prefix'
[07](01, 19)-(01, 20): PLUS(OP) '+'
[07](01, 20)-(01, 24): NAME(NAME) 'base'
[07](01, 24)-(01, 25): RPAR(OP) ')'
[07](01, 26)-(01, 27): GREATER(OP) '>'
[07](01, 28)-(01, 29): NAME(NAME) 'n'
[07](01, 29)-(01, 30): COLON(OP) ':'
[07](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 08): INDENT(INDENT) '        '
[08](01, 08)-(01, 14): NAME(NAME) 'return'
[08](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 08): NAME(NAME) 'else'
[09](01, 08)-(01, 09): COLON(OP) ':'
[09](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 08): INDENT(INDENT) '        '
[10](01, 08)-(01, 11): NAME(NAME) 'for'
[10](01, 12)-(01, 22): NAME(NAME) 'other_base'
[10](01, 23)-(01, 25): NAME(NAME) 'in'
[10](01, 26)-(01, 29): NAME(NAME) 'DNA'
[10](01, 29)-(01, 30): COLON(OP) ':'
[10](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 12): INDENT(INDENT) '            '
[11](01, 12)-(01, 31): NAME(NAME) 'print_possibilities'
[11](01, 31)-(01, 32): LPAR(OP) '('
[11](01, 32)-(01, 33): NAME(NAME) 'n'
[11](01, 33)-(01, 34): COMMA(OP) ','
[11](01, 35)-(01, 45): NAME(NAME) 'other_base'
[11](01, 45)-(01, 46): COMMA(OP) ','
[11](01, 47)-(01, 53): NAME(NAME) 'prefix'
[11](01, 53)-(01, 54): PLUS(OP) '+'
[11](01, 54)-(01, 58): NAME(NAME) 'base'
[11](01, 58)-(01, 59): RPAR(OP) ')'
[11](01, 59)-(01, 60): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 01): NL(NL) '\n'
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 01): NL(NL) '\n'
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 03): NAME(NAME) 'def'
[14](01, 04)-(01, 12): NAME(NAME) 'get_base'
[14](01, 12)-(01, 13): LPAR(OP) '('
[14](01, 13)-(01, 14): NAME(NAME) 'n'
[14](01, 14)-(01, 15): RPAR(OP) ')'
[14](01, 15)-(01, 16): COLON(OP) ':'
[14](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 04): INDENT(INDENT) '    '
[15](01, 04)-(01, 10): NAME(NAME) 'global'
[15](01, 11)-(01, 14): NAME(NAME) 'DNA'
[15](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 04): INDENT(INDENT) '    '
[16](01, 04)-(01, 07): NAME(NAME) 'for'
[16](01, 08)-(01, 12): NAME(NAME) 'base'
[16](01, 13)-(01, 15): NAME(NAME) 'in'
[16](01, 16)-(01, 19): NAME(NAME) 'DNA'
[16](01, 19)-(01, 20): COLON(OP) ':'
[16](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 08): INDENT(INDENT) '        '
[17](01, 08)-(01, 27): NAME(NAME) 'print_possibilities'
[17](01, 27)-(01, 28): LPAR(OP) '('
[17](01, 28)-(01, 29): NAME(NAME) 'n'
[17](01, 29)-(01, 30): COMMA(OP) ','
[17](01, 31)-(01, 35): NAME(NAME) 'base'
[17](01, 35)-(01, 36): COMMA(OP) ','
[17](01, 37)-(01, 39): STRING(STRING) '""'
[17](01, 39)-(01, 40): RPAR(OP) ')'
[17](01, 40)-(01, 41): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 01): NL(NL) '\n'
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 01): NL(NL) '\n'
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 01): NAME(NAME) 'n'
[20](01, 02)-(01, 03): EQUAL(OP) '='
[20](01, 04)-(01, 07): NAME(NAME) 'int'
[20](01, 07)-(01, 08): LPAR(OP) '('
[20](01, 08)-(01, 13): NAME(NAME) 'input'
[20](01, 13)-(01, 14): LPAR(OP) '('
[20](01, 14)-(01, 23): STRING(STRING) "'Count: '"
[20](01, 23)-(01, 24): RPAR(OP) ')'
[20](01, 24)-(01, 25): RPAR(OP) ')'
[20](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 08): NAME(NAME) 'get_base'
[21](01, 08)-(01, 09): LPAR(OP) '('
[21](01, 09)-(01, 10): NAME(NAME) 'n'
[21](01, 10)-(01, 11): RPAR(OP) ')'
[21](01, 11)-(01, 12): NEWLINE(NEWLINE)
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

