[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 22): COMMENT(COMMENT) '# write your code here'
[00](01, 22)-(01, 23): NL(NL) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 01): NL(NL) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 08): NAME(NAME) 'a_string'
[02](01, 09)-(01, 10): EQUAL(OP) '='
[02](01, 11)-(01, 16): NAME(NAME) 'input'
[02](01, 16)-(01, 17): LPAR(OP) '('
[02](01, 17)-(01, 37): STRING(STRING) '"Give me a string: "'
[02](01, 37)-(01, 38): RPAR(OP) ')'
[02](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 07): NAME(NAME) 'str_len'
[03](01, 08)-(01, 09): EQUAL(OP) '='
[03](01, 10)-(01, 13): NAME(NAME) 'len'
[03](01, 13)-(01, 14): LPAR(OP) '('
[03](01, 14)-(01, 22): NAME(NAME) 'a_string'
[03](01, 22)-(01, 23): RPAR(OP) ')'
[03](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 01): NL(NL) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 03): NAME(NAME) 'for'
[05](01, 04)-(01, 09): NAME(NAME) 'index'
[05](01, 10)-(01, 12): NAME(NAME) 'in'
[05](01, 13)-(01, 18): NAME(NAME) 'range'
[05](01, 18)-(01, 19): LPAR(OP) '('
[05](01, 19)-(01, 21): NUMBER(NUMBER) '26'
[05](01, 21)-(01, 22): RPAR(OP) ')'
[05](01, 22)-(01, 23): COLON(OP) ':'
[05](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 04)-(01, 34): COMMENT(COMMENT) "# ord / chr value of 'a' is 97"
[06](01, 34)-(01, 35): NL(NL) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 04)-(01, 55): COMMENT(COMMENT) '# a has an ORDER value of 97 or is the 97 character'
[07](01, 55)-(01, 56): NL(NL) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 04)-(01, 23): COMMENT(COMMENT) '# b: 98, c: 99, ...'
[08](01, 23)-(01, 24): NL(NL) '\n'
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 18): NAME(NAME) 'current_letter'
[09](01, 19)-(01, 20): EQUAL(OP) '='
[09](01, 21)-(01, 23): NUMBER(NUMBER) '97'
[09](01, 24)-(01, 25): PLUS(OP) '+'
[09](01, 26)-(01, 31): NAME(NAME) 'index'
[09](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 01): NL(NL) '\n'
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 04)-(01, 59): COMMENT(COMMENT) '# Holds the amount of the current letter in the string '
[11](01, 59)-(01, 60): NL(NL) '\n'
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 04): INDENT(INDENT) '    '
[12](01, 04)-(01, 10): NAME(NAME) 'amount'
[12](01, 11)-(01, 12): EQUAL(OP) '='
[12](01, 13)-(01, 14): NUMBER(NUMBER) '0'
[12](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 04): INDENT(INDENT) '    '
[13](01, 04)-(01, 07): NAME(NAME) 'for'
[13](01, 08)-(01, 09): NAME(NAME) 'x'
[13](01, 10)-(01, 12): NAME(NAME) 'in'
[13](01, 13)-(01, 18): NAME(NAME) 'range'
[13](01, 18)-(01, 19): LPAR(OP) '('
[13](01, 19)-(01, 26): NAME(NAME) 'str_len'
[13](01, 26)-(01, 27): RPAR(OP) ')'
[13](01, 27)-(01, 28): COLON(OP) ':'
[13](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 08)-(01, 83): COMMENT(COMMENT) '# Checks when the current letter == the current letter of the given string '
[14](01, 83)-(01, 84): NL(NL) '\n'
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 08)-(01, 89): COMMENT(COMMENT) '# This will add 1 to amount every time a letter in the string is a current letter'
[15](01, 89)-(01, 90): NL(NL) '\n'
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 08): INDENT(INDENT) '        '
[16](01, 08)-(01, 10): NAME(NAME) 'if'
[16](01, 11)-(01, 25): NAME(NAME) 'current_letter'
[16](01, 26)-(01, 28): EQEQUAL(OP) '=='
[16](01, 29)-(01, 32): NAME(NAME) 'ord'
[16](01, 32)-(01, 33): LPAR(OP) '('
[16](01, 34)-(01, 42): NAME(NAME) 'a_string'
[16](01, 42)-(01, 43): LSQB(OP) '['
[16](01, 43)-(01, 44): NAME(NAME) 'x'
[16](01, 44)-(01, 45): RSQB(OP) ']'
[16](01, 46)-(01, 47): RPAR(OP) ')'
[16](01, 47)-(01, 48): COLON(OP) ':'
[16](01, 48)-(01, 49): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 12): INDENT(INDENT) '            '
[17](01, 12)-(01, 18): NAME(NAME) 'amount'
[17](01, 19)-(01, 21): PLUSEQUAL(OP) '+='
[17](01, 22)-(01, 23): NUMBER(NUMBER) '1'
[17](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 01): NL(NL) '\n'
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 04): INDENT(INDENT) '    '
[19](01, 04)-(01, 09): NAME(NAME) 'print'
[19](01, 09)-(01, 10): LPAR(OP) '('
[19](01, 10)-(01, 13): NAME(NAME) 'chr'
[19](01, 13)-(01, 14): LPAR(OP) '('
[19](01, 14)-(01, 28): NAME(NAME) 'current_letter'
[19](01, 28)-(01, 29): RPAR(OP) ')'
[19](01, 29)-(01, 30): COMMA(OP) ','
[19](01, 31)-(01, 35): STRING(STRING) '": "'
[19](01, 35)-(01, 36): COMMA(OP) ','
[19](01, 37)-(01, 43): NAME(NAME) 'amount'
[19](01, 43)-(01, 44): COMMA(OP) ','
[19](01, 45)-(01, 48): NAME(NAME) 'sep'
[19](01, 48)-(01, 49): EQUAL(OP) '='
[19](01, 49)-(01, 51): STRING(STRING) '""'
[19](01, 51)-(01, 52): RPAR(OP) ')'
[19](01, 52)-(01, 53): NEWLINE(NEWLINE)
[19](02, 00)-(02, 00): DEDENT(DEDENT)
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

