[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 04): NAME(NAME) 'word'
[00](01, 05)-(01, 06): EQUAL(OP) '='
[00](01, 07)-(01, 12): NAME(NAME) 'input'
[00](01, 12)-(01, 13): LPAR(OP) '('
[00](01, 13)-(01, 14): RPAR(OP) ')'
[00](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 01): NAME(NAME) 'i'
[01](01, 02)-(01, 03): EQUAL(OP) '='
[01](01, 04)-(01, 05): NUMBER(NUMBER) '0'
[01](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 05): NAME(NAME) 'while'
[02](01, 06)-(01, 07): NAME(NAME) 'i'
[02](01, 08)-(01, 09): LESS(OP) '<'
[02](01, 10)-(01, 13): NAME(NAME) 'len'
[02](01, 13)-(01, 14): LPAR(OP) '('
[02](01, 14)-(01, 18): NAME(NAME) 'word'
[02](01, 18)-(01, 19): RPAR(OP) ')'
[02](01, 20)-(01, 23): NAME(NAME) 'and'
[02](01, 24)-(01, 28): NAME(NAME) 'word'
[02](01, 28)-(01, 29): LSQB(OP) '['
[02](01, 29)-(01, 30): NAME(NAME) 'i'
[02](01, 30)-(01, 31): RSQB(OP) ']'
[02](01, 32)-(01, 34): EQEQUAL(OP) '=='
[02](01, 35)-(01, 39): NAME(NAME) 'word'
[02](01, 39)-(01, 40): LSQB(OP) '['
[02](01, 40)-(01, 43): NAME(NAME) 'len'
[02](01, 43)-(01, 44): LPAR(OP) '('
[02](01, 44)-(01, 48): NAME(NAME) 'word'
[02](01, 48)-(01, 49): RPAR(OP) ')'
[02](01, 50)-(01, 51): MINUS(OP) '-'
[02](01, 52)-(01, 53): NUMBER(NUMBER) '1'
[02](01, 54)-(01, 55): MINUS(OP) '-'
[02](01, 56)-(01, 57): NAME(NAME) 'i'
[02](01, 57)-(01, 58): RSQB(OP) ']'
[02](01, 58)-(01, 59): COLON(OP) ':'
[02](01, 59)-(01, 60): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 05): NAME(NAME) 'i'
[03](01, 06)-(01, 08): PLUSEQUAL(OP) '+='
[03](01, 09)-(01, 10): NUMBER(NUMBER) '1'
[03](01, 10)-(01, 11): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 02): NAME(NAME) 'if'
[04](01, 03)-(01, 04): NAME(NAME) 'i'
[04](01, 05)-(01, 07): EQEQUAL(OP) '=='
[04](01, 08)-(01, 11): NAME(NAME) 'len'
[04](01, 11)-(01, 12): LPAR(OP) '('
[04](01, 12)-(01, 16): NAME(NAME) 'word'
[04](01, 16)-(01, 17): RPAR(OP) ')'
[04](01, 17)-(01, 18): COLON(OP) ':'
[04](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 09): NAME(NAME) 'print'
[05](01, 09)-(01, 10): LPAR(OP) '('
[05](01, 10)-(01, 14): NAME(NAME) 'word'
[05](01, 15)-(01, 16): PLUS(OP) '+'
[05](01, 17)-(01, 35): STRING(STRING) '" is a palindrome"'
[05](01, 35)-(01, 36): RPAR(OP) ')'
[05](01, 36)-(01, 37): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 04): NAME(NAME) 'else'
[06](01, 04)-(01, 05): COLON(OP) ':'
[06](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 04): INDENT(INDENT) '    '
[07](01, 04)-(01, 09): NAME(NAME) 'print'
[07](01, 09)-(01, 10): LPAR(OP) '('
[07](01, 10)-(01, 14): NAME(NAME) 'word'
[07](01, 15)-(01, 16): PLUS(OP) '+'
[07](01, 17)-(01, 39): STRING(STRING) '" is not a palindrome"'
[07](01, 39)-(01, 40): RPAR(OP) ')'
[07](01, 40)-(01, 41): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 00): ENDMARKER(ENDMARKER)

