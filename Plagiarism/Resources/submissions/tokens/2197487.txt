[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 11): NAME(NAME) 'punctuation'
[00](01, 12)-(01, 13): EQUAL(OP) '='
[00](01, 14)-(01, 51): STRING(STRING) '"!\\"#$%&\'()*+,-./:;<=>?@[\\\\]^_`{|}~ "'
[00](01, 51)-(01, 52): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 03): NAME(NAME) 'def'
[01](01, 04)-(01, 26): NAME(NAME) 'is_palindrome_sentence'
[01](01, 26)-(01, 27): LPAR(OP) '('
[01](01, 27)-(01, 35): NAME(NAME) 'sentence'
[01](01, 35)-(01, 36): RPAR(OP) ')'
[01](01, 36)-(01, 37): COLON(OP) ':'
[01](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 13): NAME(NAME) 's_without'
[02](01, 14)-(01, 15): EQUAL(OP) '='
[02](01, 16)-(01, 18): STRING(STRING) '""'
[02](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 07): NAME(NAME) 'for'
[03](01, 08)-(01, 14): NAME(NAME) 'letter'
[03](01, 15)-(01, 17): NAME(NAME) 'in'
[03](01, 18)-(01, 26): NAME(NAME) 'sentence'
[03](01, 26)-(01, 27): COLON(OP) ':'
[03](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 08): INDENT(INDENT) '        '
[04](01, 08)-(01, 10): NAME(NAME) 'if'
[04](01, 11)-(01, 17): NAME(NAME) 'letter'
[04](01, 18)-(01, 21): NAME(NAME) 'not'
[04](01, 22)-(01, 24): NAME(NAME) 'in'
[04](01, 25)-(01, 36): NAME(NAME) 'punctuation'
[04](01, 36)-(01, 37): COLON(OP) ':'
[04](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 12): INDENT(INDENT) '            '
[05](01, 12)-(01, 21): NAME(NAME) 's_without'
[05](01, 22)-(01, 24): PLUSEQUAL(OP) '+='
[05](01, 25)-(01, 31): NAME(NAME) 'letter'
[05](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 04): INDENT(INDENT) '    '
[06](01, 04)-(01, 10): NAME(NAME) 'return'
[06](01, 11)-(01, 20): NAME(NAME) 's_without'
[06](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 02): NAME(NAME) 'pq'
[07](01, 03)-(01, 04): EQUAL(OP) '='
[07](01, 05)-(01, 06): NUMBER(NUMBER) '0'
[07](01, 06)-(01, 07): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 02): NAME(NAME) 'pp'
[08](01, 03)-(01, 04): EQUAL(OP) '='
[08](01, 05)-(01, 27): NAME(NAME) 'is_palindrome_sentence'
[08](01, 27)-(01, 28): LPAR(OP) '('
[08](01, 28)-(01, 30): STRING(STRING) '""'
[08](01, 30)-(01, 31): RPAR(OP) ')'
[08](01, 31)-(01, 32): DOT(OP) '.'
[08](01, 32)-(01, 37): NAME(NAME) 'upper'
[08](01, 37)-(01, 38): LPAR(OP) '('
[08](01, 38)-(01, 39): RPAR(OP) ')'
[08](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 02): NAME(NAME) 'qp'
[09](01, 03)-(01, 04): EQUAL(OP) '='
[09](01, 05)-(01, 27): NAME(NAME) 'is_palindrome_sentence'
[09](01, 27)-(01, 28): LPAR(OP) '('
[09](01, 28)-(01, 30): STRING(STRING) '""'
[09](01, 30)-(01, 31): RPAR(OP) ')'
[09](01, 31)-(01, 32): DOT(OP) '.'
[09](01, 32)-(01, 37): NAME(NAME) 'upper'
[09](01, 37)-(01, 38): LPAR(OP) '('
[09](01, 38)-(01, 39): RPAR(OP) ')'
[09](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 03): NAME(NAME) 'for'
[10](01, 04)-(01, 11): NAME(NAME) 'reverse'
[10](01, 12)-(01, 14): NAME(NAME) 'in'
[10](01, 15)-(01, 20): NAME(NAME) 'range'
[10](01, 20)-(01, 21): LPAR(OP) '('
[10](01, 21)-(01, 24): NAME(NAME) 'len'
[10](01, 24)-(01, 25): LPAR(OP) '('
[10](01, 25)-(01, 27): NAME(NAME) 'qp'
[10](01, 27)-(01, 28): RPAR(OP) ')'
[10](01, 28)-(01, 29): RPAR(OP) ')'
[10](01, 29)-(01, 30): COLON(OP) ':'
[10](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 04): INDENT(INDENT) '    '
[11](01, 04)-(01, 06): NAME(NAME) 'pq'
[11](01, 06)-(01, 07): EQUAL(OP) '='
[11](01, 08)-(01, 10): NAME(NAME) 'qp'
[11](01, 10)-(01, 11): LSQB(OP) '['
[11](01, 11)-(01, 14): NAME(NAME) 'len'
[11](01, 14)-(01, 15): LPAR(OP) '('
[11](01, 15)-(01, 17): NAME(NAME) 'qp'
[11](01, 17)-(01, 18): RPAR(OP) ')'
[11](01, 18)-(01, 19): MINUS(OP) '-'
[11](01, 19)-(01, 20): NUMBER(NUMBER) '1'
[11](01, 20)-(01, 21): MINUS(OP) '-'
[11](01, 21)-(01, 28): NAME(NAME) 'reverse'
[11](01, 28)-(01, 29): RSQB(OP) ']'
[11](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 03): NAME(NAME) 'def'
[12](01, 04)-(01, 10): NAME(NAME) 'gelijk'
[12](01, 10)-(01, 11): LPAR(OP) '('
[12](01, 11)-(01, 13): NAME(NAME) 'pp'
[12](01, 13)-(01, 14): COMMA(OP) ','
[12](01, 14)-(01, 16): NAME(NAME) 'qp'
[12](01, 16)-(01, 17): RPAR(OP) ')'
[12](01, 17)-(01, 18): COLON(OP) ':'
[12](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 04): INDENT(INDENT) '    '
[13](01, 04)-(01, 06): NAME(NAME) 'if'
[13](01, 07)-(01, 09): NAME(NAME) 'pp'
[13](01, 10)-(01, 12): EQEQUAL(OP) '=='
[13](01, 13)-(01, 15): NAME(NAME) 'pq'
[13](01, 15)-(01, 16): COLON(OP) ':'
[13](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 08): INDENT(INDENT) '        '
[14](01, 08)-(01, 14): NAME(NAME) 'return'
[14](01, 15)-(01, 19): NAME(NAME) 'True'
[14](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 04): INDENT(INDENT) '    '
[15](01, 04)-(01, 08): NAME(NAME) 'else'
[15](01, 08)-(01, 09): COLON(OP) ':'
[15](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 08): INDENT(INDENT) '        '
[16](01, 08)-(01, 14): NAME(NAME) 'return'
[16](01, 15)-(01, 20): NAME(NAME) 'False'
[16](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 04)-(01, 05): NL(NL) '\n'
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

