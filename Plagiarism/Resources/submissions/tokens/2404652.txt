[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'dna'
[00](01, 04)-(01, 05): EQUAL(OP) '='
[00](01, 06)-(01, 07): LSQB(OP) '['
[00](01, 07)-(01, 10): STRING(STRING) '"A"'
[00](01, 10)-(01, 11): COMMA(OP) ','
[00](01, 12)-(01, 15): STRING(STRING) '"C"'
[00](01, 15)-(01, 16): COMMA(OP) ','
[00](01, 17)-(01, 20): STRING(STRING) '"G"'
[00](01, 20)-(01, 21): COMMA(OP) ','
[00](01, 22)-(01, 25): STRING(STRING) '"T"'
[00](01, 25)-(01, 26): RSQB(OP) ']'
[00](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 05): NAME(NAME) 'count'
[01](01, 06)-(01, 07): EQUAL(OP) '='
[01](01, 08)-(01, 09): NUMBER(NUMBER) '0'
[01](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 01): NAME(NAME) 'x'
[02](01, 02)-(01, 03): EQUAL(OP) '='
[02](01, 04)-(01, 05): NUMBER(NUMBER) '0'
[02](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 06): NAME(NAME) 'number'
[03](01, 07)-(01, 08): EQUAL(OP) '='
[03](01, 09)-(01, 12): NAME(NAME) 'int'
[03](01, 12)-(01, 13): LPAR(OP) '('
[03](01, 13)-(01, 18): NAME(NAME) 'input'
[03](01, 18)-(01, 19): LPAR(OP) '('
[03](01, 19)-(01, 24): STRING(STRING) '":  "'
[03](01, 24)-(01, 25): RPAR(OP) ')'
[03](01, 25)-(01, 26): RPAR(OP) ')'
[03](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 01): NL(NL) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 01): NL(NL) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 03): NAME(NAME) 'def'
[06](01, 04)-(01, 16): NAME(NAME) 'combinations'
[06](01, 16)-(01, 17): LPAR(OP) '('
[06](01, 17)-(01, 18): NAME(NAME) 'n'
[06](01, 18)-(01, 19): RPAR(OP) ')'
[06](01, 19)-(01, 20): COLON(OP) ':'
[06](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 04): INDENT(INDENT) '    '
[07](01, 04)-(01, 10): NAME(NAME) 'global'
[07](01, 11)-(01, 14): NAME(NAME) 'dna'
[07](01, 14)-(01, 15): COMMA(OP) ','
[07](01, 16)-(01, 21): NAME(NAME) 'count'
[07](01, 21)-(01, 22): COMMA(OP) ','
[07](01, 23)-(01, 29): NAME(NAME) 'number'
[07](01, 29)-(01, 30): COMMA(OP) ','
[07](01, 31)-(01, 32): NAME(NAME) 'x'
[07](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 04): INDENT(INDENT) '    '
[08](01, 04)-(01, 06): NAME(NAME) 'if'
[08](01, 07)-(01, 12): NAME(NAME) 'count'
[08](01, 13)-(01, 15): EQEQUAL(OP) '=='
[08](01, 16)-(01, 22): NAME(NAME) 'number'
[08](01, 23)-(01, 25): DOUBLESTAR(OP) '**'
[08](01, 26)-(01, 29): NAME(NAME) 'len'
[08](01, 29)-(01, 30): LPAR(OP) '('
[08](01, 30)-(01, 33): NAME(NAME) 'dna'
[08](01, 33)-(01, 34): RPAR(OP) ')'
[08](01, 34)-(01, 35): COLON(OP) ':'
[08](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 08): INDENT(INDENT) '        '
[09](01, 08)-(01, 14): NAME(NAME) 'return'
[09](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 04): INDENT(INDENT) '    '
[10](01, 04)-(01, 06): NAME(NAME) 'if'
[10](01, 07)-(01, 08): NAME(NAME) 'n'
[10](01, 09)-(01, 11): EQEQUAL(OP) '=='
[10](01, 12)-(01, 15): NAME(NAME) 'len'
[10](01, 15)-(01, 16): LPAR(OP) '('
[10](01, 16)-(01, 19): NAME(NAME) 'dna'
[10](01, 19)-(01, 20): RPAR(OP) ')'
[10](01, 20)-(01, 21): COLON(OP) ':'
[10](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 08): INDENT(INDENT) '        '
[11](01, 08)-(01, 09): NAME(NAME) 'n'
[11](01, 10)-(01, 11): EQUAL(OP) '='
[11](01, 12)-(01, 13): NUMBER(NUMBER) '0'
[11](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 08): INDENT(INDENT) '        '
[12](01, 08)-(01, 09): NAME(NAME) 'x'
[12](01, 10)-(01, 12): PLUSEQUAL(OP) '+='
[12](01, 13)-(01, 14): NUMBER(NUMBER) '1'
[12](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 04): INDENT(INDENT) '    '
[13](01, 04)-(01, 09): NAME(NAME) 'print'
[13](01, 09)-(01, 10): LPAR(OP) '('
[13](01, 10)-(01, 13): NAME(NAME) 'dna'
[13](01, 13)-(01, 14): LSQB(OP) '['
[13](01, 14)-(01, 15): NAME(NAME) 'x'
[13](01, 15)-(01, 16): RSQB(OP) ']'
[13](01, 16)-(01, 17): COMMA(OP) ','
[13](01, 18)-(01, 21): NAME(NAME) 'dna'
[13](01, 21)-(01, 22): LSQB(OP) '['
[13](01, 22)-(01, 23): NAME(NAME) 'n'
[13](01, 23)-(01, 24): RSQB(OP) ']'
[13](01, 24)-(01, 25): COMMA(OP) ','
[13](01, 26)-(01, 29): NAME(NAME) 'sep'
[13](01, 29)-(01, 30): EQUAL(OP) '='
[13](01, 30)-(01, 32): STRING(STRING) '""'
[13](01, 32)-(01, 33): RPAR(OP) ')'
[13](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 04): INDENT(INDENT) '    '
[14](01, 04)-(01, 09): NAME(NAME) 'count'
[14](01, 10)-(01, 12): PLUSEQUAL(OP) '+='
[14](01, 13)-(01, 14): NUMBER(NUMBER) '1'
[14](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 04): INDENT(INDENT) '    '
[15](01, 04)-(01, 16): NAME(NAME) 'combinations'
[15](01, 16)-(01, 17): LPAR(OP) '('
[15](01, 17)-(01, 18): NAME(NAME) 'n'
[15](01, 19)-(01, 20): PLUS(OP) '+'
[15](01, 21)-(01, 22): NUMBER(NUMBER) '1'
[15](01, 22)-(01, 23): RPAR(OP) ')'
[15](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 01): NL(NL) '\n'
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 01): NL(NL) '\n'
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 12): NAME(NAME) 'combinations'
[18](01, 12)-(01, 13): LPAR(OP) '('
[18](01, 13)-(01, 14): NUMBER(NUMBER) '0'
[18](01, 14)-(01, 15): RPAR(OP) ')'
[18](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

