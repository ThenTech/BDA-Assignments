[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 10): NAME(NAME) 'encode'
[00](01, 10)-(01, 11): LPAR(OP) '('
[00](01, 11)-(01, 20): NAME(NAME) 'minefield'
[00](01, 20)-(01, 21): RPAR(OP) ')'
[00](01, 21)-(01, 22): COLON(OP) ':'
[00](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 04)-(01, 48): COMMENT(COMMENT) '#indexen van bommen en lege vakjes groeperen'
[01](01, 48)-(01, 49): NL(NL) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 10): NAME(NAME) 'bommen'
[02](01, 11)-(01, 12): EQUAL(OP) '='
[02](01, 13)-(01, 17): NAME(NAME) 'list'
[02](01, 17)-(01, 18): LPAR(OP) '('
[02](01, 18)-(01, 19): RPAR(OP) ')'
[02](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 08): NAME(NAME) 'leeg'
[03](01, 09)-(01, 10): EQUAL(OP) '='
[03](01, 11)-(01, 15): NAME(NAME) 'list'
[03](01, 15)-(01, 16): LPAR(OP) '('
[03](01, 16)-(01, 17): RPAR(OP) ')'
[03](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 09): NAME(NAME) 'index'
[04](01, 10)-(01, 11): EQUAL(OP) '='
[04](01, 12)-(01, 13): NUMBER(NUMBER) '0'
[04](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 07): NAME(NAME) 'for'
[05](01, 08)-(01, 09): NAME(NAME) 'i'
[05](01, 10)-(01, 12): NAME(NAME) 'in'
[05](01, 13)-(01, 22): NAME(NAME) 'minefield'
[05](01, 22)-(01, 23): COLON(OP) ':'
[05](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 08): INDENT(INDENT) '        '
[06](01, 08)-(01, 10): NAME(NAME) 'if'
[06](01, 11)-(01, 12): NAME(NAME) 'i'
[06](01, 13)-(01, 15): EQEQUAL(OP) '=='
[06](01, 16)-(01, 19): STRING(STRING) '"X"'
[06](01, 19)-(01, 20): COLON(OP) ':'
[06](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 12): INDENT(INDENT) '            '
[07](01, 12)-(01, 18): NAME(NAME) 'bommen'
[07](01, 18)-(01, 19): DOT(OP) '.'
[07](01, 19)-(01, 25): NAME(NAME) 'append'
[07](01, 25)-(01, 26): LPAR(OP) '('
[07](01, 26)-(01, 31): NAME(NAME) 'index'
[07](01, 31)-(01, 32): RPAR(OP) ')'
[07](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 12): INDENT(INDENT) '            '
[08](01, 12)-(01, 17): NAME(NAME) 'index'
[08](01, 18)-(01, 20): PLUSEQUAL(OP) '+='
[08](01, 21)-(01, 22): NUMBER(NUMBER) '1'
[08](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 08): INDENT(INDENT) '        '
[09](01, 08)-(01, 12): NAME(NAME) 'else'
[09](01, 12)-(01, 13): COLON(OP) ':'
[09](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 12): INDENT(INDENT) '            '
[10](01, 12)-(01, 16): NAME(NAME) 'leeg'
[10](01, 16)-(01, 17): DOT(OP) '.'
[10](01, 17)-(01, 23): NAME(NAME) 'append'
[10](01, 23)-(01, 24): LPAR(OP) '('
[10](01, 24)-(01, 29): NAME(NAME) 'index'
[10](01, 29)-(01, 30): RPAR(OP) ')'
[10](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 12): INDENT(INDENT) '            '
[11](01, 12)-(01, 17): NAME(NAME) 'index'
[11](01, 18)-(01, 20): PLUSEQUAL(OP) '+='
[11](01, 21)-(01, 22): NUMBER(NUMBER) '1'
[11](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 01): NL(NL) '\n'
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 04)-(01, 17): COMMENT(COMMENT) '#string maken'
[13](01, 17)-(01, 18): NL(NL) '\n'
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 04): INDENT(INDENT) '    '
[14](01, 04)-(01, 10): NAME(NAME) 'string'
[14](01, 11)-(01, 12): EQUAL(OP) '='
[14](01, 13)-(01, 15): STRING(STRING) '""'
[14](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 04): INDENT(INDENT) '    '
[15](01, 04)-(01, 07): NAME(NAME) 'for'
[15](01, 08)-(01, 09): NAME(NAME) 'i'
[15](01, 10)-(01, 12): NAME(NAME) 'in'
[15](01, 13)-(01, 18): NAME(NAME) 'range'
[15](01, 18)-(01, 19): LPAR(OP) '('
[15](01, 19)-(01, 22): NAME(NAME) 'len'
[15](01, 22)-(01, 23): LPAR(OP) '('
[15](01, 23)-(01, 32): NAME(NAME) 'minefield'
[15](01, 32)-(01, 33): RPAR(OP) ')'
[15](01, 33)-(01, 34): RPAR(OP) ')'
[15](01, 34)-(01, 35): COLON(OP) ':'
[15](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 08): INDENT(INDENT) '        '
[16](01, 08)-(01, 27): NAME(NAME) 'toe_te_voegen_getal'
[16](01, 28)-(01, 29): EQUAL(OP) '='
[16](01, 30)-(01, 31): NUMBER(NUMBER) '0'
[16](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 08): INDENT(INDENT) '        '
[17](01, 08)-(01, 10): NAME(NAME) 'if'
[17](01, 11)-(01, 12): LPAR(OP) '('
[17](01, 12)-(01, 13): NAME(NAME) 'i'
[17](01, 13)-(01, 14): MINUS(OP) '-'
[17](01, 14)-(01, 15): NUMBER(NUMBER) '1'
[17](01, 15)-(01, 16): RPAR(OP) ')'
[17](01, 17)-(01, 19): NAME(NAME) 'in'
[17](01, 20)-(01, 25): NAME(NAME) 'range'
[17](01, 25)-(01, 26): LPAR(OP) '('
[17](01, 26)-(01, 29): NAME(NAME) 'len'
[17](01, 29)-(01, 30): LPAR(OP) '('
[17](01, 30)-(01, 39): NAME(NAME) 'minefield'
[17](01, 39)-(01, 40): RPAR(OP) ')'
[17](01, 40)-(01, 41): RPAR(OP) ')'
[17](01, 42)-(01, 45): NAME(NAME) 'and'
[17](01, 46)-(01, 47): LPAR(OP) '('
[17](01, 47)-(01, 48): NAME(NAME) 'i'
[17](01, 48)-(01, 49): MINUS(OP) '-'
[17](01, 49)-(01, 50): NUMBER(NUMBER) '1'
[17](01, 50)-(01, 51): RPAR(OP) ')'
[17](01, 52)-(01, 54): NAME(NAME) 'in'
[17](01, 55)-(01, 61): NAME(NAME) 'bommen'
[17](01, 61)-(01, 62): COLON(OP) ':'
[17](01, 62)-(01, 63): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 12): INDENT(INDENT) '            '
[18](01, 12)-(01, 31): NAME(NAME) 'toe_te_voegen_getal'
[18](01, 32)-(01, 34): PLUSEQUAL(OP) '+='
[18](01, 35)-(01, 36): NUMBER(NUMBER) '1'
[18](01, 36)-(01, 37): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 08): INDENT(INDENT) '        '
[19](01, 08)-(01, 10): NAME(NAME) 'if'
[19](01, 11)-(01, 12): LPAR(OP) '('
[19](01, 12)-(01, 13): NAME(NAME) 'i'
[19](01, 13)-(01, 14): PLUS(OP) '+'
[19](01, 14)-(01, 15): NUMBER(NUMBER) '1'
[19](01, 15)-(01, 16): RPAR(OP) ')'
[19](01, 17)-(01, 19): NAME(NAME) 'in'
[19](01, 20)-(01, 25): NAME(NAME) 'range'
[19](01, 25)-(01, 26): LPAR(OP) '('
[19](01, 26)-(01, 29): NAME(NAME) 'len'
[19](01, 29)-(01, 30): LPAR(OP) '('
[19](01, 30)-(01, 39): NAME(NAME) 'minefield'
[19](01, 39)-(01, 40): RPAR(OP) ')'
[19](01, 40)-(01, 41): RPAR(OP) ')'
[19](01, 42)-(01, 45): NAME(NAME) 'and'
[19](01, 46)-(01, 47): LPAR(OP) '('
[19](01, 47)-(01, 48): NAME(NAME) 'i'
[19](01, 48)-(01, 49): PLUS(OP) '+'
[19](01, 49)-(01, 50): NUMBER(NUMBER) '1'
[19](01, 50)-(01, 51): RPAR(OP) ')'
[19](01, 52)-(01, 54): NAME(NAME) 'in'
[19](01, 55)-(01, 61): NAME(NAME) 'bommen'
[19](01, 61)-(01, 62): COLON(OP) ':'
[19](01, 62)-(01, 63): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): DEDENT(DEDENT)
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 12): INDENT(INDENT) '            '
[20](01, 12)-(01, 31): NAME(NAME) 'toe_te_voegen_getal'
[20](01, 32)-(01, 34): PLUSEQUAL(OP) '+='
[20](01, 35)-(01, 36): NUMBER(NUMBER) '1'
[20](01, 36)-(01, 37): NEWLINE(NEWLINE) '\n'
[20](02, 00)-(02, 00): DEDENT(DEDENT)
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 08): INDENT(INDENT) '        '
[21](01, 08)-(01, 14): NAME(NAME) 'string'
[21](01, 15)-(01, 17): PLUSEQUAL(OP) '+='
[21](01, 18)-(01, 21): NAME(NAME) 'str'
[21](01, 21)-(01, 22): LPAR(OP) '('
[21](01, 22)-(01, 41): NAME(NAME) 'toe_te_voegen_getal'
[21](01, 41)-(01, 42): RPAR(OP) ')'
[21](01, 42)-(01, 43): NEWLINE(NEWLINE) '\n'
[21](02, 00)-(02, 00): DEDENT(DEDENT)
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 04): INDENT(INDENT) '    '
[22](01, 04)-(01, 10): NAME(NAME) 'return'
[22](01, 11)-(01, 17): NAME(NAME) 'string'
[22](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[22](02, 00)-(02, 00): DEDENT(DEDENT)
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[23](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[23](01, 00)-(01, 01): NL(NL) '\n'
[23](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[24](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[24](01, 00)-(01, 01): NL(NL) '\n'
[24](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[25](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[25](01, 00)-(01, 03): NAME(NAME) 'def'
[25](01, 04)-(01, 10): NAME(NAME) 'decode'
[25](01, 10)-(01, 11): LPAR(OP) '('
[25](01, 11)-(01, 17): NAME(NAME) 'string'
[25](01, 17)-(01, 18): RPAR(OP) ')'
[25](01, 18)-(01, 19): COLON(OP) ':'
[25](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[25](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[26](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[26](01, 00)-(01, 04): INDENT(INDENT) '    '
[26](01, 04)-(01, 08): NAME(NAME) 'pass'
[26](01, 08)-(01, 09): NEWLINE(NEWLINE)
[26](02, 00)-(02, 00): DEDENT(DEDENT)
[26](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

