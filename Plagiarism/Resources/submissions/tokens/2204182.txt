[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 10): NAME(NAME) 'encode'
[00](01, 10)-(01, 11): LPAR(OP) '('
[00](01, 11)-(01, 12): NAME(NAME) 's'
[00](01, 12)-(01, 13): RPAR(OP) ')'
[00](01, 13)-(01, 14): COLON(OP) ':'
[00](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 10): NAME(NAME) 'lengte'
[01](01, 11)-(01, 12): EQUAL(OP) '='
[01](01, 13)-(01, 16): NAME(NAME) 'len'
[01](01, 16)-(01, 17): LPAR(OP) '('
[01](01, 17)-(01, 18): NAME(NAME) 's'
[01](01, 18)-(01, 19): RPAR(OP) ')'
[01](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 07): NAME(NAME) 'new'
[02](01, 08)-(01, 09): EQUAL(OP) '='
[02](01, 10)-(01, 12): STRING(STRING) '""'
[02](01, 12)-(01, 13): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 05): NAME(NAME) 'i'
[03](01, 06)-(01, 07): EQUAL(OP) '='
[03](01, 08)-(01, 09): NUMBER(NUMBER) '1'
[03](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 10): NAME(NAME) 'teller'
[04](01, 11)-(01, 12): EQUAL(OP) '='
[04](01, 13)-(01, 14): NUMBER(NUMBER) '0'
[04](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 06): NAME(NAME) 'if'
[05](01, 07)-(01, 13): NAME(NAME) 'lengte'
[05](01, 14)-(01, 16): EQEQUAL(OP) '=='
[05](01, 17)-(01, 18): NUMBER(NUMBER) '1'
[05](01, 18)-(01, 19): COLON(OP) ':'
[05](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 08): INDENT(INDENT) '        '
[06](01, 08)-(01, 11): NAME(NAME) 'new'
[06](01, 12)-(01, 13): EQUAL(OP) '='
[06](01, 14)-(01, 17): STRING(STRING) '"0"'
[06](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 08): INDENT(INDENT) '        '
[07](01, 08)-(01, 14): NAME(NAME) 'return'
[07](01, 15)-(01, 18): NAME(NAME) 'new'
[07](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 04): INDENT(INDENT) '    '
[08](01, 04)-(01, 06): NAME(NAME) 'if'
[08](01, 07)-(01, 13): NAME(NAME) 'lengte'
[08](01, 14)-(01, 16): EQEQUAL(OP) '=='
[08](01, 17)-(01, 18): NUMBER(NUMBER) '0'
[08](01, 18)-(01, 19): COLON(OP) ':'
[08](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 08): INDENT(INDENT) '        '
[09](01, 08)-(01, 14): NAME(NAME) 'return'
[09](01, 15)-(01, 17): STRING(STRING) '""'
[09](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 04): INDENT(INDENT) '    '
[10](01, 04)-(01, 06): NAME(NAME) 'if'
[10](01, 07)-(01, 08): NAME(NAME) 's'
[10](01, 08)-(01, 09): LSQB(OP) '['
[10](01, 09)-(01, 10): NUMBER(NUMBER) '1'
[10](01, 10)-(01, 11): RSQB(OP) ']'
[10](01, 12)-(01, 14): EQEQUAL(OP) '=='
[10](01, 15)-(01, 18): STRING(STRING) '"X"'
[10](01, 18)-(01, 19): COLON(OP) ':'
[10](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 08): INDENT(INDENT) '        '
[11](01, 08)-(01, 11): NAME(NAME) 'new'
[11](01, 12)-(01, 13): EQUAL(OP) '='
[11](01, 14)-(01, 17): NAME(NAME) 'str'
[11](01, 17)-(01, 18): LPAR(OP) '('
[11](01, 18)-(01, 19): NUMBER(NUMBER) '1'
[11](01, 19)-(01, 20): RPAR(OP) ')'
[11](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 04): INDENT(INDENT) '    '
[12](01, 04)-(01, 08): NAME(NAME) 'else'
[12](01, 08)-(01, 09): COLON(OP) ':'
[12](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 08): INDENT(INDENT) '        '
[13](01, 08)-(01, 11): NAME(NAME) 'new'
[13](01, 12)-(01, 13): EQUAL(OP) '='
[13](01, 14)-(01, 17): NAME(NAME) 'str'
[13](01, 17)-(01, 18): LPAR(OP) '('
[13](01, 18)-(01, 19): NUMBER(NUMBER) '0'
[13](01, 19)-(01, 20): RPAR(OP) ')'
[13](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 04): INDENT(INDENT) '    '
[14](01, 04)-(01, 09): NAME(NAME) 'while'
[14](01, 10)-(01, 11): NAME(NAME) 'i'
[14](01, 12)-(01, 13): LESS(OP) '<'
[14](01, 14)-(01, 20): NAME(NAME) 'lengte'
[14](01, 20)-(01, 21): COLON(OP) ':'
[14](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 08): INDENT(INDENT) '        '
[15](01, 08)-(01, 14): NAME(NAME) 'teller'
[15](01, 15)-(01, 16): EQUAL(OP) '='
[15](01, 17)-(01, 18): NUMBER(NUMBER) '0'
[15](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 08): INDENT(INDENT) '        '
[16](01, 08)-(01, 10): NAME(NAME) 'if'
[16](01, 11)-(01, 12): LPAR(OP) '('
[16](01, 12)-(01, 13): NAME(NAME) 'i'
[16](01, 14)-(01, 15): LESS(OP) '<'
[16](01, 16)-(01, 22): NAME(NAME) 'lengte'
[16](01, 22)-(01, 23): MINUS(OP) '-'
[16](01, 23)-(01, 24): NUMBER(NUMBER) '1'
[16](01, 24)-(01, 25): RPAR(OP) ')'
[16](01, 26)-(01, 29): NAME(NAME) 'and'
[16](01, 30)-(01, 31): NAME(NAME) 's'
[16](01, 31)-(01, 32): LSQB(OP) '['
[16](01, 32)-(01, 33): NAME(NAME) 'i'
[16](01, 33)-(01, 34): PLUS(OP) '+'
[16](01, 34)-(01, 35): NUMBER(NUMBER) '1'
[16](01, 35)-(01, 36): RSQB(OP) ']'
[16](01, 37)-(01, 39): EQEQUAL(OP) '=='
[16](01, 40)-(01, 43): STRING(STRING) '"X"'
[16](01, 43)-(01, 44): COLON(OP) ':'
[16](01, 44)-(01, 45): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 12): INDENT(INDENT) '            '
[17](01, 12)-(01, 18): NAME(NAME) 'teller'
[17](01, 19)-(01, 21): PLUSEQUAL(OP) '+='
[17](01, 22)-(01, 23): NUMBER(NUMBER) '1'
[17](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 08): INDENT(INDENT) '        '
[18](01, 08)-(01, 10): NAME(NAME) 'if'
[18](01, 11)-(01, 12): NAME(NAME) 's'
[18](01, 12)-(01, 13): LSQB(OP) '['
[18](01, 13)-(01, 14): NAME(NAME) 'i'
[18](01, 14)-(01, 15): MINUS(OP) '-'
[18](01, 15)-(01, 16): NUMBER(NUMBER) '1'
[18](01, 16)-(01, 17): RSQB(OP) ']'
[18](01, 18)-(01, 20): EQEQUAL(OP) '=='
[18](01, 21)-(01, 24): STRING(STRING) '"X"'
[18](01, 24)-(01, 25): COLON(OP) ':'
[18](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 12): INDENT(INDENT) '            '
[19](01, 12)-(01, 18): NAME(NAME) 'teller'
[19](01, 19)-(01, 21): PLUSEQUAL(OP) '+='
[19](01, 22)-(01, 23): NUMBER(NUMBER) '1'
[19](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): DEDENT(DEDENT)
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 08): INDENT(INDENT) '        '
[20](01, 08)-(01, 11): NAME(NAME) 'new'
[20](01, 12)-(01, 14): PLUSEQUAL(OP) '+='
[20](01, 15)-(01, 18): NAME(NAME) 'str'
[20](01, 18)-(01, 19): LPAR(OP) '('
[20](01, 19)-(01, 25): NAME(NAME) 'teller'
[20](01, 25)-(01, 26): RPAR(OP) ')'
[20](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[20](02, 00)-(02, 00): DEDENT(DEDENT)
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 08): INDENT(INDENT) '        '
[21](01, 08)-(01, 09): NAME(NAME) 'i'
[21](01, 09)-(01, 11): PLUSEQUAL(OP) '+='
[21](01, 11)-(01, 12): NUMBER(NUMBER) '1'
[21](01, 12)-(01, 13): NEWLINE(NEWLINE) '\n'
[21](02, 00)-(02, 00): DEDENT(DEDENT)
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 04): INDENT(INDENT) '    '
[22](01, 04)-(01, 10): NAME(NAME) 'return'
[22](01, 11)-(01, 14): NAME(NAME) 'new'
[22](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[22](02, 00)-(02, 00): DEDENT(DEDENT)
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[23](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[23](01, 00)-(01, 03): NAME(NAME) 'def'
[23](01, 04)-(01, 10): NAME(NAME) 'decode'
[23](01, 10)-(01, 11): LPAR(OP) '('
[23](01, 11)-(01, 12): NAME(NAME) 's'
[23](01, 12)-(01, 13): RPAR(OP) ')'
[23](01, 13)-(01, 14): COLON(OP) ':'
[23](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[23](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[24](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[24](01, 00)-(01, 04): INDENT(INDENT) '    '
[24](01, 04)-(01, 10): NAME(NAME) 'lengte'
[24](01, 11)-(01, 12): EQUAL(OP) '='
[24](01, 13)-(01, 16): NAME(NAME) 'len'
[24](01, 16)-(01, 17): LPAR(OP) '('
[24](01, 17)-(01, 18): NAME(NAME) 's'
[24](01, 18)-(01, 19): RPAR(OP) ')'
[24](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[24](02, 00)-(02, 00): DEDENT(DEDENT)
[24](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[25](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[25](01, 00)-(01, 04): INDENT(INDENT) '    '
[25](01, 04)-(01, 05): NAME(NAME) 'i'
[25](01, 06)-(01, 07): EQUAL(OP) '='
[25](01, 08)-(01, 09): NUMBER(NUMBER) '0'
[25](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[25](02, 00)-(02, 00): DEDENT(DEDENT)
[25](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[26](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[26](01, 00)-(01, 04): INDENT(INDENT) '    '
[26](01, 04)-(01, 12): NAME(NAME) 'uitkomst'
[26](01, 13)-(01, 14): EQUAL(OP) '='
[26](01, 15)-(01, 18): STRING(STRING) '" "'
[26](01, 19)-(01, 20): STAR(OP) '*'
[26](01, 21)-(01, 27): NAME(NAME) 'lengte'
[26](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[26](02, 00)-(02, 00): DEDENT(DEDENT)
[26](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[27](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[27](01, 00)-(01, 04): INDENT(INDENT) '    '
[27](01, 04)-(01, 09): NAME(NAME) 'while'
[27](01, 10)-(01, 11): NAME(NAME) 'i'
[27](01, 12)-(01, 13): LESS(OP) '<'
[27](01, 14)-(01, 20): NAME(NAME) 'lengte'
[27](01, 20)-(01, 21): COLON(OP) ':'
[27](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[27](02, 00)-(02, 00): DEDENT(DEDENT)
[27](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[28](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[28](01, 00)-(01, 08): INDENT(INDENT) '        '
[28](01, 08)-(01, 11): NAME(NAME) 'new'
[28](01, 12)-(01, 13): EQUAL(OP) '='
[28](01, 13)-(01, 19): NAME(NAME) 'encode'
[28](01, 19)-(01, 20): LPAR(OP) '('
[28](01, 20)-(01, 28): NAME(NAME) 'uitkomst'
[28](01, 28)-(01, 29): RPAR(OP) ')'
[28](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[28](02, 00)-(02, 00): DEDENT(DEDENT)
[28](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[29](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[29](01, 00)-(01, 08): INDENT(INDENT) '        '
[29](01, 08)-(01, 10): NAME(NAME) 'if'
[29](01, 11)-(01, 14): NAME(NAME) 'new'
[29](01, 15)-(01, 17): EQEQUAL(OP) '=='
[29](01, 18)-(01, 19): NAME(NAME) 's'
[29](01, 19)-(01, 20): COLON(OP) ':'
[29](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[29](02, 00)-(02, 00): DEDENT(DEDENT)
[29](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[30](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[30](01, 00)-(01, 12): INDENT(INDENT) '            '
[30](01, 12)-(01, 18): NAME(NAME) 'return'
[30](01, 19)-(01, 22): NAME(NAME) 'new'
[30](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[30](02, 00)-(02, 00): DEDENT(DEDENT)
[30](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[31](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[31](01, 00)-(01, 08): INDENT(INDENT) '        '
[31](01, 08)-(01, 12): NAME(NAME) 'else'
[31](01, 12)-(01, 13): COLON(OP) ':'
[31](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[31](02, 00)-(02, 00): DEDENT(DEDENT)
[31](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[32](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[32](01, 00)-(01, 12): INDENT(INDENT) '            '
[32](01, 12)-(01, 13): NAME(NAME) 'j'
[32](01, 13)-(01, 14): EQUAL(OP) '='
[32](01, 14)-(01, 15): NUMBER(NUMBER) '0'
[32](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[32](02, 00)-(02, 00): DEDENT(DEDENT)
[32](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[33](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[33](01, 00)-(01, 12): INDENT(INDENT) '            '
[33](01, 12)-(01, 17): NAME(NAME) 'while'
[33](01, 18)-(01, 19): NAME(NAME) 'j'
[33](01, 20)-(01, 21): LESS(OP) '<'
[33](01, 22)-(01, 28): NAME(NAME) 'lengte'
[33](01, 28)-(01, 29): COLON(OP) ':'
[33](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[33](02, 00)-(02, 00): DEDENT(DEDENT)
[33](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[34](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[34](01, 00)-(01, 12): INDENT(INDENT) '            '
[34](01, 12)-(01, 15): NAME(NAME) 'new'
[34](01, 16)-(01, 17): EQUAL(OP) '='
[34](01, 18)-(01, 27): NAME(NAME) 'mine_left'
[34](01, 27)-(01, 28): LPAR(OP) '('
[34](01, 28)-(01, 31): NAME(NAME) 'new'
[34](01, 31)-(01, 32): COMMA(OP) ','
[34](01, 32)-(01, 33): NAME(NAME) 's'
[34](01, 33)-(01, 34): COMMA(OP) ','
[34](01, 34)-(01, 37): NAME(NAME) 'new'
[34](01, 37)-(01, 38): RPAR(OP) ')'
[34](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[34](02, 00)-(02, 00): DEDENT(DEDENT)
[34](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[35](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[35](01, 00)-(01, 04): INDENT(INDENT) '    '
[35](01, 04)-(01, 10): NAME(NAME) 'return'
[35](01, 11)-(01, 19): NAME(NAME) 'uitkomst'
[35](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[35](02, 00)-(02, 00): DEDENT(DEDENT)
[35](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[36](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[36](01, 04)-(01, 05): NL(NL) '\n'
[36](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[37](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[37](01, 00)-(01, 03): NAME(NAME) 'def'
[37](01, 04)-(01, 13): NAME(NAME) 'mine_left'
[37](01, 13)-(01, 14): LPAR(OP) '('
[37](01, 14)-(01, 23): NAME(NAME) 'minefield'
[37](01, 23)-(01, 24): COMMA(OP) ','
[37](01, 24)-(01, 25): NAME(NAME) 's'
[37](01, 25)-(01, 26): COMMA(OP) ','
[37](01, 26)-(01, 29): NAME(NAME) 'new'
[37](01, 29)-(01, 30): RPAR(OP) ')'
[37](01, 30)-(01, 31): COLON(OP) ':'
[37](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[37](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[38](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[38](01, 00)-(01, 04): INDENT(INDENT) '    '
[38](01, 04)-(01, 05): NAME(NAME) 'i'
[38](01, 06)-(01, 07): EQUAL(OP) '='
[38](01, 08)-(01, 09): NUMBER(NUMBER) '0'
[38](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[38](02, 00)-(02, 00): DEDENT(DEDENT)
[38](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[39](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[39](01, 00)-(01, 04): INDENT(INDENT) '    '
[39](01, 04)-(01, 09): NAME(NAME) 'while'
[39](01, 10)-(01, 11): NAME(NAME) 's'
[39](01, 11)-(01, 12): LSQB(OP) '['
[39](01, 12)-(01, 13): NAME(NAME) 'i'
[39](01, 13)-(01, 14): RSQB(OP) ']'
[39](01, 15)-(01, 17): EQEQUAL(OP) '=='
[39](01, 18)-(01, 21): NAME(NAME) 'new'
[39](01, 21)-(01, 22): LSQB(OP) '['
[39](01, 22)-(01, 23): NAME(NAME) 'i'
[39](01, 23)-(01, 24): RSQB(OP) ']'
[39](01, 24)-(01, 25): COLON(OP) ':'
[39](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[39](02, 00)-(02, 00): DEDENT(DEDENT)
[39](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[40](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[40](01, 00)-(01, 08): INDENT(INDENT) '        '
[40](01, 08)-(01, 09): NAME(NAME) 'i'
[40](01, 10)-(01, 12): PLUSEQUAL(OP) '+='
[40](01, 12)-(01, 13): NUMBER(NUMBER) '1'
[40](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[40](02, 00)-(02, 00): DEDENT(DEDENT)
[40](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[41](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[41](01, 00)-(01, 04): INDENT(INDENT) '    '
[41](01, 04)-(01, 09): NAME(NAME) 'while'
[41](01, 10)-(01, 11): NAME(NAME) 'i'
[41](01, 12)-(01, 13): LESS(OP) '<'
[41](01, 14)-(01, 17): NAME(NAME) 'len'
[41](01, 17)-(01, 18): LPAR(OP) '('
[41](01, 18)-(01, 27): NAME(NAME) 'minefield'
[41](01, 27)-(01, 28): RPAR(OP) ')'
[41](01, 29)-(01, 32): NAME(NAME) 'and'
[41](01, 33)-(01, 42): NAME(NAME) 'minefield'
[41](01, 42)-(01, 43): LSQB(OP) '['
[41](01, 43)-(01, 44): NAME(NAME) 'i'
[41](01, 44)-(01, 45): RSQB(OP) ']'
[41](01, 46)-(01, 48): EQEQUAL(OP) '=='
[41](01, 49)-(01, 52): STRING(STRING) '"x"'
[41](01, 52)-(01, 53): COLON(OP) ':'
[41](01, 53)-(01, 54): NEWLINE(NEWLINE) '\n'
[41](02, 00)-(02, 00): DEDENT(DEDENT)
[41](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[42](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[42](01, 00)-(01, 08): INDENT(INDENT) '        '
[42](01, 08)-(01, 09): NAME(NAME) 'i'
[42](01, 10)-(01, 12): PLUSEQUAL(OP) '+='
[42](01, 12)-(01, 13): NUMBER(NUMBER) '1'
[42](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[42](02, 00)-(02, 00): DEDENT(DEDENT)
[42](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[43](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[43](01, 00)-(01, 04): INDENT(INDENT) '    '
[43](01, 04)-(01, 09): NAME(NAME) 'while'
[43](01, 10)-(01, 11): NAME(NAME) 'i'
[43](01, 12)-(01, 13): LESS(OP) '<'
[43](01, 14)-(01, 17): NAME(NAME) 'len'
[43](01, 17)-(01, 18): LPAR(OP) '('
[43](01, 18)-(01, 27): NAME(NAME) 'minefield'
[43](01, 27)-(01, 28): RPAR(OP) ')'
[43](01, 29)-(01, 32): NAME(NAME) 'and'
[43](01, 33)-(01, 42): NAME(NAME) 'minefield'
[43](01, 42)-(01, 43): LSQB(OP) '['
[43](01, 43)-(01, 44): NAME(NAME) 'i'
[43](01, 44)-(01, 45): RSQB(OP) ']'
[43](01, 46)-(01, 48): EQEQUAL(OP) '=='
[43](01, 49)-(01, 52): STRING(STRING) '" "'
[43](01, 52)-(01, 53): COLON(OP) ':'
[43](01, 53)-(01, 54): NEWLINE(NEWLINE) '\n'
[43](02, 00)-(02, 00): DEDENT(DEDENT)
[43](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[44](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[44](01, 00)-(01, 08): INDENT(INDENT) '        '
[44](01, 08)-(01, 17): NAME(NAME) 'minefield'
[44](01, 18)-(01, 19): EQUAL(OP) '='
[44](01, 20)-(01, 29): NAME(NAME) 'minefield'
[44](01, 29)-(01, 30): LSQB(OP) '['
[44](01, 30)-(01, 31): COLON(OP) ':'
[44](01, 31)-(01, 32): NAME(NAME) 'i'
[44](01, 32)-(01, 33): RSQB(OP) ']'
[44](01, 34)-(01, 35): PLUS(OP) '+'
[44](01, 36)-(01, 39): STRING(STRING) '"X"'
[44](01, 40)-(01, 41): PLUS(OP) '+'
[44](01, 42)-(01, 51): NAME(NAME) 'minefield'
[44](01, 51)-(01, 52): LSQB(OP) '['
[44](01, 52)-(01, 53): NAME(NAME) 'i'
[44](01, 53)-(01, 54): PLUS(OP) '+'
[44](01, 54)-(01, 55): NUMBER(NUMBER) '1'
[44](01, 55)-(01, 56): COLON(OP) ':'
[44](01, 56)-(01, 57): RSQB(OP) ']'
[44](01, 57)-(01, 58): NEWLINE(NEWLINE) '\n'
[44](02, 00)-(02, 00): DEDENT(DEDENT)
[44](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[45](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[45](01, 00)-(01, 08): INDENT(INDENT) '        '
[45](01, 08)-(01, 14): NAME(NAME) 'return'
[45](01, 15)-(01, 24): NAME(NAME) 'minefield'
[45](01, 24)-(01, 25): NEWLINE(NEWLINE)
[45](02, 00)-(02, 00): DEDENT(DEDENT)
[45](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

