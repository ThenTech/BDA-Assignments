[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 02): NAME(NAME) 'w1'
[00](01, 03)-(01, 04): EQUAL(OP) '='
[00](01, 05)-(01, 10): NAME(NAME) 'input'
[00](01, 10)-(01, 11): LPAR(OP) '('
[00](01, 11)-(01, 13): STRING(STRING) '""'
[00](01, 13)-(01, 14): RPAR(OP) ')'
[00](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 02): NAME(NAME) 'w2'
[01](01, 03)-(01, 04): EQUAL(OP) '='
[01](01, 05)-(01, 10): NAME(NAME) 'input'
[01](01, 10)-(01, 11): LPAR(OP) '('
[01](01, 11)-(01, 13): STRING(STRING) '""'
[01](01, 13)-(01, 14): RPAR(OP) ')'
[01](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 01): NL(NL) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 03): NAME(NAME) 'def'
[03](01, 04)-(01, 11): NAME(NAME) 'counter'
[03](01, 11)-(01, 12): LPAR(OP) '('
[03](01, 12)-(01, 18): NAME(NAME) 'string'
[03](01, 18)-(01, 19): COMMA(OP) ','
[03](01, 20)-(01, 26): NAME(NAME) 'letter'
[03](01, 26)-(01, 27): RPAR(OP) ')'
[03](01, 27)-(01, 28): COLON(OP) ':'
[03](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 09): NAME(NAME) 'count'
[04](01, 10)-(01, 11): EQUAL(OP) '='
[04](01, 12)-(01, 13): NUMBER(NUMBER) '0'
[04](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 07): NAME(NAME) 'for'
[05](01, 08)-(01, 12): NAME(NAME) 'char'
[05](01, 13)-(01, 15): NAME(NAME) 'in'
[05](01, 16)-(01, 22): NAME(NAME) 'string'
[05](01, 22)-(01, 23): COLON(OP) ':'
[05](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 08): INDENT(INDENT) '        '
[06](01, 08)-(01, 10): NAME(NAME) 'if'
[06](01, 11)-(01, 15): NAME(NAME) 'char'
[06](01, 16)-(01, 18): EQEQUAL(OP) '=='
[06](01, 19)-(01, 25): NAME(NAME) 'letter'
[06](01, 25)-(01, 26): COLON(OP) ':'
[06](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 12): INDENT(INDENT) '            '
[07](01, 12)-(01, 17): NAME(NAME) 'count'
[07](01, 18)-(01, 20): PLUSEQUAL(OP) '+='
[07](01, 21)-(01, 22): NUMBER(NUMBER) '1'
[07](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 04): INDENT(INDENT) '    '
[08](01, 04)-(01, 10): NAME(NAME) 'return'
[08](01, 11)-(01, 16): NAME(NAME) 'count'
[08](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 01): NL(NL) '\n'
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 01): NAME(NAME) 'i'
[10](01, 02)-(01, 03): EQUAL(OP) '='
[10](01, 04)-(01, 05): NUMBER(NUMBER) '0'
[10](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 01): NL(NL) '\n'
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 05): NAME(NAME) 'while'
[12](01, 06)-(01, 07): NAME(NAME) 'i'
[12](01, 08)-(01, 09): LESS(OP) '<'
[12](01, 10)-(01, 13): NAME(NAME) 'len'
[12](01, 13)-(01, 14): LPAR(OP) '('
[12](01, 14)-(01, 16): NAME(NAME) 'w1'
[12](01, 16)-(01, 17): RPAR(OP) ')'
[12](01, 17)-(01, 18): COLON(OP) ':'
[12](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 04): INDENT(INDENT) '    '
[13](01, 04)-(01, 06): NAME(NAME) 'if'
[13](01, 07)-(01, 10): STRING(STRING) '"a"'
[13](01, 11)-(01, 13): LESSEQUAL(OP) '<='
[13](01, 14)-(01, 16): NAME(NAME) 'w1'
[13](01, 16)-(01, 17): LSQB(OP) '['
[13](01, 17)-(01, 18): NAME(NAME) 'i'
[13](01, 18)-(01, 19): RSQB(OP) ']'
[13](01, 20)-(01, 22): LESSEQUAL(OP) '<='
[13](01, 23)-(01, 26): STRING(STRING) '"z"'
[13](01, 27)-(01, 30): NAME(NAME) 'and'
[13](01, 31)-(01, 38): NAME(NAME) 'counter'
[13](01, 38)-(01, 39): LPAR(OP) '('
[13](01, 39)-(01, 41): NAME(NAME) 'w1'
[13](01, 41)-(01, 42): COMMA(OP) ','
[13](01, 43)-(01, 45): NAME(NAME) 'w1'
[13](01, 45)-(01, 46): LSQB(OP) '['
[13](01, 46)-(01, 47): NAME(NAME) 'i'
[13](01, 47)-(01, 48): RSQB(OP) ']'
[13](01, 48)-(01, 49): RPAR(OP) ')'
[13](01, 50)-(01, 52): NOTEQUAL(OP) '!='
[13](01, 53)-(01, 60): NAME(NAME) 'counter'
[13](01, 60)-(01, 61): LPAR(OP) '('
[13](01, 61)-(01, 63): NAME(NAME) 'w2'
[13](01, 63)-(01, 64): COMMA(OP) ','
[13](01, 65)-(01, 67): NAME(NAME) 'w1'
[13](01, 67)-(01, 68): LSQB(OP) '['
[13](01, 68)-(01, 69): NAME(NAME) 'i'
[13](01, 69)-(01, 70): RSQB(OP) ']'
[13](01, 70)-(01, 71): RPAR(OP) ')'
[13](01, 71)-(01, 72): COLON(OP) ':'
[13](01, 72)-(01, 73): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 08): INDENT(INDENT) '        '
[14](01, 08)-(01, 13): NAME(NAME) 'print'
[14](01, 13)-(01, 14): LPAR(OP) '('
[14](01, 14)-(01, 16): NAME(NAME) 'w1'
[14](01, 16)-(01, 17): COMMA(OP) ','
[14](01, 18)-(01, 23): STRING(STRING) "'and'"
[14](01, 23)-(01, 24): COMMA(OP) ','
[14](01, 25)-(01, 27): NAME(NAME) 'w2'
[14](01, 27)-(01, 28): COMMA(OP) ','
[14](01, 29)-(01, 47): STRING(STRING) '"are not anagrams"'
[14](01, 47)-(01, 48): RPAR(OP) ')'
[14](01, 48)-(01, 49): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 08): INDENT(INDENT) '        '
[15](01, 08)-(01, 13): NAME(NAME) 'break'
[15](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 04): INDENT(INDENT) '    '
[16](01, 04)-(01, 08): NAME(NAME) 'elif'
[16](01, 09)-(01, 10): NAME(NAME) 'i'
[16](01, 11)-(01, 13): EQEQUAL(OP) '=='
[16](01, 14)-(01, 17): NAME(NAME) 'len'
[16](01, 17)-(01, 18): LPAR(OP) '('
[16](01, 18)-(01, 20): NAME(NAME) 'w1'
[16](01, 20)-(01, 21): RPAR(OP) ')'
[16](01, 22)-(01, 23): MINUS(OP) '-'
[16](01, 24)-(01, 25): NUMBER(NUMBER) '1'
[16](01, 25)-(01, 26): COLON(OP) ':'
[16](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 08): INDENT(INDENT) '        '
[17](01, 08)-(01, 13): NAME(NAME) 'print'
[17](01, 13)-(01, 14): LPAR(OP) '('
[17](01, 14)-(01, 16): NAME(NAME) 'w1'
[17](01, 16)-(01, 17): COMMA(OP) ','
[17](01, 18)-(01, 23): STRING(STRING) "'and'"
[17](01, 23)-(01, 24): COMMA(OP) ','
[17](01, 25)-(01, 27): NAME(NAME) 'w2'
[17](01, 27)-(01, 28): COMMA(OP) ','
[17](01, 29)-(01, 43): STRING(STRING) '"are anagrams"'
[17](01, 43)-(01, 44): RPAR(OP) ')'
[17](01, 44)-(01, 45): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 04): INDENT(INDENT) '    '
[18](01, 04)-(01, 05): NAME(NAME) 'i'
[18](01, 05)-(01, 07): PLUSEQUAL(OP) '+='
[18](01, 07)-(01, 08): NUMBER(NUMBER) '1'
[18](01, 08)-(01, 09): NEWLINE(NEWLINE)
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

