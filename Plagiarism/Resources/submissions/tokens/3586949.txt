[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 26): NAME(NAME) 'is_palindrome_sentence'
[00](01, 26)-(01, 27): LPAR(OP) '('
[00](01, 27)-(01, 35): NAME(NAME) 'sentence'
[00](01, 35)-(01, 36): RPAR(OP) ')'
[00](01, 36)-(01, 37): COLON(OP) ':'
[00](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 09): NAME(NAME) 'count'
[01](01, 10)-(01, 11): EQUAL(OP) '='
[01](01, 12)-(01, 13): NUMBER(NUMBER) '0'
[01](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 04)-(01, 05): NL(NL) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 07): NAME(NAME) 'for'
[03](01, 08)-(01, 09): NAME(NAME) 'i'
[03](01, 10)-(01, 12): NAME(NAME) 'in'
[03](01, 13)-(01, 21): NAME(NAME) 'sentence'
[03](01, 21)-(01, 22): COLON(OP) ':'
[03](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 08): INDENT(INDENT) '        '
[04](01, 08)-(01, 10): NAME(NAME) 'if'
[04](01, 11)-(01, 14): NAME(NAME) 'not'
[04](01, 14)-(01, 15): LPAR(OP) '('
[04](01, 15)-(01, 18): STRING(STRING) "'a'"
[04](01, 19)-(01, 20): LESS(OP) '<'
[04](01, 21)-(01, 22): NAME(NAME) 'i'
[04](01, 22)-(01, 23): DOT(OP) '.'
[04](01, 23)-(01, 28): NAME(NAME) 'lower'
[04](01, 28)-(01, 29): LPAR(OP) '('
[04](01, 29)-(01, 30): RPAR(OP) ')'
[04](01, 31)-(01, 32): LESS(OP) '<'
[04](01, 33)-(01, 36): STRING(STRING) "'z'"
[04](01, 37)-(01, 40): NAME(NAME) 'and'
[04](01, 41)-(01, 42): NAME(NAME) 'i'
[04](01, 43)-(01, 45): EQEQUAL(OP) '=='
[04](01, 46)-(01, 54): NAME(NAME) 'sentence'
[04](01, 54)-(01, 55): LSQB(OP) '['
[04](01, 55)-(01, 58): NAME(NAME) 'len'
[04](01, 58)-(01, 59): LPAR(OP) '('
[04](01, 59)-(01, 67): NAME(NAME) 'sentence'
[04](01, 67)-(01, 68): RPAR(OP) ')'
[04](01, 69)-(01, 70): MINUS(OP) '-'
[04](01, 71)-(01, 72): NUMBER(NUMBER) '1'
[04](01, 73)-(01, 74): MINUS(OP) '-'
[04](01, 75)-(01, 80): NAME(NAME) 'count'
[04](01, 80)-(01, 81): RSQB(OP) ']'
[04](01, 81)-(01, 82): RPAR(OP) ')'
[04](01, 82)-(01, 83): COLON(OP) ':'
[04](01, 83)-(01, 84): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 12): INDENT(INDENT) '            '
[05](01, 12)-(01, 18): NAME(NAME) 'return'
[05](01, 19)-(01, 24): NAME(NAME) 'False'
[05](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 08): INDENT(INDENT) '        '
[06](01, 08)-(01, 12): NAME(NAME) 'else'
[06](01, 12)-(01, 13): COLON(OP) ':'
[06](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 12): INDENT(INDENT) '            '
[07](01, 12)-(01, 17): NAME(NAME) 'count'
[07](01, 18)-(01, 20): PLUSEQUAL(OP) '+='
[07](01, 21)-(01, 22): NUMBER(NUMBER) '1'
[07](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 04): INDENT(INDENT) '    '
[08](01, 04)-(01, 10): NAME(NAME) 'return'
[08](01, 11)-(01, 15): NAME(NAME) 'True'
[08](01, 15)-(01, 16): NEWLINE(NEWLINE)
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

