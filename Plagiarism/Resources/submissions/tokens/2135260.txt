[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 09): NAME(NAME) 'sentence1'
[00](01, 10)-(01, 11): EQUAL(OP) '='
[00](01, 12)-(01, 17): NAME(NAME) 'input'
[00](01, 17)-(01, 18): LPAR(OP) '('
[00](01, 18)-(01, 37): STRING(STRING) '"write a sentence "'
[00](01, 37)-(01, 38): RPAR(OP) ')'
[00](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 09): NAME(NAME) 'sentence2'
[01](01, 10)-(01, 11): EQUAL(OP) '='
[01](01, 12)-(01, 17): NAME(NAME) 'input'
[01](01, 17)-(01, 18): LPAR(OP) '('
[01](01, 18)-(01, 37): STRING(STRING) '"write a sentence "'
[01](01, 37)-(01, 38): RPAR(OP) ')'
[01](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 01): NAME(NAME) 'x'
[02](01, 02)-(01, 03): EQUAL(OP) '='
[02](01, 04)-(01, 05): NUMBER(NUMBER) '0'
[02](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 01): NAME(NAME) 'y'
[03](01, 02)-(01, 03): EQUAL(OP) '='
[03](01, 04)-(01, 05): NUMBER(NUMBER) '0'
[03](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 05): NAME(NAME) 'check'
[04](01, 06)-(01, 07): EQUAL(OP) '='
[04](01, 08)-(01, 12): NAME(NAME) 'True'
[04](01, 12)-(01, 13): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 07): NAME(NAME) 'letters'
[05](01, 08)-(01, 09): EQUAL(OP) '='
[05](01, 10)-(01, 11): LSQB(OP) '['
[05](01, 11)-(01, 14): STRING(STRING) '"a"'
[05](01, 14)-(01, 15): COMMA(OP) ','
[05](01, 15)-(01, 18): STRING(STRING) '"b"'
[05](01, 18)-(01, 19): COMMA(OP) ','
[05](01, 19)-(01, 22): STRING(STRING) '"c"'
[05](01, 22)-(01, 23): COMMA(OP) ','
[05](01, 23)-(01, 26): STRING(STRING) '"d"'
[05](01, 26)-(01, 27): COMMA(OP) ','
[05](01, 27)-(01, 30): STRING(STRING) '"e"'
[05](01, 30)-(01, 31): COMMA(OP) ','
[05](01, 31)-(01, 34): STRING(STRING) '"f"'
[05](01, 34)-(01, 35): COMMA(OP) ','
[05](01, 35)-(01, 38): STRING(STRING) '"g"'
[05](01, 38)-(01, 39): COMMA(OP) ','
[05](01, 39)-(01, 42): STRING(STRING) '"h"'
[05](01, 42)-(01, 43): COMMA(OP) ','
[05](01, 43)-(01, 46): STRING(STRING) '"i"'
[05](01, 46)-(01, 47): COMMA(OP) ','
[05](01, 47)-(01, 50): STRING(STRING) '"j"'
[05](01, 50)-(01, 51): COMMA(OP) ','
[05](01, 51)-(01, 54): STRING(STRING) '"k"'
[05](01, 54)-(01, 55): COMMA(OP) ','
[05](01, 55)-(01, 58): STRING(STRING) '"l"'
[05](01, 58)-(01, 59): COMMA(OP) ','
[05](01, 59)-(01, 62): STRING(STRING) '"m"'
[05](01, 62)-(01, 63): COMMA(OP) ','
[05](01, 63)-(01, 66): STRING(STRING) '"n"'
[05](01, 66)-(01, 67): COMMA(OP) ','
[05](01, 67)-(01, 70): STRING(STRING) '"o"'
[05](01, 70)-(01, 71): COMMA(OP) ','
[05](01, 71)-(01, 74): STRING(STRING) '"p"'
[05](01, 74)-(01, 75): COMMA(OP) ','
[05](01, 75)-(01, 78): STRING(STRING) '"q"'
[05](01, 78)-(01, 79): COMMA(OP) ','
[05](01, 79)-(01, 82): STRING(STRING) '"r"'
[05](01, 82)-(01, 83): COMMA(OP) ','
[05](01, 83)-(01, 86): STRING(STRING) '"s"'
[05](01, 86)-(01, 87): COMMA(OP) ','
[05](01, 87)-(01, 90): STRING(STRING) '"t"'
[05](01, 90)-(01, 91): COMMA(OP) ','
[05](01, 91)-(01, 94): STRING(STRING) '"u"'
[05](01, 94)-(01, 95): COMMA(OP) ','
[05](01, 95)-(01, 98): STRING(STRING) '"v"'
[05](01, 98)-(01, 99): COMMA(OP) ','
[05](01, 99)-(01, 102): STRING(STRING) '"w"'
[05](01, 102)-(01, 103): COMMA(OP) ','
[05](01, 103)-(01, 106): STRING(STRING) '"x"'
[05](01, 106)-(01, 107): COMMA(OP) ','
[05](01, 107)-(01, 110): STRING(STRING) '"y"'
[05](01, 110)-(01, 111): COMMA(OP) ','
[05](01, 111)-(01, 114): STRING(STRING) '"z"'
[05](01, 114)-(01, 115): RSQB(OP) ']'
[05](01, 115)-(01, 116): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 06): NAME(NAME) 'count1'
[06](01, 07)-(01, 08): EQUAL(OP) '='
[06](01, 09)-(01, 10): LSQB(OP) '['
[06](01, 10)-(01, 11): NUMBER(NUMBER) '0'
[06](01, 11)-(01, 12): COMMA(OP) ','
[06](01, 12)-(01, 13): NUMBER(NUMBER) '0'
[06](01, 13)-(01, 14): COMMA(OP) ','
[06](01, 14)-(01, 15): NUMBER(NUMBER) '0'
[06](01, 15)-(01, 16): COMMA(OP) ','
[06](01, 16)-(01, 17): NUMBER(NUMBER) '0'
[06](01, 17)-(01, 18): COMMA(OP) ','
[06](01, 18)-(01, 19): NUMBER(NUMBER) '0'
[06](01, 19)-(01, 20): COMMA(OP) ','
[06](01, 20)-(01, 21): NUMBER(NUMBER) '0'
[06](01, 21)-(01, 22): COMMA(OP) ','
[06](01, 22)-(01, 23): NUMBER(NUMBER) '0'
[06](01, 23)-(01, 24): COMMA(OP) ','
[06](01, 24)-(01, 25): NUMBER(NUMBER) '0'
[06](01, 25)-(01, 26): COMMA(OP) ','
[06](01, 26)-(01, 27): NUMBER(NUMBER) '0'
[06](01, 27)-(01, 28): COMMA(OP) ','
[06](01, 28)-(01, 29): NUMBER(NUMBER) '0'
[06](01, 29)-(01, 30): COMMA(OP) ','
[06](01, 30)-(01, 31): NUMBER(NUMBER) '0'
[06](01, 31)-(01, 32): COMMA(OP) ','
[06](01, 32)-(01, 33): NUMBER(NUMBER) '0'
[06](01, 33)-(01, 34): COMMA(OP) ','
[06](01, 34)-(01, 35): NUMBER(NUMBER) '0'
[06](01, 35)-(01, 36): COMMA(OP) ','
[06](01, 36)-(01, 37): NUMBER(NUMBER) '0'
[06](01, 37)-(01, 38): COMMA(OP) ','
[06](01, 38)-(01, 39): NUMBER(NUMBER) '0'
[06](01, 39)-(01, 40): COMMA(OP) ','
[06](01, 40)-(01, 41): NUMBER(NUMBER) '0'
[06](01, 41)-(01, 42): COMMA(OP) ','
[06](01, 42)-(01, 43): NUMBER(NUMBER) '0'
[06](01, 43)-(01, 44): COMMA(OP) ','
[06](01, 44)-(01, 45): NUMBER(NUMBER) '0'
[06](01, 45)-(01, 46): COMMA(OP) ','
[06](01, 46)-(01, 47): NUMBER(NUMBER) '0'
[06](01, 47)-(01, 48): COMMA(OP) ','
[06](01, 48)-(01, 49): NUMBER(NUMBER) '0'
[06](01, 49)-(01, 50): COMMA(OP) ','
[06](01, 50)-(01, 51): NUMBER(NUMBER) '0'
[06](01, 51)-(01, 52): COMMA(OP) ','
[06](01, 52)-(01, 53): NUMBER(NUMBER) '0'
[06](01, 53)-(01, 54): COMMA(OP) ','
[06](01, 54)-(01, 55): NUMBER(NUMBER) '0'
[06](01, 55)-(01, 56): COMMA(OP) ','
[06](01, 56)-(01, 57): NUMBER(NUMBER) '0'
[06](01, 57)-(01, 58): COMMA(OP) ','
[06](01, 58)-(01, 59): NUMBER(NUMBER) '0'
[06](01, 59)-(01, 60): COMMA(OP) ','
[06](01, 60)-(01, 61): NUMBER(NUMBER) '0'
[06](01, 61)-(01, 62): RSQB(OP) ']'
[06](01, 62)-(01, 63): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 06): NAME(NAME) 'count2'
[07](01, 07)-(01, 08): EQUAL(OP) '='
[07](01, 09)-(01, 10): LSQB(OP) '['
[07](01, 10)-(01, 11): NUMBER(NUMBER) '0'
[07](01, 11)-(01, 12): COMMA(OP) ','
[07](01, 12)-(01, 13): NUMBER(NUMBER) '0'
[07](01, 13)-(01, 14): COMMA(OP) ','
[07](01, 14)-(01, 15): NUMBER(NUMBER) '0'
[07](01, 15)-(01, 16): COMMA(OP) ','
[07](01, 16)-(01, 17): NUMBER(NUMBER) '0'
[07](01, 17)-(01, 18): COMMA(OP) ','
[07](01, 18)-(01, 19): NUMBER(NUMBER) '0'
[07](01, 19)-(01, 20): COMMA(OP) ','
[07](01, 20)-(01, 21): NUMBER(NUMBER) '0'
[07](01, 21)-(01, 22): COMMA(OP) ','
[07](01, 22)-(01, 23): NUMBER(NUMBER) '0'
[07](01, 23)-(01, 24): COMMA(OP) ','
[07](01, 24)-(01, 25): NUMBER(NUMBER) '0'
[07](01, 25)-(01, 26): COMMA(OP) ','
[07](01, 26)-(01, 27): NUMBER(NUMBER) '0'
[07](01, 27)-(01, 28): COMMA(OP) ','
[07](01, 28)-(01, 29): NUMBER(NUMBER) '0'
[07](01, 29)-(01, 30): COMMA(OP) ','
[07](01, 30)-(01, 31): NUMBER(NUMBER) '0'
[07](01, 31)-(01, 32): COMMA(OP) ','
[07](01, 32)-(01, 33): NUMBER(NUMBER) '0'
[07](01, 33)-(01, 34): COMMA(OP) ','
[07](01, 34)-(01, 35): NUMBER(NUMBER) '0'
[07](01, 35)-(01, 36): COMMA(OP) ','
[07](01, 36)-(01, 37): NUMBER(NUMBER) '0'
[07](01, 37)-(01, 38): COMMA(OP) ','
[07](01, 38)-(01, 39): NUMBER(NUMBER) '0'
[07](01, 39)-(01, 40): COMMA(OP) ','
[07](01, 40)-(01, 41): NUMBER(NUMBER) '0'
[07](01, 41)-(01, 42): COMMA(OP) ','
[07](01, 42)-(01, 43): NUMBER(NUMBER) '0'
[07](01, 43)-(01, 44): COMMA(OP) ','
[07](01, 44)-(01, 45): NUMBER(NUMBER) '0'
[07](01, 45)-(01, 46): COMMA(OP) ','
[07](01, 46)-(01, 47): NUMBER(NUMBER) '0'
[07](01, 47)-(01, 48): COMMA(OP) ','
[07](01, 48)-(01, 49): NUMBER(NUMBER) '0'
[07](01, 49)-(01, 50): COMMA(OP) ','
[07](01, 50)-(01, 51): NUMBER(NUMBER) '0'
[07](01, 51)-(01, 52): COMMA(OP) ','
[07](01, 52)-(01, 53): NUMBER(NUMBER) '0'
[07](01, 53)-(01, 54): COMMA(OP) ','
[07](01, 54)-(01, 55): NUMBER(NUMBER) '0'
[07](01, 55)-(01, 56): COMMA(OP) ','
[07](01, 56)-(01, 57): NUMBER(NUMBER) '0'
[07](01, 57)-(01, 58): COMMA(OP) ','
[07](01, 58)-(01, 59): NUMBER(NUMBER) '0'
[07](01, 59)-(01, 60): COMMA(OP) ','
[07](01, 60)-(01, 61): NUMBER(NUMBER) '0'
[07](01, 61)-(01, 62): RSQB(OP) ']'
[07](01, 62)-(01, 63): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 02): NAME(NAME) 'if'
[08](01, 03)-(01, 06): NAME(NAME) 'len'
[08](01, 06)-(01, 07): LPAR(OP) '('
[08](01, 07)-(01, 16): NAME(NAME) 'sentence1'
[08](01, 16)-(01, 17): RPAR(OP) ')'
[08](01, 18)-(01, 20): EQEQUAL(OP) '=='
[08](01, 21)-(01, 24): NAME(NAME) 'len'
[08](01, 24)-(01, 25): LPAR(OP) '('
[08](01, 25)-(01, 34): NAME(NAME) 'sentence2'
[08](01, 34)-(01, 35): RPAR(OP) ')'
[08](01, 35)-(01, 36): COLON(OP) ':'
[08](01, 36)-(01, 37): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 09): NAME(NAME) 'while'
[09](01, 10)-(01, 11): NAME(NAME) 'x'
[09](01, 12)-(01, 13): LESS(OP) '<'
[09](01, 14)-(01, 17): NAME(NAME) 'len'
[09](01, 17)-(01, 18): LPAR(OP) '('
[09](01, 18)-(01, 27): NAME(NAME) 'sentence1'
[09](01, 27)-(01, 28): RPAR(OP) ')'
[09](01, 28)-(01, 29): COLON(OP) ':'
[09](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 08): INDENT(INDENT) '        '
[10](01, 08)-(01, 11): NAME(NAME) 'for'
[10](01, 12)-(01, 13): NAME(NAME) 'y'
[10](01, 14)-(01, 16): NAME(NAME) 'in'
[10](01, 17)-(01, 22): NAME(NAME) 'range'
[10](01, 22)-(01, 23): LPAR(OP) '('
[10](01, 23)-(01, 25): NUMBER(NUMBER) '26'
[10](01, 25)-(01, 26): RPAR(OP) ')'
[10](01, 26)-(01, 27): COLON(OP) ':'
[10](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 12): INDENT(INDENT) '            '
[11](01, 12)-(01, 14): NAME(NAME) 'if'
[11](01, 15)-(01, 24): NAME(NAME) 'sentence1'
[11](01, 24)-(01, 25): LSQB(OP) '['
[11](01, 25)-(01, 26): NAME(NAME) 'x'
[11](01, 26)-(01, 27): RSQB(OP) ']'
[11](01, 28)-(01, 30): EQEQUAL(OP) '=='
[11](01, 31)-(01, 38): NAME(NAME) 'letters'
[11](01, 38)-(01, 39): LSQB(OP) '['
[11](01, 39)-(01, 40): NAME(NAME) 'y'
[11](01, 40)-(01, 41): RSQB(OP) ']'
[11](01, 41)-(01, 42): COLON(OP) ':'
[11](01, 42)-(01, 43): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 16): INDENT(INDENT) '                '
[12](01, 16)-(01, 22): NAME(NAME) 'count1'
[12](01, 22)-(01, 23): LSQB(OP) '['
[12](01, 23)-(01, 24): NAME(NAME) 'y'
[12](01, 24)-(01, 25): RSQB(OP) ']'
[12](01, 26)-(01, 28): PLUSEQUAL(OP) '+='
[12](01, 29)-(01, 30): NUMBER(NUMBER) '1'
[12](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 08): INDENT(INDENT) '        '
[13](01, 08)-(01, 09): NAME(NAME) 'x'
[13](01, 10)-(01, 12): PLUSEQUAL(OP) '+='
[13](01, 13)-(01, 14): NUMBER(NUMBER) '1'
[13](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 04): INDENT(INDENT) '    '
[14](01, 04)-(01, 05): NAME(NAME) 'x'
[14](01, 06)-(01, 07): EQUAL(OP) '='
[14](01, 08)-(01, 09): NUMBER(NUMBER) '0'
[14](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 04): INDENT(INDENT) '    '
[15](01, 04)-(01, 09): NAME(NAME) 'while'
[15](01, 10)-(01, 11): NAME(NAME) 'x'
[15](01, 12)-(01, 13): LESS(OP) '<'
[15](01, 14)-(01, 17): NAME(NAME) 'len'
[15](01, 17)-(01, 18): LPAR(OP) '('
[15](01, 18)-(01, 27): NAME(NAME) 'sentence2'
[15](01, 27)-(01, 28): RPAR(OP) ')'
[15](01, 28)-(01, 29): COLON(OP) ':'
[15](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 08): INDENT(INDENT) '        '
[16](01, 08)-(01, 11): NAME(NAME) 'for'
[16](01, 12)-(01, 13): NAME(NAME) 'y'
[16](01, 14)-(01, 16): NAME(NAME) 'in'
[16](01, 17)-(01, 22): NAME(NAME) 'range'
[16](01, 22)-(01, 23): LPAR(OP) '('
[16](01, 23)-(01, 25): NUMBER(NUMBER) '26'
[16](01, 25)-(01, 26): RPAR(OP) ')'
[16](01, 26)-(01, 27): COLON(OP) ':'
[16](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 12): INDENT(INDENT) '            '
[17](01, 12)-(01, 14): NAME(NAME) 'if'
[17](01, 15)-(01, 24): NAME(NAME) 'sentence2'
[17](01, 24)-(01, 25): LSQB(OP) '['
[17](01, 25)-(01, 26): NAME(NAME) 'x'
[17](01, 26)-(01, 27): RSQB(OP) ']'
[17](01, 28)-(01, 30): EQEQUAL(OP) '=='
[17](01, 31)-(01, 38): NAME(NAME) 'letters'
[17](01, 38)-(01, 39): LSQB(OP) '['
[17](01, 39)-(01, 40): NAME(NAME) 'y'
[17](01, 40)-(01, 41): RSQB(OP) ']'
[17](01, 41)-(01, 42): COLON(OP) ':'
[17](01, 42)-(01, 43): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 16): INDENT(INDENT) '                '
[18](01, 16)-(01, 22): NAME(NAME) 'count2'
[18](01, 22)-(01, 23): LSQB(OP) '['
[18](01, 23)-(01, 24): NAME(NAME) 'y'
[18](01, 24)-(01, 25): RSQB(OP) ']'
[18](01, 26)-(01, 28): PLUSEQUAL(OP) '+='
[18](01, 29)-(01, 30): NUMBER(NUMBER) '1'
[18](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 08): INDENT(INDENT) '        '
[19](01, 08)-(01, 09): NAME(NAME) 'x'
[19](01, 10)-(01, 12): PLUSEQUAL(OP) '+='
[19](01, 13)-(01, 14): NUMBER(NUMBER) '1'
[19](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): DEDENT(DEDENT)
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 04): INDENT(INDENT) '    '
[20](01, 04)-(01, 07): NAME(NAME) 'for'
[20](01, 08)-(01, 09): NAME(NAME) 'y'
[20](01, 10)-(01, 12): NAME(NAME) 'in'
[20](01, 13)-(01, 18): NAME(NAME) 'range'
[20](01, 18)-(01, 19): LPAR(OP) '('
[20](01, 19)-(01, 21): NUMBER(NUMBER) '26'
[20](01, 21)-(01, 22): RPAR(OP) ')'
[20](01, 22)-(01, 23): COLON(OP) ':'
[20](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[20](02, 00)-(02, 00): DEDENT(DEDENT)
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 08): INDENT(INDENT) '        '
[21](01, 08)-(01, 10): NAME(NAME) 'if'
[21](01, 11)-(01, 17): NAME(NAME) 'count1'
[21](01, 17)-(01, 18): LSQB(OP) '['
[21](01, 18)-(01, 19): NAME(NAME) 'y'
[21](01, 19)-(01, 20): RSQB(OP) ']'
[21](01, 21)-(01, 23): NOTEQUAL(OP) '!='
[21](01, 24)-(01, 30): NAME(NAME) 'count2'
[21](01, 30)-(01, 31): LSQB(OP) '['
[21](01, 31)-(01, 32): NAME(NAME) 'y'
[21](01, 32)-(01, 33): RSQB(OP) ']'
[21](01, 33)-(01, 34): COLON(OP) ':'
[21](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[21](02, 00)-(02, 00): DEDENT(DEDENT)
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 12): INDENT(INDENT) '            '
[22](01, 12)-(01, 17): NAME(NAME) 'check'
[22](01, 18)-(01, 19): EQUAL(OP) '='
[22](01, 20)-(01, 25): NAME(NAME) 'False'
[22](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[22](02, 00)-(02, 00): DEDENT(DEDENT)
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[23](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[23](01, 00)-(01, 12): INDENT(INDENT) '            '
[23](01, 12)-(01, 17): NAME(NAME) 'print'
[23](01, 17)-(01, 18): LPAR(OP) '('
[23](01, 18)-(01, 24): NAME(NAME) 'count1'
[23](01, 24)-(01, 25): LSQB(OP) '['
[23](01, 25)-(01, 26): NAME(NAME) 'y'
[23](01, 26)-(01, 27): RSQB(OP) ']'
[23](01, 27)-(01, 28): COMMA(OP) ','
[23](01, 29)-(01, 35): NAME(NAME) 'count2'
[23](01, 35)-(01, 36): LSQB(OP) '['
[23](01, 36)-(01, 37): NAME(NAME) 'y'
[23](01, 37)-(01, 38): RSQB(OP) ']'
[23](01, 38)-(01, 39): COMMA(OP) ','
[23](01, 40)-(01, 41): NAME(NAME) 'y'
[23](01, 41)-(01, 42): RPAR(OP) ')'
[23](01, 42)-(01, 43): NEWLINE(NEWLINE) '\n'
[23](02, 00)-(02, 00): DEDENT(DEDENT)
[23](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[24](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[24](01, 00)-(01, 04): NAME(NAME) 'else'
[24](01, 04)-(01, 05): COLON(OP) ':'
[24](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[24](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[25](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[25](01, 00)-(01, 04): INDENT(INDENT) '    '
[25](01, 04)-(01, 09): NAME(NAME) 'check'
[25](01, 10)-(01, 11): EQUAL(OP) '='
[25](01, 12)-(01, 17): NAME(NAME) 'False'
[25](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[25](02, 00)-(02, 00): DEDENT(DEDENT)
[25](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[26](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[26](01, 00)-(01, 02): NAME(NAME) 'if'
[26](01, 03)-(01, 08): NAME(NAME) 'check'
[26](01, 08)-(01, 09): COLON(OP) ':'
[26](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[26](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[27](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[27](01, 00)-(01, 04): INDENT(INDENT) '    '
[27](01, 04)-(01, 09): NAME(NAME) 'print'
[27](01, 09)-(01, 10): LPAR(OP) '('
[27](01, 10)-(01, 19): NAME(NAME) 'sentence1'
[27](01, 19)-(01, 20): COMMA(OP) ','
[27](01, 21)-(01, 28): STRING(STRING) '" and "'
[27](01, 29)-(01, 30): COMMA(OP) ','
[27](01, 30)-(01, 39): NAME(NAME) 'sentence2'
[27](01, 39)-(01, 40): COMMA(OP) ','
[27](01, 41)-(01, 56): STRING(STRING) '" are anagrams"'
[27](01, 56)-(01, 57): COMMA(OP) ','
[27](01, 58)-(01, 61): NAME(NAME) 'sep'
[27](01, 61)-(01, 62): EQUAL(OP) '='
[27](01, 62)-(01, 64): STRING(STRING) '""'
[27](01, 64)-(01, 65): RPAR(OP) ')'
[27](01, 65)-(01, 66): NEWLINE(NEWLINE) '\n'
[27](02, 00)-(02, 00): DEDENT(DEDENT)
[27](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[28](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[28](01, 00)-(01, 04): NAME(NAME) 'else'
[28](01, 04)-(01, 05): COLON(OP) ':'
[28](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[28](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[29](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[29](01, 00)-(01, 04): INDENT(INDENT) '    '
[29](01, 04)-(01, 09): NAME(NAME) 'print'
[29](01, 09)-(01, 10): LPAR(OP) '('
[29](01, 10)-(01, 19): NAME(NAME) 'sentence1'
[29](01, 19)-(01, 20): COMMA(OP) ','
[29](01, 21)-(01, 28): STRING(STRING) '" and "'
[29](01, 28)-(01, 29): COMMA(OP) ','
[29](01, 30)-(01, 39): NAME(NAME) 'sentence2'
[29](01, 39)-(01, 40): COMMA(OP) ','
[29](01, 41)-(01, 60): STRING(STRING) '" are not anagrams"'
[29](01, 60)-(01, 61): COMMA(OP) ','
[29](01, 62)-(01, 65): NAME(NAME) 'sep'
[29](01, 65)-(01, 66): EQUAL(OP) '='
[29](01, 66)-(01, 68): STRING(STRING) '""'
[29](01, 68)-(01, 69): RPAR(OP) ')'
[29](01, 69)-(01, 70): NEWLINE(NEWLINE)
[29](02, 00)-(02, 00): DEDENT(DEDENT)
[29](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

