[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 15): NAME(NAME) 'count_words'
[00](01, 15)-(01, 16): LPAR(OP) '('
[00](01, 16)-(01, 22): NAME(NAME) 'string'
[00](01, 22)-(01, 23): RPAR(OP) ')'
[00](01, 23)-(01, 24): COLON(OP) ':'
[00](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 12): NAME(NAME) 'alphabet'
[01](01, 13)-(01, 14): EQUAL(OP) '='
[01](01, 15)-(01, 43): STRING(STRING) '"abcdefghijklmnopqrstuvwxyz"'
[01](01, 43)-(01, 44): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 09): NAME(NAME) 'count'
[02](01, 10)-(01, 11): EQUAL(OP) '='
[02](01, 12)-(01, 13): NUMBER(NUMBER) '0'
[02](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 14): NAME(NAME) 'start_word'
[03](01, 15)-(01, 16): EQUAL(OP) '='
[03](01, 17)-(01, 22): NAME(NAME) 'False'
[03](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 12): NAME(NAME) 'end_word'
[04](01, 13)-(01, 14): EQUAL(OP) '='
[04](01, 15)-(01, 20): NAME(NAME) 'False'
[04](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 04)-(01, 05): NL(NL) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 04): INDENT(INDENT) '    '
[06](01, 04)-(01, 07): NAME(NAME) 'for'
[06](01, 08)-(01, 12): NAME(NAME) 'char'
[06](01, 13)-(01, 15): NAME(NAME) 'in'
[06](01, 16)-(01, 22): NAME(NAME) 'string'
[06](01, 22)-(01, 23): COLON(OP) ':'
[06](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 08): INDENT(INDENT) '        '
[07](01, 08)-(01, 10): NAME(NAME) 'if'
[07](01, 11)-(01, 15): NAME(NAME) 'char'
[07](01, 16)-(01, 18): NAME(NAME) 'in'
[07](01, 19)-(01, 27): NAME(NAME) 'alphabet'
[07](01, 27)-(01, 28): COLON(OP) ':'
[07](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 12): INDENT(INDENT) '            '
[08](01, 12)-(01, 22): NAME(NAME) 'start_word'
[08](01, 23)-(01, 24): EQUAL(OP) '='
[08](01, 25)-(01, 29): NAME(NAME) 'True'
[08](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 08)-(01, 09): NL(NL) '\n'
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 08): INDENT(INDENT) '        '
[10](01, 08)-(01, 12): NAME(NAME) 'elif'
[10](01, 13)-(01, 23): NAME(NAME) 'start_word'
[10](01, 24)-(01, 26): EQEQUAL(OP) '=='
[10](01, 27)-(01, 31): NAME(NAME) 'True'
[10](01, 32)-(01, 35): NAME(NAME) 'and'
[10](01, 36)-(01, 37): LPAR(OP) '('
[10](01, 37)-(01, 41): NAME(NAME) 'char'
[10](01, 42)-(01, 45): NAME(NAME) 'not'
[10](01, 46)-(01, 48): NAME(NAME) 'in'
[10](01, 49)-(01, 57): NAME(NAME) 'alphabet'
[10](01, 58)-(01, 60): NAME(NAME) 'or'
[10](01, 61)-(01, 65): NAME(NAME) 'char'
[10](01, 66)-(01, 68): EQEQUAL(OP) '=='
[10](01, 69)-(01, 75): NAME(NAME) 'string'
[10](01, 75)-(01, 76): LSQB(OP) '['
[10](01, 76)-(01, 79): NAME(NAME) 'len'
[10](01, 79)-(01, 80): LPAR(OP) '('
[10](01, 80)-(01, 86): NAME(NAME) 'string'
[10](01, 86)-(01, 87): RPAR(OP) ')'
[10](01, 87)-(01, 88): MINUS(OP) '-'
[10](01, 88)-(01, 89): NUMBER(NUMBER) '1'
[10](01, 89)-(01, 90): RSQB(OP) ']'
[10](01, 90)-(01, 91): RPAR(OP) ')'
[10](01, 91)-(01, 92): COLON(OP) ':'
[10](01, 92)-(01, 93): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 12): INDENT(INDENT) '            '
[11](01, 12)-(01, 20): NAME(NAME) 'end_word'
[11](01, 21)-(01, 22): EQUAL(OP) '='
[11](01, 23)-(01, 27): NAME(NAME) 'True'
[11](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 08)-(01, 09): NL(NL) '\n'
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 08): INDENT(INDENT) '        '
[13](01, 08)-(01, 10): NAME(NAME) 'if'
[13](01, 11)-(01, 19): NAME(NAME) 'end_word'
[13](01, 20)-(01, 22): EQEQUAL(OP) '=='
[13](01, 23)-(01, 27): NAME(NAME) 'True'
[13](01, 27)-(01, 28): COLON(OP) ':'
[13](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 12): INDENT(INDENT) '            '
[14](01, 12)-(01, 17): NAME(NAME) 'count'
[14](01, 18)-(01, 20): PLUSEQUAL(OP) '+='
[14](01, 20)-(01, 21): NUMBER(NUMBER) '1'
[14](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 04)-(01, 05): NL(NL) '\n'
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 04): INDENT(INDENT) '    '
[16](01, 04)-(01, 09): NAME(NAME) 'print'
[16](01, 09)-(01, 10): LPAR(OP) '('
[16](01, 10)-(01, 15): NAME(NAME) 'count'
[16](01, 15)-(01, 16): RPAR(OP) ')'
[16](01, 16)-(01, 17): NEWLINE(NEWLINE)
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

