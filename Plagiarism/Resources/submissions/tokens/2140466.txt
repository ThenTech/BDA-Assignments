[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 06): NAME(NAME) 'input1'
[00](01, 07)-(01, 08): EQUAL(OP) '='
[00](01, 09)-(01, 14): NAME(NAME) 'input'
[00](01, 14)-(01, 15): LPAR(OP) '('
[00](01, 15)-(01, 16): RPAR(OP) ')'
[00](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 06): NAME(NAME) 'input2'
[01](01, 07)-(01, 08): EQUAL(OP) '='
[01](01, 09)-(01, 14): NAME(NAME) 'input'
[01](01, 14)-(01, 15): LPAR(OP) '('
[01](01, 15)-(01, 16): RPAR(OP) ')'
[01](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 01): NAME(NAME) 'i'
[02](01, 02)-(01, 03): EQUAL(OP) '='
[02](01, 04)-(01, 05): NUMBER(NUMBER) '0'
[02](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 01): NAME(NAME) 'j'
[03](01, 02)-(01, 03): EQUAL(OP) '='
[03](01, 04)-(01, 05): NUMBER(NUMBER) '0'
[03](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 01): NL(NL) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 05): NAME(NAME) 'while'
[05](01, 06)-(01, 07): LPAR(OP) '('
[05](01, 07)-(01, 11): NAME(NAME) 'True'
[05](01, 11)-(01, 12): RPAR(OP) ')'
[05](01, 12)-(01, 13): COLON(OP) ':'
[05](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 04): INDENT(INDENT) '    '
[06](01, 04)-(01, 06): NAME(NAME) 'if'
[06](01, 07)-(01, 13): NAME(NAME) 'input1'
[06](01, 13)-(01, 14): LSQB(OP) '['
[06](01, 14)-(01, 15): NAME(NAME) 'i'
[06](01, 15)-(01, 16): RSQB(OP) ']'
[06](01, 17)-(01, 19): NOTEQUAL(OP) '!='
[06](01, 20)-(01, 26): NAME(NAME) 'input2'
[06](01, 26)-(01, 27): LSQB(OP) '['
[06](01, 27)-(01, 28): NAME(NAME) 'j'
[06](01, 28)-(01, 29): RSQB(OP) ']'
[06](01, 29)-(01, 30): COLON(OP) ':'
[06](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 08): INDENT(INDENT) '        '
[07](01, 08)-(01, 09): NAME(NAME) 'j'
[07](01, 10)-(01, 12): PLUSEQUAL(OP) '+='
[07](01, 13)-(01, 14): NUMBER(NUMBER) '1'
[07](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 08): INDENT(INDENT) '        '
[08](01, 08)-(01, 16): NAME(NAME) 'continue'
[08](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 08): NAME(NAME) 'elif'
[09](01, 09)-(01, 10): NAME(NAME) 'j'
[09](01, 11)-(01, 13): EQEQUAL(OP) '=='
[09](01, 14)-(01, 17): NAME(NAME) 'len'
[09](01, 17)-(01, 18): LPAR(OP) '('
[09](01, 18)-(01, 24): NAME(NAME) 'input1'
[09](01, 24)-(01, 25): RPAR(OP) ')'
[09](01, 25)-(01, 26): COLON(OP) ':'
[09](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 08): INDENT(INDENT) '        '
[10](01, 08)-(01, 13): NAME(NAME) 'print'
[10](01, 13)-(01, 14): LPAR(OP) '('
[10](01, 14)-(01, 20): NAME(NAME) 'input1'
[10](01, 20)-(01, 21): COMMA(OP) ','
[10](01, 21)-(01, 26): STRING(STRING) "'and'"
[10](01, 26)-(01, 27): COMMA(OP) ','
[10](01, 28)-(01, 34): NAME(NAME) 'input2'
[10](01, 34)-(01, 35): COMMA(OP) ','
[10](01, 36)-(01, 54): STRING(STRING) "'are not anagrams'"
[10](01, 54)-(01, 55): RPAR(OP) ')'
[10](01, 55)-(01, 56): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 08): INDENT(INDENT) '        '
[11](01, 08)-(01, 13): NAME(NAME) 'break'
[11](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 04): INDENT(INDENT) '    '
[12](01, 04)-(01, 08): NAME(NAME) 'elif'
[12](01, 09)-(01, 10): NAME(NAME) 'i'
[12](01, 11)-(01, 13): EQEQUAL(OP) '=='
[12](01, 14)-(01, 17): NAME(NAME) 'len'
[12](01, 17)-(01, 18): LPAR(OP) '('
[12](01, 18)-(01, 24): NAME(NAME) 'input1'
[12](01, 24)-(01, 25): RPAR(OP) ')'
[12](01, 25)-(01, 26): MINUS(OP) '-'
[12](01, 26)-(01, 27): NUMBER(NUMBER) '1'
[12](01, 27)-(01, 28): COLON(OP) ':'
[12](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 08): INDENT(INDENT) '        '
[13](01, 08)-(01, 13): NAME(NAME) 'print'
[13](01, 13)-(01, 14): LPAR(OP) '('
[13](01, 14)-(01, 20): NAME(NAME) 'input1'
[13](01, 20)-(01, 21): COMMA(OP) ','
[13](01, 22)-(01, 27): STRING(STRING) "'and'"
[13](01, 27)-(01, 28): COMMA(OP) ','
[13](01, 29)-(01, 35): NAME(NAME) 'input2'
[13](01, 35)-(01, 36): COMMA(OP) ','
[13](01, 37)-(01, 51): STRING(STRING) "'are anagrams'"
[13](01, 51)-(01, 52): RPAR(OP) ')'
[13](01, 52)-(01, 53): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 08): INDENT(INDENT) '        '
[14](01, 08)-(01, 13): NAME(NAME) 'break'
[14](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 04): INDENT(INDENT) '    '
[15](01, 04)-(01, 08): NAME(NAME) 'else'
[15](01, 08)-(01, 09): COLON(OP) ':'
[15](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 08): INDENT(INDENT) '        '
[16](01, 08)-(01, 09): NAME(NAME) 'i'
[16](01, 10)-(01, 12): PLUSEQUAL(OP) '+='
[16](01, 13)-(01, 14): NUMBER(NUMBER) '1'
[16](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 08): INDENT(INDENT) '        '
[17](01, 08)-(01, 09): NAME(NAME) 'j'
[17](01, 10)-(01, 11): EQUAL(OP) '='
[17](01, 12)-(01, 13): NUMBER(NUMBER) '0'
[17](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 08): INDENT(INDENT) '        '
[18](01, 08)-(01, 16): NAME(NAME) 'continue'
[18](01, 16)-(01, 17): NEWLINE(NEWLINE)
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

