[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 26): NAME(NAME) 'is_palindrome_sentence'
[00](01, 26)-(01, 27): LPAR(OP) '('
[00](01, 27)-(01, 35): NAME(NAME) 'sentence'
[00](01, 35)-(01, 36): RPAR(OP) ')'
[00](01, 36)-(01, 37): COLON(OP) ':'
[00](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 05): NAME(NAME) 'n'
[01](01, 06)-(01, 07): EQUAL(OP) '='
[01](01, 08)-(01, 11): NAME(NAME) 'len'
[01](01, 11)-(01, 12): LPAR(OP) '('
[01](01, 12)-(01, 20): NAME(NAME) 'sentence'
[01](01, 20)-(01, 21): RPAR(OP) ')'
[01](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 05): NAME(NAME) 'x'
[02](01, 06)-(01, 07): EQUAL(OP) '='
[02](01, 08)-(01, 09): NUMBER(NUMBER) '1'
[02](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 06): NAME(NAME) 'if'
[03](01, 07)-(01, 15): NAME(NAME) 'sentence'
[03](01, 15)-(01, 16): LSQB(OP) '['
[03](01, 16)-(01, 17): NUMBER(NUMBER) '0'
[03](01, 17)-(01, 18): RSQB(OP) ']'
[03](01, 19)-(01, 21): EQEQUAL(OP) '=='
[03](01, 22)-(01, 30): NAME(NAME) 'sentence'
[03](01, 30)-(01, 31): LSQB(OP) '['
[03](01, 31)-(01, 32): NAME(NAME) 'n'
[03](01, 33)-(01, 34): MINUS(OP) '-'
[03](01, 35)-(01, 36): NUMBER(NUMBER) '1'
[03](01, 36)-(01, 37): RSQB(OP) ']'
[03](01, 37)-(01, 38): COLON(OP) ':'
[03](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 08): INDENT(INDENT) '        '
[04](01, 08)-(01, 10): NAME(NAME) 'if'
[04](01, 11)-(01, 19): NAME(NAME) 'sentence'
[04](01, 19)-(01, 20): LSQB(OP) '['
[04](01, 20)-(01, 21): NUMBER(NUMBER) '0'
[04](01, 22)-(01, 23): PLUS(OP) '+'
[04](01, 24)-(01, 25): NAME(NAME) 'x'
[04](01, 25)-(01, 26): RSQB(OP) ']'
[04](01, 27)-(01, 29): EQEQUAL(OP) '=='
[04](01, 30)-(01, 38): NAME(NAME) 'sentence'
[04](01, 38)-(01, 39): LSQB(OP) '['
[04](01, 39)-(01, 40): NAME(NAME) 'n'
[04](01, 41)-(01, 42): MINUS(OP) '-'
[04](01, 43)-(01, 44): NUMBER(NUMBER) '1'
[04](01, 45)-(01, 46): MINUS(OP) '-'
[04](01, 47)-(01, 48): NAME(NAME) 'x'
[04](01, 48)-(01, 49): RSQB(OP) ']'
[04](01, 49)-(01, 50): COLON(OP) ':'
[04](01, 50)-(01, 51): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 12): INDENT(INDENT) '            '
[05](01, 12)-(01, 18): NAME(NAME) 'return'
[05](01, 19)-(01, 23): NAME(NAME) 'True'
[05](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 04): INDENT(INDENT) '    '
[06](01, 04)-(01, 08): NAME(NAME) 'else'
[06](01, 08)-(01, 09): COLON(OP) ':'
[06](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 08): INDENT(INDENT) '        '
[07](01, 08)-(01, 14): NAME(NAME) 'return'
[07](01, 15)-(01, 20): NAME(NAME) 'False'
[07](01, 20)-(01, 21): NEWLINE(NEWLINE)
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

