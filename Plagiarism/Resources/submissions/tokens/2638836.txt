[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 10): NAME(NAME) 'filter'
[00](01, 10)-(01, 11): LPAR(OP) '('
[00](01, 11)-(01, 12): NAME(NAME) 's'
[00](01, 12)-(01, 13): RPAR(OP) ')'
[00](01, 13)-(01, 14): COLON(OP) ':'
[00](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 09): NAME(NAME) 'new_s'
[01](01, 10)-(01, 11): EQUAL(OP) '='
[01](01, 12)-(01, 14): STRING(STRING) '""'
[01](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 07): NAME(NAME) 'for'
[02](01, 08)-(01, 09): NAME(NAME) 'i'
[02](01, 10)-(01, 12): NAME(NAME) 'in'
[02](01, 13)-(01, 18): NAME(NAME) 'range'
[02](01, 18)-(01, 19): LPAR(OP) '('
[02](01, 19)-(01, 22): NAME(NAME) 'len'
[02](01, 22)-(01, 23): LPAR(OP) '('
[02](01, 23)-(01, 24): NAME(NAME) 's'
[02](01, 24)-(01, 25): RPAR(OP) ')'
[02](01, 25)-(01, 26): RPAR(OP) ')'
[02](01, 26)-(01, 27): COLON(OP) ':'
[02](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 08): INDENT(INDENT) '        '
[03](01, 08)-(01, 10): NAME(NAME) 'if'
[03](01, 11)-(01, 14): STRING(STRING) '"A"'
[03](01, 15)-(01, 17): LESSEQUAL(OP) '<='
[03](01, 18)-(01, 19): NAME(NAME) 's'
[03](01, 19)-(01, 20): LSQB(OP) '['
[03](01, 20)-(01, 21): NAME(NAME) 'i'
[03](01, 21)-(01, 22): RSQB(OP) ']'
[03](01, 23)-(01, 25): LESSEQUAL(OP) '<='
[03](01, 26)-(01, 29): STRING(STRING) '"Z"'
[03](01, 29)-(01, 30): COLON(OP) ':'
[03](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 12): INDENT(INDENT) '            '
[04](01, 12)-(01, 17): NAME(NAME) 'new_s'
[04](01, 18)-(01, 20): PLUSEQUAL(OP) '+='
[04](01, 21)-(01, 24): NAME(NAME) 'chr'
[04](01, 24)-(01, 25): LPAR(OP) '('
[04](01, 25)-(01, 28): NAME(NAME) 'ord'
[04](01, 28)-(01, 29): LPAR(OP) '('
[04](01, 29)-(01, 32): STRING(STRING) '"a"'
[04](01, 32)-(01, 33): RPAR(OP) ')'
[04](01, 34)-(01, 35): PLUS(OP) '+'
[04](01, 36)-(01, 39): NAME(NAME) 'ord'
[04](01, 39)-(01, 40): LPAR(OP) '('
[04](01, 40)-(01, 41): NAME(NAME) 's'
[04](01, 41)-(01, 42): LSQB(OP) '['
[04](01, 42)-(01, 43): NAME(NAME) 'i'
[04](01, 43)-(01, 44): RSQB(OP) ']'
[04](01, 44)-(01, 45): RPAR(OP) ')'
[04](01, 46)-(01, 47): MINUS(OP) '-'
[04](01, 48)-(01, 51): NAME(NAME) 'ord'
[04](01, 51)-(01, 52): LPAR(OP) '('
[04](01, 52)-(01, 55): STRING(STRING) '"A"'
[04](01, 55)-(01, 56): RPAR(OP) ')'
[04](01, 56)-(01, 57): RPAR(OP) ')'
[04](01, 57)-(01, 58): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 08): INDENT(INDENT) '        '
[05](01, 08)-(01, 12): NAME(NAME) 'elif'
[05](01, 13)-(01, 16): STRING(STRING) '"a"'
[05](01, 17)-(01, 19): LESSEQUAL(OP) '<='
[05](01, 20)-(01, 21): NAME(NAME) 's'
[05](01, 21)-(01, 22): LSQB(OP) '['
[05](01, 22)-(01, 23): NAME(NAME) 'i'
[05](01, 23)-(01, 24): RSQB(OP) ']'
[05](01, 25)-(01, 27): LESSEQUAL(OP) '<='
[05](01, 28)-(01, 31): STRING(STRING) '"z"'
[05](01, 31)-(01, 32): COLON(OP) ':'
[05](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 12): INDENT(INDENT) '            '
[06](01, 12)-(01, 17): NAME(NAME) 'new_s'
[06](01, 18)-(01, 20): PLUSEQUAL(OP) '+='
[06](01, 21)-(01, 22): NAME(NAME) 's'
[06](01, 22)-(01, 23): LSQB(OP) '['
[06](01, 23)-(01, 24): NAME(NAME) 'i'
[06](01, 24)-(01, 25): RSQB(OP) ']'
[06](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 04): INDENT(INDENT) '    '
[07](01, 04)-(01, 10): NAME(NAME) 'return'
[07](01, 11)-(01, 16): NAME(NAME) 'new_s'
[07](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 01): NL(NL) '\n'
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 03): NAME(NAME) 'def'
[09](01, 04)-(01, 10): NAME(NAME) 'mirror'
[09](01, 10)-(01, 11): LPAR(OP) '('
[09](01, 11)-(01, 17): NAME(NAME) 'string'
[09](01, 17)-(01, 18): RPAR(OP) ')'
[09](01, 18)-(01, 19): COLON(OP) ':'
[09](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 04): INDENT(INDENT) '    '
[10](01, 04)-(01, 17): NAME(NAME) 'mirror_string'
[10](01, 18)-(01, 19): EQUAL(OP) '='
[10](01, 20)-(01, 22): STRING(STRING) '""'
[10](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 04): INDENT(INDENT) '    '
[11](01, 04)-(01, 07): NAME(NAME) 'for'
[11](01, 08)-(01, 09): NAME(NAME) 'i'
[11](01, 10)-(01, 12): NAME(NAME) 'in'
[11](01, 13)-(01, 18): NAME(NAME) 'range'
[11](01, 18)-(01, 19): LPAR(OP) '('
[11](01, 19)-(01, 22): NAME(NAME) 'len'
[11](01, 22)-(01, 23): LPAR(OP) '('
[11](01, 23)-(01, 29): NAME(NAME) 'string'
[11](01, 29)-(01, 30): RPAR(OP) ')'
[11](01, 30)-(01, 31): RPAR(OP) ')'
[11](01, 31)-(01, 32): COLON(OP) ':'
[11](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 08): INDENT(INDENT) '        '
[12](01, 08)-(01, 21): NAME(NAME) 'mirror_string'
[12](01, 22)-(01, 24): PLUSEQUAL(OP) '+='
[12](01, 25)-(01, 31): NAME(NAME) 'string'
[12](01, 31)-(01, 32): LSQB(OP) '['
[12](01, 32)-(01, 35): NAME(NAME) 'len'
[12](01, 35)-(01, 36): LPAR(OP) '('
[12](01, 36)-(01, 42): NAME(NAME) 'string'
[12](01, 42)-(01, 43): RPAR(OP) ')'
[12](01, 44)-(01, 45): MINUS(OP) '-'
[12](01, 46)-(01, 47): NUMBER(NUMBER) '1'
[12](01, 48)-(01, 49): MINUS(OP) '-'
[12](01, 50)-(01, 51): NAME(NAME) 'i'
[12](01, 51)-(01, 52): RSQB(OP) ']'
[12](01, 52)-(01, 53): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 04): INDENT(INDENT) '    '
[13](01, 04)-(01, 10): NAME(NAME) 'return'
[13](01, 11)-(01, 24): NAME(NAME) 'mirror_string'
[13](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 01): NL(NL) '\n'
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 03): NAME(NAME) 'def'
[15](01, 04)-(01, 26): NAME(NAME) 'is_palindrome_sentence'
[15](01, 26)-(01, 27): LPAR(OP) '('
[15](01, 27)-(01, 35): NAME(NAME) 'sentence'
[15](01, 35)-(01, 36): RPAR(OP) ')'
[15](01, 36)-(01, 37): COLON(OP) ':'
[15](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 04): INDENT(INDENT) '    '
[16](01, 04)-(01, 10): NAME(NAME) 'return'
[16](01, 11)-(01, 17): NAME(NAME) 'filter'
[16](01, 17)-(01, 18): LPAR(OP) '('
[16](01, 18)-(01, 26): NAME(NAME) 'sentence'
[16](01, 26)-(01, 27): RPAR(OP) ')'
[16](01, 28)-(01, 30): EQEQUAL(OP) '=='
[16](01, 31)-(01, 37): NAME(NAME) 'filter'
[16](01, 37)-(01, 38): LPAR(OP) '('
[16](01, 38)-(01, 44): NAME(NAME) 'mirror'
[16](01, 44)-(01, 45): LPAR(OP) '('
[16](01, 45)-(01, 53): NAME(NAME) 'sentence'
[16](01, 53)-(01, 54): RPAR(OP) ')'
[16](01, 54)-(01, 55): RPAR(OP) ')'
[16](01, 55)-(01, 56): NEWLINE(NEWLINE)
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

