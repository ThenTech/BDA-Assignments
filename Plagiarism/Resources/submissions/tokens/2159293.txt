[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 13): NAME(NAME) 'substring'
[00](01, 13)-(01, 14): LPAR(OP) '('
[00](01, 14)-(01, 20): NAME(NAME) 'string'
[00](01, 20)-(01, 21): COMMA(OP) ','
[00](01, 22)-(01, 27): NAME(NAME) 'first'
[00](01, 27)-(01, 28): COMMA(OP) ','
[00](01, 29)-(01, 35): NAME(NAME) 'amount'
[00](01, 35)-(01, 36): RPAR(OP) ')'
[00](01, 36)-(01, 37): COLON(OP) ':'
[00](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 99): STRING(STRING) '"""Returns the substring (starting from first with a length of amount) from the given string"""'
[01](01, 99)-(01, 100): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 09): NAME(NAME) 'total'
[02](01, 10)-(01, 11): EQUAL(OP) '='
[02](01, 12)-(01, 13): NUMBER(NUMBER) '0'
[02](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 09): NAME(NAME) 'count'
[03](01, 10)-(01, 11): EQUAL(OP) '='
[03](01, 12)-(01, 13): NUMBER(NUMBER) '0'
[03](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 08): NAME(NAME) 'word'
[04](01, 09)-(01, 10): EQUAL(OP) '='
[04](01, 11)-(01, 13): STRING(STRING) '""'
[04](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 01): NL(NL) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 04): INDENT(INDENT) '    '
[06](01, 04)-(01, 07): NAME(NAME) 'for'
[06](01, 08)-(01, 14): NAME(NAME) 'letter'
[06](01, 15)-(01, 17): NAME(NAME) 'in'
[06](01, 18)-(01, 24): NAME(NAME) 'string'
[06](01, 24)-(01, 25): COLON(OP) ':'
[06](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 08): INDENT(INDENT) '        '
[07](01, 08)-(01, 13): NAME(NAME) 'total'
[07](01, 14)-(01, 16): PLUSEQUAL(OP) '+='
[07](01, 17)-(01, 18): NUMBER(NUMBER) '1'
[07](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 08): INDENT(INDENT) '        '
[08](01, 08)-(01, 10): NAME(NAME) 'if'
[08](01, 11)-(01, 16): NAME(NAME) 'total'
[08](01, 17)-(01, 18): GREATER(OP) '>'
[08](01, 19)-(01, 24): NAME(NAME) 'first'
[08](01, 25)-(01, 28): NAME(NAME) 'and'
[08](01, 29)-(01, 34): NAME(NAME) 'count'
[08](01, 35)-(01, 36): LESS(OP) '<'
[08](01, 37)-(01, 43): NAME(NAME) 'amount'
[08](01, 43)-(01, 44): COLON(OP) ':'
[08](01, 44)-(01, 45): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 12): INDENT(INDENT) '            '
[09](01, 12)-(01, 16): NAME(NAME) 'word'
[09](01, 17)-(01, 19): PLUSEQUAL(OP) '+='
[09](01, 20)-(01, 26): NAME(NAME) 'letter'
[09](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 12): INDENT(INDENT) '            '
[10](01, 12)-(01, 17): NAME(NAME) 'count'
[10](01, 18)-(01, 20): PLUSEQUAL(OP) '+='
[10](01, 21)-(01, 22): NUMBER(NUMBER) '1'
[10](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 04): INDENT(INDENT) '    '
[11](01, 04)-(01, 10): NAME(NAME) 'return'
[11](01, 11)-(01, 15): NAME(NAME) 'word'
[11](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 01): NL(NL) '\n'
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 01): NL(NL) '\n'
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 01): NL(NL) '\n'
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 01): NL(NL) '\n'
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 03): NAME(NAME) 'def'
[16](01, 04)-(01, 12): NAME(NAME) 'find_pos'
[16](01, 12)-(01, 13): LPAR(OP) '('
[16](01, 13)-(01, 25): NAME(NAME) 'word_to_find'
[16](01, 25)-(01, 26): COMMA(OP) ','
[16](01, 27)-(01, 37): NAME(NAME) 'the_string'
[16](01, 37)-(01, 38): RPAR(OP) ')'
[16](01, 38)-(01, 39): COLON(OP) ':'
[16](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 04): INDENT(INDENT) '    '
[17](01, 04)-(01, 12): NAME(NAME) 'position'
[17](01, 13)-(01, 14): EQUAL(OP) '='
[17](01, 15)-(01, 16): NUMBER(NUMBER) '0'
[17](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 04): INDENT(INDENT) '    '
[18](01, 04)-(01, 09): NAME(NAME) 'count'
[18](01, 10)-(01, 11): EQUAL(OP) '='
[18](01, 12)-(01, 13): NUMBER(NUMBER) '0'
[18](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 04): INDENT(INDENT) '    '
[19](01, 04)-(01, 09): NAME(NAME) 'found'
[19](01, 10)-(01, 11): EQUAL(OP) '='
[19](01, 12)-(01, 16): NAME(NAME) 'True'
[19](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): DEDENT(DEDENT)
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 01): NL(NL) '\n'
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 04): INDENT(INDENT) '    '
[21](01, 04)-(01, 20): NAME(NAME) 'word_to_find_len'
[21](01, 21)-(01, 22): EQUAL(OP) '='
[21](01, 23)-(01, 26): NAME(NAME) 'len'
[21](01, 26)-(01, 27): LPAR(OP) '('
[21](01, 27)-(01, 39): NAME(NAME) 'word_to_find'
[21](01, 39)-(01, 40): RPAR(OP) ')'
[21](01, 40)-(01, 41): NEWLINE(NEWLINE) '\n'
[21](02, 00)-(02, 00): DEDENT(DEDENT)
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 04): INDENT(INDENT) '    '
[22](01, 04)-(01, 18): NAME(NAME) 'the_string_len'
[22](01, 20)-(01, 21): EQUAL(OP) '='
[22](01, 22)-(01, 25): NAME(NAME) 'len'
[22](01, 25)-(01, 26): LPAR(OP) '('
[22](01, 26)-(01, 36): NAME(NAME) 'the_string'
[22](01, 36)-(01, 37): RPAR(OP) ')'
[22](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[22](02, 00)-(02, 00): DEDENT(DEDENT)
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[23](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[23](01, 04)-(01, 05): NL(NL) '\n'
[23](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[24](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[24](01, 00)-(01, 01): NL(NL) '\n'
[24](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[25](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[25](01, 00)-(01, 04): INDENT(INDENT) '    '
[25](01, 04)-(01, 07): NAME(NAME) 'for'
[25](01, 08)-(01, 14): NAME(NAME) 'letter'
[25](01, 15)-(01, 17): NAME(NAME) 'in'
[25](01, 18)-(01, 28): NAME(NAME) 'the_string'
[25](01, 28)-(01, 29): COLON(OP) ':'
[25](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[25](02, 00)-(02, 00): DEDENT(DEDENT)
[25](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[26](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[26](01, 00)-(01, 08): INDENT(INDENT) '        '
[26](01, 08)-(01, 10): NAME(NAME) 'if'
[26](01, 11)-(01, 17): NAME(NAME) 'letter'
[26](01, 18)-(01, 20): EQEQUAL(OP) '=='
[26](01, 21)-(01, 33): NAME(NAME) 'word_to_find'
[26](01, 33)-(01, 34): LSQB(OP) '['
[26](01, 34)-(01, 35): NUMBER(NUMBER) '0'
[26](01, 35)-(01, 36): RSQB(OP) ']'
[26](01, 36)-(01, 37): COLON(OP) ':'
[26](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[26](02, 00)-(02, 00): DEDENT(DEDENT)
[26](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[27](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[27](01, 00)-(01, 01): NL(NL) '\n'
[27](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[28](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[28](01, 00)-(01, 12): INDENT(INDENT) '            '
[28](01, 12)-(01, 15): NAME(NAME) 'for'
[28](01, 16)-(01, 17): NAME(NAME) 'x'
[28](01, 18)-(01, 20): NAME(NAME) 'in'
[28](01, 21)-(01, 26): NAME(NAME) 'range'
[28](01, 26)-(01, 27): LPAR(OP) '('
[28](01, 27)-(01, 43): NAME(NAME) 'word_to_find_len'
[28](01, 43)-(01, 44): RPAR(OP) ')'
[28](01, 44)-(01, 45): COLON(OP) ':'
[28](01, 45)-(01, 46): NEWLINE(NEWLINE) '\n'
[28](02, 00)-(02, 00): DEDENT(DEDENT)
[28](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[29](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[29](01, 00)-(01, 16): INDENT(INDENT) '                '
[29](01, 16)-(01, 18): NAME(NAME) 'if'
[29](01, 19)-(01, 20): LPAR(OP) '('
[29](01, 20)-(01, 34): NAME(NAME) 'the_string_len'
[29](01, 35)-(01, 36): MINUS(OP) '-'
[29](01, 37)-(01, 38): LPAR(OP) '('
[29](01, 38)-(01, 46): NAME(NAME) 'position'
[29](01, 47)-(01, 48): PLUS(OP) '+'
[29](01, 49)-(01, 50): NUMBER(NUMBER) '1'
[29](01, 50)-(01, 51): RPAR(OP) ')'
[29](01, 51)-(01, 52): RPAR(OP) ')'
[29](01, 53)-(01, 54): LESS(OP) '<'
[29](01, 55)-(01, 71): NAME(NAME) 'word_to_find_len'
[29](01, 71)-(01, 72): COLON(OP) ':'
[29](01, 72)-(01, 73): NEWLINE(NEWLINE) '\n'
[29](02, 00)-(02, 00): DEDENT(DEDENT)
[29](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[30](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[30](01, 00)-(01, 20): INDENT(INDENT) '                    '
[30](01, 20)-(01, 26): NAME(NAME) 'return'
[30](01, 27)-(01, 31): NAME(NAME) 'None'
[30](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[30](02, 00)-(02, 00): DEDENT(DEDENT)
[30](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[31](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[31](01, 00)-(01, 16): INDENT(INDENT) '                '
[31](01, 16)-(01, 20): NAME(NAME) 'elif'
[31](01, 21)-(01, 33): NAME(NAME) 'word_to_find'
[31](01, 33)-(01, 34): LSQB(OP) '['
[31](01, 34)-(01, 35): NAME(NAME) 'x'
[31](01, 35)-(01, 36): RSQB(OP) ']'
[31](01, 37)-(01, 39): EQEQUAL(OP) '=='
[31](01, 40)-(01, 50): NAME(NAME) 'the_string'
[31](01, 50)-(01, 51): LSQB(OP) '['
[31](01, 51)-(01, 59): NAME(NAME) 'position'
[31](01, 60)-(01, 61): PLUS(OP) '+'
[31](01, 62)-(01, 63): NAME(NAME) 'x'
[31](01, 63)-(01, 64): RSQB(OP) ']'
[31](01, 65)-(01, 68): NAME(NAME) 'and'
[31](01, 69)-(01, 74): NAME(NAME) 'found'
[31](01, 74)-(01, 75): COLON(OP) ':'
[31](01, 75)-(01, 76): NEWLINE(NEWLINE) '\n'
[31](02, 00)-(02, 00): DEDENT(DEDENT)
[31](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[32](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[32](01, 00)-(01, 20): INDENT(INDENT) '                    '
[32](01, 20)-(01, 25): NAME(NAME) 'count'
[32](01, 26)-(01, 28): PLUSEQUAL(OP) '+='
[32](01, 29)-(01, 30): NUMBER(NUMBER) '1'
[32](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[32](02, 00)-(02, 00): DEDENT(DEDENT)
[32](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[33](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[33](01, 00)-(01, 16): INDENT(INDENT) '                '
[33](01, 16)-(01, 20): NAME(NAME) 'else'
[33](01, 20)-(01, 21): COLON(OP) ':'
[33](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[33](02, 00)-(02, 00): DEDENT(DEDENT)
[33](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[34](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[34](01, 00)-(01, 20): INDENT(INDENT) '                    '
[34](01, 20)-(01, 25): NAME(NAME) 'found'
[34](01, 26)-(01, 27): EQUAL(OP) '='
[34](01, 28)-(01, 33): NAME(NAME) 'False'
[34](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[34](02, 00)-(02, 00): DEDENT(DEDENT)
[34](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[35](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[35](01, 00)-(01, 01): NL(NL) '\n'
[35](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[36](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[36](01, 00)-(01, 16): INDENT(INDENT) '                '
[36](01, 16)-(01, 18): NAME(NAME) 'if'
[36](01, 19)-(01, 24): NAME(NAME) 'count'
[36](01, 25)-(01, 27): EQEQUAL(OP) '=='
[36](01, 28)-(01, 44): NAME(NAME) 'word_to_find_len'
[36](01, 45)-(01, 48): NAME(NAME) 'and'
[36](01, 49)-(01, 54): NAME(NAME) 'found'
[36](01, 54)-(01, 55): COLON(OP) ':'
[36](01, 55)-(01, 56): NEWLINE(NEWLINE) '\n'
[36](02, 00)-(02, 00): DEDENT(DEDENT)
[36](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[37](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[37](01, 00)-(01, 20): INDENT(INDENT) '                    '
[37](01, 20)-(01, 26): NAME(NAME) 'return'
[37](01, 27)-(01, 35): NAME(NAME) 'position'
[37](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[37](02, 00)-(02, 00): DEDENT(DEDENT)
[37](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[38](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[38](01, 08)-(01, 09): NL(NL) '\n'
[38](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[39](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[39](01, 00)-(01, 08): INDENT(INDENT) '        '
[39](01, 08)-(01, 16): NAME(NAME) 'position'
[39](01, 17)-(01, 19): PLUSEQUAL(OP) '+='
[39](01, 20)-(01, 21): NUMBER(NUMBER) '1'
[39](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[39](02, 00)-(02, 00): DEDENT(DEDENT)
[39](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[40](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[40](01, 00)-(01, 01): NL(NL) '\n'
[40](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[41](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[41](01, 00)-(01, 01): NL(NL) '\n'
[41](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[42](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[42](01, 00)-(01, 01): NL(NL) '\n'
[42](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[43](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[43](01, 00)-(01, 01): NL(NL) '\n'
[43](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[44](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[44](01, 00)-(01, 01): NL(NL) '\n'
[44](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[45](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[45](01, 00)-(01, 03): NAME(NAME) 'def'
[45](01, 04)-(01, 13): NAME(NAME) 'in_string'
[45](01, 13)-(01, 14): LPAR(OP) '('
[45](01, 14)-(01, 26): NAME(NAME) 'word_to_find'
[45](01, 26)-(01, 27): COMMA(OP) ','
[45](01, 28)-(01, 38): NAME(NAME) 'the_string'
[45](01, 38)-(01, 39): RPAR(OP) ')'
[45](01, 39)-(01, 40): COLON(OP) ':'
[45](01, 40)-(01, 41): NEWLINE(NEWLINE) '\n'
[45](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[46](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[46](01, 00)-(01, 04): INDENT(INDENT) '    '
[46](01, 04)-(01, 12): NAME(NAME) 'position'
[46](01, 13)-(01, 14): EQUAL(OP) '='
[46](01, 15)-(01, 16): NUMBER(NUMBER) '0'
[46](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[46](02, 00)-(02, 00): DEDENT(DEDENT)
[46](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[47](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[47](01, 00)-(01, 04): INDENT(INDENT) '    '
[47](01, 04)-(01, 09): NAME(NAME) 'count'
[47](01, 10)-(01, 11): EQUAL(OP) '='
[47](01, 12)-(01, 13): NUMBER(NUMBER) '0'
[47](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[47](02, 00)-(02, 00): DEDENT(DEDENT)
[47](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[48](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[48](01, 00)-(01, 01): NL(NL) '\n'
[48](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[49](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[49](01, 00)-(01, 04): INDENT(INDENT) '    '
[49](01, 04)-(01, 07): NAME(NAME) 'for'
[49](01, 08)-(01, 14): NAME(NAME) 'letter'
[49](01, 15)-(01, 17): NAME(NAME) 'in'
[49](01, 18)-(01, 28): NAME(NAME) 'the_string'
[49](01, 28)-(01, 29): COLON(OP) ':'
[49](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[49](02, 00)-(02, 00): DEDENT(DEDENT)
[49](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[50](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[50](01, 00)-(01, 08): INDENT(INDENT) '        '
[50](01, 08)-(01, 10): NAME(NAME) 'if'
[50](01, 11)-(01, 17): NAME(NAME) 'letter'
[50](01, 18)-(01, 20): EQEQUAL(OP) '=='
[50](01, 21)-(01, 33): NAME(NAME) 'word_to_find'
[50](01, 33)-(01, 34): LSQB(OP) '['
[50](01, 34)-(01, 35): NUMBER(NUMBER) '0'
[50](01, 35)-(01, 36): RSQB(OP) ']'
[50](01, 36)-(01, 37): COLON(OP) ':'
[50](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[50](02, 00)-(02, 00): DEDENT(DEDENT)
[50](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[51](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[51](01, 00)-(01, 01): NL(NL) '\n'
[51](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[52](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[52](01, 00)-(01, 12): INDENT(INDENT) '            '
[52](01, 12)-(01, 15): NAME(NAME) 'for'
[52](01, 16)-(01, 17): NAME(NAME) 'x'
[52](01, 18)-(01, 20): NAME(NAME) 'in'
[52](01, 21)-(01, 26): NAME(NAME) 'range'
[52](01, 26)-(01, 27): LPAR(OP) '('
[52](01, 27)-(01, 30): NAME(NAME) 'len'
[52](01, 30)-(01, 31): LPAR(OP) '('
[52](01, 31)-(01, 43): NAME(NAME) 'word_to_find'
[52](01, 43)-(01, 44): RPAR(OP) ')'
[52](01, 44)-(01, 45): RPAR(OP) ')'
[52](01, 45)-(01, 46): COLON(OP) ':'
[52](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[52](02, 00)-(02, 00): DEDENT(DEDENT)
[52](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[53](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[53](01, 00)-(01, 16): INDENT(INDENT) '                '
[53](01, 16)-(01, 18): NAME(NAME) 'if'
[53](01, 19)-(01, 31): NAME(NAME) 'word_to_find'
[53](01, 31)-(01, 32): LSQB(OP) '['
[53](01, 32)-(01, 33): NAME(NAME) 'x'
[53](01, 33)-(01, 34): RSQB(OP) ']'
[53](01, 35)-(01, 37): EQEQUAL(OP) '=='
[53](01, 38)-(01, 48): NAME(NAME) 'the_string'
[53](01, 48)-(01, 49): LSQB(OP) '['
[53](01, 49)-(01, 57): NAME(NAME) 'position'
[53](01, 58)-(01, 59): PLUS(OP) '+'
[53](01, 60)-(01, 61): NAME(NAME) 'x'
[53](01, 61)-(01, 62): RSQB(OP) ']'
[53](01, 62)-(01, 63): COLON(OP) ':'
[53](01, 63)-(01, 64): NEWLINE(NEWLINE) '\n'
[53](02, 00)-(02, 00): DEDENT(DEDENT)
[53](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[54](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[54](01, 00)-(01, 20): INDENT(INDENT) '                    '
[54](01, 20)-(01, 25): NAME(NAME) 'count'
[54](01, 26)-(01, 28): PLUSEQUAL(OP) '+='
[54](01, 29)-(01, 30): NUMBER(NUMBER) '1'
[54](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[54](02, 00)-(02, 00): DEDENT(DEDENT)
[54](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[55](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[55](01, 00)-(01, 16): INDENT(INDENT) '                '
[55](01, 16)-(01, 20): NAME(NAME) 'else'
[55](01, 20)-(01, 21): COLON(OP) ':'
[55](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[55](02, 00)-(02, 00): DEDENT(DEDENT)
[55](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[56](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[56](01, 00)-(01, 20): INDENT(INDENT) '                    '
[56](01, 20)-(01, 26): NAME(NAME) 'return'
[56](01, 27)-(01, 32): NAME(NAME) 'False'
[56](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[56](02, 00)-(02, 00): DEDENT(DEDENT)
[56](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[57](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[57](01, 00)-(01, 16): INDENT(INDENT) '                '
[57](01, 16)-(01, 18): NAME(NAME) 'if'
[57](01, 19)-(01, 24): NAME(NAME) 'count'
[57](01, 25)-(01, 27): EQEQUAL(OP) '=='
[57](01, 28)-(01, 31): NAME(NAME) 'len'
[57](01, 31)-(01, 32): LPAR(OP) '('
[57](01, 32)-(01, 44): NAME(NAME) 'word_to_find'
[57](01, 44)-(01, 45): RPAR(OP) ')'
[57](01, 45)-(01, 46): COLON(OP) ':'
[57](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[57](02, 00)-(02, 00): DEDENT(DEDENT)
[57](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[58](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[58](01, 00)-(01, 20): INDENT(INDENT) '                    '
[58](01, 20)-(01, 26): NAME(NAME) 'return'
[58](01, 27)-(01, 31): NAME(NAME) 'True'
[58](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[58](02, 00)-(02, 00): DEDENT(DEDENT)
[58](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[59](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[59](01, 08)-(01, 09): NL(NL) '\n'
[59](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[60](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[60](01, 00)-(01, 08): INDENT(INDENT) '        '
[60](01, 08)-(01, 16): NAME(NAME) 'position'
[60](01, 17)-(01, 19): PLUSEQUAL(OP) '+='
[60](01, 20)-(01, 21): NUMBER(NUMBER) '1'
[60](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[60](02, 00)-(02, 00): DEDENT(DEDENT)
[60](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[61](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[61](01, 00)-(01, 04): INDENT(INDENT) '    '
[61](01, 04)-(01, 10): NAME(NAME) 'return'
[61](01, 11)-(01, 16): NAME(NAME) 'False'
[61](01, 16)-(01, 17): NEWLINE(NEWLINE)
[61](02, 00)-(02, 00): DEDENT(DEDENT)
[61](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

