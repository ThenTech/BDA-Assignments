[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 16): NAME(NAME) 'combinations'
[00](01, 16)-(01, 17): LPAR(OP) '('
[00](01, 17)-(01, 18): NAME(NAME) 'm'
[00](01, 18)-(01, 19): COMMA(OP) ','
[00](01, 20)-(01, 26): NAME(NAME) 'prefix'
[00](01, 26)-(01, 27): RPAR(OP) ')'
[00](01, 27)-(01, 28): COLON(OP) ':'
[00](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 10): NAME(NAME) 'global'
[01](01, 11)-(01, 17): NAME(NAME) 'subset'
[01](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 06): NAME(NAME) 'if'
[02](01, 07)-(01, 10): NAME(NAME) 'len'
[02](01, 10)-(01, 11): LPAR(OP) '('
[02](01, 11)-(01, 17): NAME(NAME) 'prefix'
[02](01, 17)-(01, 18): RPAR(OP) ')'
[02](01, 19)-(01, 21): EQEQUAL(OP) '=='
[02](01, 22)-(01, 23): NAME(NAME) 'm'
[02](01, 23)-(01, 24): PLUS(OP) '+'
[02](01, 24)-(01, 25): NUMBER(NUMBER) '3'
[02](01, 25)-(01, 26): COLON(OP) ':'
[02](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 08): INDENT(INDENT) '        '
[03](01, 08)-(01, 13): NAME(NAME) 'print'
[03](01, 13)-(01, 14): LPAR(OP) '('
[03](01, 14)-(01, 20): NAME(NAME) 'prefix'
[03](01, 20)-(01, 21): RPAR(OP) ')'
[03](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 08): NAME(NAME) 'else'
[04](01, 08)-(01, 09): COLON(OP) ':'
[04](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 08): INDENT(INDENT) '        '
[05](01, 08)-(01, 11): NAME(NAME) 'for'
[05](01, 12)-(01, 16): NAME(NAME) 'base'
[05](01, 17)-(01, 19): NAME(NAME) 'in'
[05](01, 20)-(01, 26): NAME(NAME) 'subset'
[05](01, 26)-(01, 27): COLON(OP) ':'
[05](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 12): INDENT(INDENT) '            '
[06](01, 12)-(01, 14): NAME(NAME) 'if'
[06](01, 15)-(01, 19): NAME(NAME) 'base'
[06](01, 20)-(01, 23): NAME(NAME) 'not'
[06](01, 24)-(01, 26): NAME(NAME) 'in'
[06](01, 27)-(01, 33): NAME(NAME) 'prefix'
[06](01, 33)-(01, 34): COLON(OP) ':'
[06](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 16): INDENT(INDENT) '                '
[07](01, 16)-(01, 20): NAME(NAME) 'base'
[07](01, 21)-(01, 23): PLUSEQUAL(OP) '+='
[07](01, 24)-(01, 27): STRING(STRING) "' '"
[07](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 16): INDENT(INDENT) '                '
[08](01, 16)-(01, 28): NAME(NAME) 'combinations'
[08](01, 28)-(01, 29): LPAR(OP) '('
[08](01, 29)-(01, 30): NAME(NAME) 'm'
[08](01, 30)-(01, 31): COMMA(OP) ','
[08](01, 32)-(01, 38): NAME(NAME) 'prefix'
[08](01, 39)-(01, 40): PLUS(OP) '+'
[08](01, 41)-(01, 45): NAME(NAME) 'base'
[08](01, 45)-(01, 46): RPAR(OP) ')'
[08](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 01): NL(NL) '\n'
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 01): NL(NL) '\n'
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 01): NAME(NAME) 'n'
[11](01, 02)-(01, 03): EQUAL(OP) '='
[11](01, 04)-(01, 07): NAME(NAME) 'int'
[11](01, 07)-(01, 08): LPAR(OP) '('
[11](01, 08)-(01, 13): NAME(NAME) 'input'
[11](01, 13)-(01, 14): LPAR(OP) '('
[11](01, 14)-(01, 30): STRING(STRING) "'Subset {1-n}: '"
[11](01, 30)-(01, 31): RPAR(OP) ')'
[11](01, 31)-(01, 32): RPAR(OP) ')'
[11](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 01): NAME(NAME) 'm'
[12](01, 02)-(01, 03): EQUAL(OP) '='
[12](01, 04)-(01, 07): NAME(NAME) 'int'
[12](01, 07)-(01, 08): LPAR(OP) '('
[12](01, 08)-(01, 13): NAME(NAME) 'input'
[12](01, 13)-(01, 14): LPAR(OP) '('
[12](01, 14)-(01, 28): STRING(STRING) "'Max length: '"
[12](01, 28)-(01, 29): RPAR(OP) ')'
[12](01, 29)-(01, 30): RPAR(OP) ')'
[12](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 06): NAME(NAME) 'subset'
[13](01, 07)-(01, 08): EQUAL(OP) '='
[13](01, 09)-(01, 11): STRING(STRING) "''"
[13](01, 11)-(01, 12): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 01): NL(NL) '\n'
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 03): NAME(NAME) 'for'
[15](01, 04)-(01, 10): NAME(NAME) 'number'
[15](01, 11)-(01, 13): NAME(NAME) 'in'
[15](01, 14)-(01, 19): NAME(NAME) 'range'
[15](01, 19)-(01, 20): LPAR(OP) '('
[15](01, 20)-(01, 21): NAME(NAME) 'n'
[15](01, 21)-(01, 22): COMMA(OP) ','
[15](01, 23)-(01, 24): NUMBER(NUMBER) '0'
[15](01, 24)-(01, 25): COMMA(OP) ','
[15](01, 26)-(01, 27): MINUS(OP) '-'
[15](01, 27)-(01, 28): NUMBER(NUMBER) '1'
[15](01, 28)-(01, 29): RPAR(OP) ')'
[15](01, 29)-(01, 30): COLON(OP) ':'
[15](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 04): INDENT(INDENT) '    '
[16](01, 04)-(01, 10): NAME(NAME) 'subset'
[16](01, 11)-(01, 13): PLUSEQUAL(OP) '+='
[16](01, 14)-(01, 17): NAME(NAME) 'str'
[16](01, 17)-(01, 18): LPAR(OP) '('
[16](01, 18)-(01, 24): NAME(NAME) 'number'
[16](01, 24)-(01, 25): RPAR(OP) ')'
[16](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 01): NL(NL) '\n'
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 12): NAME(NAME) 'combinations'
[18](01, 12)-(01, 13): LPAR(OP) '('
[18](01, 13)-(01, 14): NAME(NAME) 'm'
[18](01, 14)-(01, 15): COMMA(OP) ','
[18](01, 16)-(01, 18): STRING(STRING) "''"
[18](01, 18)-(01, 19): RPAR(OP) ')'
[18](01, 19)-(01, 20): NEWLINE(NEWLINE)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

