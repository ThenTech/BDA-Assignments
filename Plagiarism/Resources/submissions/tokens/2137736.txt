[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 01): NAME(NAME) 'w'
[00](01, 02)-(01, 03): EQUAL(OP) '='
[00](01, 04)-(01, 09): NAME(NAME) 'input'
[00](01, 09)-(01, 10): LPAR(OP) '('
[00](01, 10)-(01, 11): RPAR(OP) ')'
[00](01, 11)-(01, 12): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 01): NAME(NAME) 'i'
[01](01, 02)-(01, 03): EQUAL(OP) '='
[01](01, 04)-(01, 05): NUMBER(NUMBER) '0'
[01](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 01): NAME(NAME) 'j'
[02](01, 02)-(01, 03): EQUAL(OP) '='
[02](01, 04)-(01, 07): NAME(NAME) 'len'
[02](01, 07)-(01, 08): LPAR(OP) '('
[02](01, 08)-(01, 09): NAME(NAME) 'w'
[02](01, 09)-(01, 10): RPAR(OP) ')'
[02](01, 10)-(01, 11): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 07): NAME(NAME) 'isPlain'
[03](01, 08)-(01, 09): EQUAL(OP) '='
[03](01, 10)-(01, 27): STRING(STRING) '"is a palindrome"'
[03](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 05): NAME(NAME) 'while'
[04](01, 06)-(01, 07): NAME(NAME) 'i'
[04](01, 08)-(01, 09): LESS(OP) '<'
[04](01, 10)-(01, 13): NAME(NAME) 'len'
[04](01, 13)-(01, 14): LPAR(OP) '('
[04](01, 14)-(01, 15): NAME(NAME) 'w'
[04](01, 15)-(01, 16): RPAR(OP) ')'
[04](01, 17)-(01, 20): NAME(NAME) 'and'
[04](01, 21)-(01, 22): NAME(NAME) 'j'
[04](01, 23)-(01, 25): GREATEREQUAL(OP) '>='
[04](01, 26)-(01, 27): NUMBER(NUMBER) '0'
[04](01, 27)-(01, 28): COLON(OP) ':'
[04](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 06): NAME(NAME) 'if'
[05](01, 07)-(01, 08): NAME(NAME) 'w'
[05](01, 08)-(01, 09): LSQB(OP) '['
[05](01, 09)-(01, 10): NAME(NAME) 'i'
[05](01, 10)-(01, 11): RSQB(OP) ']'
[05](01, 12)-(01, 14): NOTEQUAL(OP) '!='
[05](01, 15)-(01, 16): NAME(NAME) 'w'
[05](01, 16)-(01, 17): LSQB(OP) '['
[05](01, 17)-(01, 18): NAME(NAME) 'j'
[05](01, 19)-(01, 20): MINUS(OP) '-'
[05](01, 21)-(01, 22): NUMBER(NUMBER) '1'
[05](01, 22)-(01, 23): RSQB(OP) ']'
[05](01, 23)-(01, 24): COLON(OP) ':'
[05](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 08): INDENT(INDENT) '        '
[06](01, 08)-(01, 15): NAME(NAME) 'isPlain'
[06](01, 16)-(01, 17): EQUAL(OP) '='
[06](01, 18)-(01, 39): STRING(STRING) '"is not a palindrome"'
[06](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 01): NL(NL) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 08): INDENT(INDENT) '        '
[08](01, 08)-(01, 13): NAME(NAME) 'break'
[08](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 05): NAME(NAME) 'i'
[09](01, 06)-(01, 08): PLUSEQUAL(OP) '+='
[09](01, 09)-(01, 10): NUMBER(NUMBER) '1'
[09](01, 10)-(01, 11): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 04): INDENT(INDENT) '    '
[10](01, 04)-(01, 05): NAME(NAME) 'j'
[10](01, 06)-(01, 08): MINEQUAL(OP) '-='
[10](01, 09)-(01, 10): NUMBER(NUMBER) '1'
[10](01, 10)-(01, 11): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 05): NAME(NAME) 'print'
[11](01, 05)-(01, 06): LPAR(OP) '('
[11](01, 06)-(01, 07): NAME(NAME) 'w'
[11](01, 07)-(01, 08): COMMA(OP) ','
[11](01, 09)-(01, 16): NAME(NAME) 'isPlain'
[11](01, 16)-(01, 17): RPAR(OP) ')'
[11](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

