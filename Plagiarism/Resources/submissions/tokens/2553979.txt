[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 10): NAME(NAME) 'filter'
[00](01, 10)-(01, 11): LPAR(OP) '('
[00](01, 11)-(01, 17): NAME(NAME) 'string'
[00](01, 17)-(01, 18): RPAR(OP) ')'
[00](01, 18)-(01, 19): COLON(OP) ':'
[00](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 21): NAME(NAME) 'gefilterde_string'
[01](01, 22)-(01, 23): EQUAL(OP) '='
[01](01, 24)-(01, 26): STRING(STRING) '""'
[01](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 07): NAME(NAME) 'for'
[02](01, 08)-(01, 10): NAME(NAME) 'ch'
[02](01, 11)-(01, 13): NAME(NAME) 'in'
[02](01, 14)-(01, 19): NAME(NAME) 'range'
[02](01, 19)-(01, 20): LPAR(OP) '('
[02](01, 20)-(01, 23): NAME(NAME) 'len'
[02](01, 23)-(01, 24): LPAR(OP) '('
[02](01, 24)-(01, 30): NAME(NAME) 'string'
[02](01, 30)-(01, 31): RPAR(OP) ')'
[02](01, 31)-(01, 32): RPAR(OP) ')'
[02](01, 32)-(01, 33): COLON(OP) ':'
[02](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 08): INDENT(INDENT) '        '
[03](01, 08)-(01, 10): NAME(NAME) 'if'
[03](01, 11)-(01, 13): NUMBER(NUMBER) '97'
[03](01, 14)-(01, 16): LESSEQUAL(OP) '<='
[03](01, 17)-(01, 20): NAME(NAME) 'ord'
[03](01, 20)-(01, 21): LPAR(OP) '('
[03](01, 21)-(01, 27): NAME(NAME) 'string'
[03](01, 27)-(01, 28): LSQB(OP) '['
[03](01, 28)-(01, 30): NAME(NAME) 'ch'
[03](01, 30)-(01, 31): RSQB(OP) ']'
[03](01, 31)-(01, 32): RPAR(OP) ')'
[03](01, 33)-(01, 35): LESSEQUAL(OP) '<='
[03](01, 36)-(01, 39): NUMBER(NUMBER) '122'
[03](01, 39)-(01, 40): COLON(OP) ':'
[03](01, 40)-(01, 41): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 12): INDENT(INDENT) '            '
[04](01, 12)-(01, 29): NAME(NAME) 'gefilterde_string'
[04](01, 30)-(01, 31): EQUAL(OP) '='
[04](01, 32)-(01, 49): NAME(NAME) 'gefilterde_string'
[04](01, 50)-(01, 51): PLUS(OP) '+'
[04](01, 52)-(01, 58): NAME(NAME) 'string'
[04](01, 58)-(01, 59): LSQB(OP) '['
[04](01, 59)-(01, 61): NAME(NAME) 'ch'
[04](01, 61)-(01, 62): RSQB(OP) ']'
[04](01, 62)-(01, 63): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 10): NAME(NAME) 'return'
[05](01, 11)-(01, 28): NAME(NAME) 'gefilterde_string'
[05](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 01): NL(NL) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 03): NAME(NAME) 'def'
[07](01, 04)-(01, 10): NAME(NAME) 'teller'
[07](01, 10)-(01, 11): LPAR(OP) '('
[07](01, 11)-(01, 17): NAME(NAME) 'string'
[07](01, 17)-(01, 18): RPAR(OP) ')'
[07](01, 18)-(01, 19): COLON(OP) ':'
[07](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 04): INDENT(INDENT) '    '
[08](01, 04)-(01, 12): NAME(NAME) 'alphabet'
[08](01, 13)-(01, 14): EQUAL(OP) '='
[08](01, 15)-(01, 16): LSQB(OP) '['
[08](01, 16)-(01, 17): NUMBER(NUMBER) '0'
[08](01, 17)-(01, 18): COMMA(OP) ','
[08](01, 19)-(01, 20): NUMBER(NUMBER) '0'
[08](01, 20)-(01, 21): COMMA(OP) ','
[08](01, 22)-(01, 23): NUMBER(NUMBER) '0'
[08](01, 23)-(01, 24): COMMA(OP) ','
[08](01, 25)-(01, 26): NUMBER(NUMBER) '0'
[08](01, 26)-(01, 27): COMMA(OP) ','
[08](01, 28)-(01, 29): NUMBER(NUMBER) '0'
[08](01, 29)-(01, 30): COMMA(OP) ','
[08](01, 31)-(01, 32): NUMBER(NUMBER) '0'
[08](01, 32)-(01, 33): COMMA(OP) ','
[08](01, 34)-(01, 35): NUMBER(NUMBER) '0'
[08](01, 35)-(01, 36): COMMA(OP) ','
[08](01, 37)-(01, 38): NUMBER(NUMBER) '0'
[08](01, 38)-(01, 39): COMMA(OP) ','
[08](01, 40)-(01, 41): NUMBER(NUMBER) '0'
[08](01, 41)-(01, 42): COMMA(OP) ','
[08](01, 43)-(01, 44): NUMBER(NUMBER) '0'
[08](01, 44)-(01, 45): COMMA(OP) ','
[08](01, 46)-(01, 47): NUMBER(NUMBER) '0'
[08](01, 47)-(01, 48): COMMA(OP) ','
[08](01, 49)-(01, 50): NUMBER(NUMBER) '0'
[08](01, 50)-(01, 51): COMMA(OP) ','
[08](01, 52)-(01, 53): NUMBER(NUMBER) '0'
[08](01, 53)-(01, 54): COMMA(OP) ','
[08](01, 55)-(01, 56): NUMBER(NUMBER) '0'
[08](01, 56)-(01, 57): COMMA(OP) ','
[08](01, 58)-(01, 59): NUMBER(NUMBER) '0'
[08](01, 59)-(01, 60): COMMA(OP) ','
[08](01, 61)-(01, 62): NUMBER(NUMBER) '0'
[08](01, 62)-(01, 63): COMMA(OP) ','
[08](01, 64)-(01, 65): NUMBER(NUMBER) '0'
[08](01, 65)-(01, 66): COMMA(OP) ','
[08](01, 67)-(01, 68): NUMBER(NUMBER) '0'
[08](01, 68)-(01, 69): COMMA(OP) ','
[08](01, 70)-(01, 71): NUMBER(NUMBER) '0'
[08](01, 71)-(01, 72): COMMA(OP) ','
[08](01, 73)-(01, 74): NUMBER(NUMBER) '0'
[08](01, 74)-(01, 75): COMMA(OP) ','
[08](01, 76)-(01, 77): NUMBER(NUMBER) '0'
[08](01, 77)-(01, 78): COMMA(OP) ','
[08](01, 79)-(01, 80): NUMBER(NUMBER) '0'
[08](01, 80)-(01, 81): COMMA(OP) ','
[08](01, 82)-(01, 83): NUMBER(NUMBER) '0'
[08](01, 83)-(01, 84): COMMA(OP) ','
[08](01, 85)-(01, 86): NUMBER(NUMBER) '0'
[08](01, 86)-(01, 87): COMMA(OP) ','
[08](01, 88)-(01, 89): NUMBER(NUMBER) '0'
[08](01, 89)-(01, 90): COMMA(OP) ','
[08](01, 91)-(01, 92): NUMBER(NUMBER) '0'
[08](01, 92)-(01, 93): RSQB(OP) ']'
[08](01, 93)-(01, 94): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 07): NAME(NAME) 'for'
[09](01, 08)-(01, 10): NAME(NAME) 'ch'
[09](01, 11)-(01, 13): NAME(NAME) 'in'
[09](01, 14)-(01, 19): NAME(NAME) 'range'
[09](01, 19)-(01, 20): LPAR(OP) '('
[09](01, 20)-(01, 23): NAME(NAME) 'len'
[09](01, 23)-(01, 24): LPAR(OP) '('
[09](01, 24)-(01, 30): NAME(NAME) 'string'
[09](01, 30)-(01, 31): RPAR(OP) ')'
[09](01, 31)-(01, 32): RPAR(OP) ')'
[09](01, 32)-(01, 33): COLON(OP) ':'
[09](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 08): INDENT(INDENT) '        '
[10](01, 08)-(01, 13): NAME(NAME) 'getal'
[10](01, 14)-(01, 15): EQUAL(OP) '='
[10](01, 16)-(01, 19): NAME(NAME) 'ord'
[10](01, 19)-(01, 20): LPAR(OP) '('
[10](01, 20)-(01, 26): NAME(NAME) 'string'
[10](01, 26)-(01, 27): LSQB(OP) '['
[10](01, 27)-(01, 29): NAME(NAME) 'ch'
[10](01, 29)-(01, 30): RSQB(OP) ']'
[10](01, 30)-(01, 31): RPAR(OP) ')'
[10](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 08): INDENT(INDENT) '        '
[11](01, 08)-(01, 13): NAME(NAME) 'getal'
[11](01, 14)-(01, 16): MINEQUAL(OP) '-='
[11](01, 17)-(01, 19): NUMBER(NUMBER) '97'
[11](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 08): INDENT(INDENT) '        '
[12](01, 08)-(01, 16): NAME(NAME) 'alphabet'
[12](01, 16)-(01, 17): LSQB(OP) '['
[12](01, 17)-(01, 22): NAME(NAME) 'getal'
[12](01, 22)-(01, 23): RSQB(OP) ']'
[12](01, 24)-(01, 26): PLUSEQUAL(OP) '+='
[12](01, 27)-(01, 28): NUMBER(NUMBER) '1'
[12](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 04): INDENT(INDENT) '    '
[13](01, 04)-(01, 10): NAME(NAME) 'return'
[13](01, 11)-(01, 19): NAME(NAME) 'alphabet'
[13](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 01): NL(NL) '\n'
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 03): NAME(NAME) 'def'
[15](01, 04)-(01, 13): NAME(NAME) 'uitvoeren'
[15](01, 13)-(01, 14): LPAR(OP) '('
[15](01, 14)-(01, 21): NAME(NAME) 'string1'
[15](01, 21)-(01, 22): COMMA(OP) ','
[15](01, 23)-(01, 30): NAME(NAME) 'string2'
[15](01, 30)-(01, 31): RPAR(OP) ')'
[15](01, 31)-(01, 32): COLON(OP) ':'
[15](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 04): INDENT(INDENT) '    '
[16](01, 04)-(01, 11): NAME(NAME) 'filter1'
[16](01, 12)-(01, 13): EQUAL(OP) '='
[16](01, 14)-(01, 20): NAME(NAME) 'filter'
[16](01, 20)-(01, 21): LPAR(OP) '('
[16](01, 21)-(01, 28): NAME(NAME) 'string1'
[16](01, 28)-(01, 29): RPAR(OP) ')'
[16](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 04): INDENT(INDENT) '    '
[17](01, 04)-(01, 11): NAME(NAME) 'filter2'
[17](01, 12)-(01, 13): EQUAL(OP) '='
[17](01, 14)-(01, 20): NAME(NAME) 'filter'
[17](01, 20)-(01, 21): LPAR(OP) '('
[17](01, 21)-(01, 28): NAME(NAME) 'string2'
[17](01, 28)-(01, 29): RPAR(OP) ')'
[17](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 04)-(01, 05): NL(NL) '\n'
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 04): INDENT(INDENT) '    '
[19](01, 04)-(01, 11): NAME(NAME) 'geteld1'
[19](01, 12)-(01, 13): EQUAL(OP) '='
[19](01, 14)-(01, 20): NAME(NAME) 'teller'
[19](01, 20)-(01, 21): LPAR(OP) '('
[19](01, 21)-(01, 28): NAME(NAME) 'filter1'
[19](01, 28)-(01, 29): RPAR(OP) ')'
[19](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): DEDENT(DEDENT)
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 04): INDENT(INDENT) '    '
[20](01, 04)-(01, 11): NAME(NAME) 'geteld2'
[20](01, 12)-(01, 13): EQUAL(OP) '='
[20](01, 14)-(01, 20): NAME(NAME) 'teller'
[20](01, 20)-(01, 21): LPAR(OP) '('
[20](01, 21)-(01, 28): NAME(NAME) 'filter2'
[20](01, 28)-(01, 29): RPAR(OP) ')'
[20](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[20](02, 00)-(02, 00): DEDENT(DEDENT)
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 04)-(01, 05): NL(NL) '\n'
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 04): INDENT(INDENT) '    '
[22](01, 04)-(01, 06): NAME(NAME) 'if'
[22](01, 07)-(01, 14): NAME(NAME) 'geteld1'
[22](01, 15)-(01, 17): EQEQUAL(OP) '=='
[22](01, 18)-(01, 25): NAME(NAME) 'geteld2'
[22](01, 25)-(01, 26): COLON(OP) ':'
[22](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[22](02, 00)-(02, 00): DEDENT(DEDENT)
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[23](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[23](01, 00)-(01, 08): INDENT(INDENT) '        '
[23](01, 08)-(01, 13): NAME(NAME) 'print'
[23](01, 13)-(01, 14): LPAR(OP) '('
[23](01, 14)-(01, 21): NAME(NAME) 'string1'
[23](01, 21)-(01, 22): COMMA(OP) ','
[23](01, 23)-(01, 28): STRING(STRING) '"and"'
[23](01, 28)-(01, 29): COMMA(OP) ','
[23](01, 30)-(01, 37): NAME(NAME) 'string2'
[23](01, 37)-(01, 38): COMMA(OP) ','
[23](01, 39)-(01, 53): STRING(STRING) '"are anagrams"'
[23](01, 53)-(01, 54): RPAR(OP) ')'
[23](01, 54)-(01, 55): NEWLINE(NEWLINE) '\n'
[23](02, 00)-(02, 00): DEDENT(DEDENT)
[23](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[24](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[24](01, 00)-(01, 04): INDENT(INDENT) '    '
[24](01, 04)-(01, 08): NAME(NAME) 'else'
[24](01, 08)-(01, 09): COLON(OP) ':'
[24](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[24](02, 00)-(02, 00): DEDENT(DEDENT)
[24](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[25](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[25](01, 00)-(01, 08): INDENT(INDENT) '        '
[25](01, 08)-(01, 13): NAME(NAME) 'print'
[25](01, 13)-(01, 14): LPAR(OP) '('
[25](01, 14)-(01, 21): NAME(NAME) 'string1'
[25](01, 21)-(01, 22): COMMA(OP) ','
[25](01, 23)-(01, 28): STRING(STRING) '"and"'
[25](01, 28)-(01, 29): COMMA(OP) ','
[25](01, 30)-(01, 37): NAME(NAME) 'string2'
[25](01, 37)-(01, 38): COMMA(OP) ','
[25](01, 39)-(01, 57): STRING(STRING) '"are not anagrams"'
[25](01, 57)-(01, 58): RPAR(OP) ')'
[25](01, 59)-(01, 60): NEWLINE(NEWLINE) '\n'
[25](02, 00)-(02, 00): DEDENT(DEDENT)
[25](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[26](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[26](01, 08)-(01, 09): NL(NL) '\n'
[26](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[27](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[27](01, 00)-(01, 07): NAME(NAME) 'string1'
[27](01, 08)-(01, 09): EQUAL(OP) '='
[27](01, 10)-(01, 15): NAME(NAME) 'input'
[27](01, 15)-(01, 16): LPAR(OP) '('
[27](01, 16)-(01, 28): STRING(STRING) '"String 1: "'
[27](01, 28)-(01, 29): RPAR(OP) ')'
[27](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[27](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[28](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[28](01, 00)-(01, 07): NAME(NAME) 'string2'
[28](01, 08)-(01, 09): EQUAL(OP) '='
[28](01, 10)-(01, 15): NAME(NAME) 'input'
[28](01, 15)-(01, 16): LPAR(OP) '('
[28](01, 16)-(01, 28): STRING(STRING) '"String 2: "'
[28](01, 28)-(01, 29): RPAR(OP) ')'
[28](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[28](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[29](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[29](01, 00)-(01, 01): NL(NL) '\n'
[29](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[30](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[30](01, 00)-(01, 09): NAME(NAME) 'uitvoeren'
[30](01, 09)-(01, 10): LPAR(OP) '('
[30](01, 10)-(01, 17): NAME(NAME) 'string1'
[30](01, 17)-(01, 18): COMMA(OP) ','
[30](01, 19)-(01, 26): NAME(NAME) 'string2'
[30](01, 26)-(01, 27): RPAR(OP) ')'
[30](01, 27)-(01, 28): NEWLINE(NEWLINE)
[30](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

