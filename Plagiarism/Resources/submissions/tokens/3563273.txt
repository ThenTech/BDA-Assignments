[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 06): NAME(NAME) 'string'
[00](01, 07)-(01, 08): EQUAL(OP) '='
[00](01, 09)-(01, 14): NAME(NAME) 'input'
[00](01, 14)-(01, 15): LPAR(OP) '('
[00](01, 15)-(01, 32): STRING(STRING) '"give a string: "'
[00](01, 32)-(01, 33): RPAR(OP) ')'
[00](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 02): NAME(NAME) 'if'
[01](01, 03)-(01, 04): LPAR(OP) '('
[01](01, 04)-(01, 07): NAME(NAME) 'len'
[01](01, 07)-(01, 08): LPAR(OP) '('
[01](01, 08)-(01, 14): NAME(NAME) 'string'
[01](01, 14)-(01, 15): RPAR(OP) ')'
[01](01, 15)-(01, 16): RPAR(OP) ')'
[01](01, 17)-(01, 19): EQEQUAL(OP) '=='
[01](01, 20)-(01, 21): NUMBER(NUMBER) '1'
[01](01, 21)-(01, 22): COLON(OP) ':'
[01](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 09): NAME(NAME) 'print'
[02](01, 09)-(01, 10): LPAR(OP) '('
[02](01, 10)-(01, 12): STRING(STRING) '""'
[02](01, 12)-(01, 13): RPAR(OP) ')'
[02](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 12): NAME(NAME) 'split_string'
[03](01, 13)-(01, 14): EQUAL(OP) '='
[03](01, 15)-(01, 18): STRING(STRING) '" "'
[03](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 06): NAME(NAME) 'string'
[04](01, 07)-(01, 09): PLUSEQUAL(OP) '+='
[04](01, 10)-(01, 13): STRING(STRING) '"!"'
[04](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 01): NL(NL) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 03): NAME(NAME) 'for'
[06](01, 04)-(01, 05): NAME(NAME) 'i'
[06](01, 06)-(01, 08): NAME(NAME) 'in'
[06](01, 09)-(01, 14): NAME(NAME) 'range'
[06](01, 14)-(01, 15): LPAR(OP) '('
[06](01, 15)-(01, 18): NAME(NAME) 'len'
[06](01, 18)-(01, 19): LPAR(OP) '('
[06](01, 19)-(01, 25): NAME(NAME) 'string'
[06](01, 25)-(01, 26): RPAR(OP) ')'
[06](01, 27)-(01, 28): MINUS(OP) '-'
[06](01, 29)-(01, 30): NUMBER(NUMBER) '1'
[06](01, 30)-(01, 31): RPAR(OP) ')'
[06](01, 31)-(01, 32): COLON(OP) ':'
[06](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 04): INDENT(INDENT) '    '
[07](01, 04)-(01, 06): NAME(NAME) 'if'
[07](01, 07)-(01, 13): NAME(NAME) 'string'
[07](01, 13)-(01, 14): LSQB(OP) '['
[07](01, 14)-(01, 15): NAME(NAME) 'i'
[07](01, 15)-(01, 16): RSQB(OP) ']'
[07](01, 17)-(01, 19): GREATEREQUAL(OP) '>='
[07](01, 20)-(01, 23): STRING(STRING) '"A"'
[07](01, 24)-(01, 27): NAME(NAME) 'and'
[07](01, 28)-(01, 34): NAME(NAME) 'string'
[07](01, 34)-(01, 35): LSQB(OP) '['
[07](01, 35)-(01, 36): NAME(NAME) 'i'
[07](01, 36)-(01, 37): RSQB(OP) ']'
[07](01, 38)-(01, 40): LESSEQUAL(OP) '<='
[07](01, 41)-(01, 44): STRING(STRING) '"z"'
[07](01, 44)-(01, 45): COLON(OP) ':'
[07](01, 45)-(01, 46): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 08): INDENT(INDENT) '        '
[08](01, 08)-(01, 20): NAME(NAME) 'split_string'
[08](01, 21)-(01, 23): PLUSEQUAL(OP) '+='
[08](01, 24)-(01, 30): NAME(NAME) 'string'
[08](01, 30)-(01, 31): LSQB(OP) '['
[08](01, 31)-(01, 32): NAME(NAME) 'i'
[08](01, 32)-(01, 33): RSQB(OP) ']'
[08](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 08): NAME(NAME) 'elif'
[09](01, 09)-(01, 15): NAME(NAME) 'string'
[09](01, 15)-(01, 16): LSQB(OP) '['
[09](01, 16)-(01, 17): NAME(NAME) 'i'
[09](01, 17)-(01, 18): RSQB(OP) ']'
[09](01, 19)-(01, 21): NOTEQUAL(OP) '!='
[09](01, 22)-(01, 25): STRING(STRING) '" "'
[09](01, 25)-(01, 26): COLON(OP) ':'
[09](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 08): INDENT(INDENT) '        '
[10](01, 08)-(01, 20): NAME(NAME) 'split_string'
[10](01, 21)-(01, 23): PLUSEQUAL(OP) '+='
[10](01, 24)-(01, 27): STRING(STRING) '" "'
[10](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 04): INDENT(INDENT) '    '
[11](01, 04)-(01, 08): NAME(NAME) 'elif'
[11](01, 09)-(01, 15): NAME(NAME) 'string'
[11](01, 15)-(01, 16): LSQB(OP) '['
[11](01, 16)-(01, 17): NAME(NAME) 'i'
[11](01, 17)-(01, 18): RSQB(OP) ']'
[11](01, 19)-(01, 21): EQEQUAL(OP) '=='
[11](01, 22)-(01, 25): STRING(STRING) '" "'
[11](01, 25)-(01, 26): COLON(OP) ':'
[11](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 08): INDENT(INDENT) '        '
[12](01, 08)-(01, 20): NAME(NAME) 'split_string'
[12](01, 21)-(01, 23): PLUSEQUAL(OP) '+='
[12](01, 24)-(01, 27): STRING(STRING) '" "'
[12](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 01): NL(NL) '\n'
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 12): NAME(NAME) 'split_string'
[14](01, 13)-(01, 15): PLUSEQUAL(OP) '+='
[14](01, 16)-(01, 19): STRING(STRING) '" "'
[14](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 01): NL(NL) '\n'
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 01): NL(NL) '\n'
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 14): NAME(NAME) 'split_string_2'
[17](01, 15)-(01, 16): EQUAL(OP) '='
[17](01, 17)-(01, 19): STRING(STRING) '""'
[17](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 01): NL(NL) '\n'
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 03): NAME(NAME) 'for'
[19](01, 04)-(01, 05): NAME(NAME) 'i'
[19](01, 06)-(01, 08): NAME(NAME) 'in'
[19](01, 09)-(01, 14): NAME(NAME) 'range'
[19](01, 14)-(01, 15): LPAR(OP) '('
[19](01, 15)-(01, 16): NUMBER(NUMBER) '1'
[19](01, 16)-(01, 17): COMMA(OP) ','
[19](01, 17)-(01, 20): NAME(NAME) 'len'
[19](01, 20)-(01, 21): LPAR(OP) '('
[19](01, 21)-(01, 33): NAME(NAME) 'split_string'
[19](01, 33)-(01, 34): RPAR(OP) ')'
[19](01, 34)-(01, 35): MINUS(OP) '-'
[19](01, 35)-(01, 36): NUMBER(NUMBER) '1'
[19](01, 36)-(01, 37): RPAR(OP) ')'
[19](01, 37)-(01, 38): COLON(OP) ':'
[19](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 04): INDENT(INDENT) '    '
[20](01, 04)-(01, 06): NAME(NAME) 'if'
[20](01, 07)-(01, 19): NAME(NAME) 'split_string'
[20](01, 19)-(01, 20): LSQB(OP) '['
[20](01, 20)-(01, 21): NAME(NAME) 'i'
[20](01, 21)-(01, 22): RSQB(OP) ']'
[20](01, 23)-(01, 25): EQEQUAL(OP) '=='
[20](01, 26)-(01, 29): STRING(STRING) '" "'
[20](01, 30)-(01, 33): NAME(NAME) 'and'
[20](01, 34)-(01, 46): NAME(NAME) 'split_string'
[20](01, 46)-(01, 47): LSQB(OP) '['
[20](01, 47)-(01, 48): NAME(NAME) 'i'
[20](01, 49)-(01, 50): PLUS(OP) '+'
[20](01, 51)-(01, 52): NUMBER(NUMBER) '1'
[20](01, 52)-(01, 53): RSQB(OP) ']'
[20](01, 54)-(01, 56): EQEQUAL(OP) '=='
[20](01, 57)-(01, 60): STRING(STRING) '" "'
[20](01, 60)-(01, 61): COLON(OP) ':'
[20](01, 61)-(01, 62): NEWLINE(NEWLINE) '\n'
[20](02, 00)-(02, 00): DEDENT(DEDENT)
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 08): INDENT(INDENT) '        '
[21](01, 08)-(01, 22): NAME(NAME) 'split_string_2'
[21](01, 23)-(01, 25): PLUSEQUAL(OP) '+='
[21](01, 26)-(01, 28): STRING(STRING) '""'
[21](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[21](02, 00)-(02, 00): DEDENT(DEDENT)
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 04): INDENT(INDENT) '    '
[22](01, 04)-(01, 08): NAME(NAME) 'else'
[22](01, 08)-(01, 09): COLON(OP) ':'
[22](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[22](02, 00)-(02, 00): DEDENT(DEDENT)
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[23](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[23](01, 00)-(01, 08): INDENT(INDENT) '        '
[23](01, 08)-(01, 22): NAME(NAME) 'split_string_2'
[23](01, 23)-(01, 25): PLUSEQUAL(OP) '+='
[23](01, 26)-(01, 38): NAME(NAME) 'split_string'
[23](01, 38)-(01, 39): LSQB(OP) '['
[23](01, 39)-(01, 40): NAME(NAME) 'i'
[23](01, 40)-(01, 41): RSQB(OP) ']'
[23](01, 41)-(01, 42): NEWLINE(NEWLINE) '\n'
[23](02, 00)-(02, 00): DEDENT(DEDENT)
[23](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[24](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[24](01, 00)-(01, 01): NL(NL) '\n'
[24](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[25](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[25](01, 00)-(01, 14): NAME(NAME) 'split_string_2'
[25](01, 15)-(01, 17): PLUSEQUAL(OP) '+='
[25](01, 18)-(01, 21): STRING(STRING) '" "'
[25](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[25](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[26](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[26](01, 00)-(01, 14): NAME(NAME) 'split_string_2'
[26](01, 15)-(01, 17): PLUSEQUAL(OP) '+='
[26](01, 18)-(01, 21): STRING(STRING) '" "'
[26](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[26](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[27](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[27](01, 00)-(01, 01): NL(NL) '\n'
[27](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[28](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[28](01, 00)-(01, 01): NL(NL) '\n'
[28](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[29](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[29](01, 00)-(01, 05): NAME(NAME) 'index'
[29](01, 06)-(01, 07): EQUAL(OP) '='
[29](01, 08)-(01, 09): NUMBER(NUMBER) '0'
[29](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[29](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[30](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[30](01, 00)-(01, 01): NL(NL) '\n'
[30](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[31](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[31](01, 00)-(01, 03): NAME(NAME) 'for'
[31](01, 04)-(01, 05): NAME(NAME) 'i'
[31](01, 06)-(01, 08): NAME(NAME) 'in'
[31](01, 09)-(01, 14): NAME(NAME) 'range'
[31](01, 14)-(01, 15): LPAR(OP) '('
[31](01, 15)-(01, 18): NAME(NAME) 'len'
[31](01, 18)-(01, 19): LPAR(OP) '('
[31](01, 19)-(01, 33): NAME(NAME) 'split_string_2'
[31](01, 33)-(01, 34): RPAR(OP) ')'
[31](01, 34)-(01, 35): MINUS(OP) '-'
[31](01, 35)-(01, 36): NUMBER(NUMBER) '1'
[31](01, 36)-(01, 37): RPAR(OP) ')'
[31](01, 37)-(01, 38): COLON(OP) ':'
[31](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[31](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[32](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[32](01, 00)-(01, 04): INDENT(INDENT) '    '
[32](01, 04)-(01, 06): NAME(NAME) 'if'
[32](01, 07)-(01, 21): NAME(NAME) 'split_string_2'
[32](01, 21)-(01, 22): LSQB(OP) '['
[32](01, 22)-(01, 23): NAME(NAME) 'i'
[32](01, 23)-(01, 24): RSQB(OP) ']'
[32](01, 25)-(01, 27): EQEQUAL(OP) '=='
[32](01, 28)-(01, 31): STRING(STRING) '" "'
[32](01, 31)-(01, 32): COLON(OP) ':'
[32](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[32](02, 00)-(02, 00): DEDENT(DEDENT)
[32](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[33](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[33](01, 00)-(01, 08): INDENT(INDENT) '        '
[33](01, 08)-(01, 13): NAME(NAME) 'print'
[33](01, 13)-(01, 14): LPAR(OP) '('
[33](01, 14)-(01, 28): NAME(NAME) 'split_string_2'
[33](01, 28)-(01, 29): LSQB(OP) '['
[33](01, 29)-(01, 34): NAME(NAME) 'index'
[33](01, 34)-(01, 35): COLON(OP) ':'
[33](01, 35)-(01, 36): NAME(NAME) 'i'
[33](01, 36)-(01, 37): RSQB(OP) ']'
[33](01, 37)-(01, 38): COMMA(OP) ','
[33](01, 39)-(01, 42): NAME(NAME) 'len'
[33](01, 42)-(01, 43): LPAR(OP) '('
[33](01, 43)-(01, 57): NAME(NAME) 'split_string_2'
[33](01, 57)-(01, 58): LSQB(OP) '['
[33](01, 58)-(01, 63): NAME(NAME) 'index'
[33](01, 63)-(01, 64): COLON(OP) ':'
[33](01, 64)-(01, 65): NAME(NAME) 'i'
[33](01, 65)-(01, 66): RSQB(OP) ']'
[33](01, 66)-(01, 67): RPAR(OP) ')'
[33](01, 67)-(01, 68): RPAR(OP) ')'
[33](01, 68)-(01, 69): NEWLINE(NEWLINE) '\n'
[33](02, 00)-(02, 00): DEDENT(DEDENT)
[33](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[34](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[34](01, 00)-(01, 08): INDENT(INDENT) '        '
[34](01, 08)-(01, 13): NAME(NAME) 'index'
[34](01, 14)-(01, 15): EQUAL(OP) '='
[34](01, 16)-(01, 17): NAME(NAME) 'i'
[34](01, 18)-(01, 19): PLUS(OP) '+'
[34](01, 20)-(01, 21): NUMBER(NUMBER) '1'
[34](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[34](02, 00)-(02, 00): DEDENT(DEDENT)
[34](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

