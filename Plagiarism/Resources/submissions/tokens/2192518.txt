[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 26): NAME(NAME) 'is_palindrome_sentence'
[00](01, 26)-(01, 27): LPAR(OP) '('
[00](01, 27)-(01, 35): NAME(NAME) 'sentence'
[00](01, 35)-(01, 36): RPAR(OP) ')'
[00](01, 36)-(01, 37): COLON(OP) ':'
[00](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 11): NAME(NAME) 'alfabet'
[01](01, 12)-(01, 13): EQUAL(OP) '='
[01](01, 14)-(01, 68): STRING(STRING) "'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'"
[01](01, 68)-(01, 69): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 16): NAME(NAME) 'enkelletters'
[02](01, 17)-(01, 18): EQUAL(OP) '='
[02](01, 19)-(01, 21): STRING(STRING) "''"
[02](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 07): NAME(NAME) 'for'
[03](01, 08)-(01, 14): NAME(NAME) 'letter'
[03](01, 15)-(01, 17): NAME(NAME) 'in'
[03](01, 18)-(01, 26): NAME(NAME) 'sentence'
[03](01, 26)-(01, 27): COLON(OP) ':'
[03](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 08): INDENT(INDENT) '        '
[04](01, 08)-(01, 10): NAME(NAME) 'if'
[04](01, 11)-(01, 17): NAME(NAME) 'letter'
[04](01, 18)-(01, 20): NAME(NAME) 'in'
[04](01, 21)-(01, 28): NAME(NAME) 'alfabet'
[04](01, 28)-(01, 29): COLON(OP) ':'
[04](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 12): INDENT(INDENT) '            '
[05](01, 12)-(01, 24): NAME(NAME) 'enkelletters'
[05](01, 25)-(01, 27): PLUSEQUAL(OP) '+='
[05](01, 28)-(01, 34): NAME(NAME) 'letter'
[05](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 04): INDENT(INDENT) '    '
[06](01, 04)-(01, 22): NAME(NAME) 'enkelkleineletters'
[06](01, 23)-(01, 24): EQUAL(OP) '='
[06](01, 25)-(01, 37): NAME(NAME) 'enkelletters'
[06](01, 37)-(01, 38): DOT(OP) '.'
[06](01, 38)-(01, 43): NAME(NAME) 'lower'
[06](01, 43)-(01, 44): LPAR(OP) '('
[06](01, 44)-(01, 45): RPAR(OP) ')'
[06](01, 45)-(01, 46): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 04): INDENT(INDENT) '    '
[07](01, 04)-(01, 17): NAME(NAME) 'aantalletters'
[07](01, 18)-(01, 19): EQUAL(OP) '='
[07](01, 20)-(01, 23): NAME(NAME) 'len'
[07](01, 23)-(01, 24): LPAR(OP) '('
[07](01, 24)-(01, 42): NAME(NAME) 'enkelkleineletters'
[07](01, 42)-(01, 43): RPAR(OP) ')'
[07](01, 43)-(01, 44): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 04): INDENT(INDENT) '    '
[08](01, 04)-(01, 07): NAME(NAME) 'for'
[08](01, 08)-(01, 14): NAME(NAME) 'letter'
[08](01, 15)-(01, 17): NAME(NAME) 'in'
[08](01, 18)-(01, 36): NAME(NAME) 'enkelkleineletters'
[08](01, 36)-(01, 37): COLON(OP) ':'
[08](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 08): INDENT(INDENT) '        '
[09](01, 08)-(01, 10): NAME(NAME) 'if'
[09](01, 11)-(01, 17): NAME(NAME) 'letter'
[09](01, 18)-(01, 20): EQEQUAL(OP) '=='
[09](01, 21)-(01, 39): NAME(NAME) 'enkelkleineletters'
[09](01, 39)-(01, 40): LSQB(OP) '['
[09](01, 40)-(01, 53): NAME(NAME) 'aantalletters'
[09](01, 53)-(01, 54): MINUS(OP) '-'
[09](01, 54)-(01, 55): NUMBER(NUMBER) '1'
[09](01, 55)-(01, 56): RSQB(OP) ']'
[09](01, 56)-(01, 57): COLON(OP) ':'
[09](01, 57)-(01, 58): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 12): INDENT(INDENT) '            '
[10](01, 12)-(01, 25): NAME(NAME) 'aantalletters'
[10](01, 26)-(01, 28): MINEQUAL(OP) '-='
[10](01, 29)-(01, 30): NUMBER(NUMBER) '1'
[10](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 08): INDENT(INDENT) '        '
[11](01, 08)-(01, 12): NAME(NAME) 'else'
[11](01, 12)-(01, 13): COLON(OP) ':'
[11](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 12): INDENT(INDENT) '            '
[12](01, 12)-(01, 18): NAME(NAME) 'return'
[12](01, 19)-(01, 24): NAME(NAME) 'False'
[12](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 04): INDENT(INDENT) '    '
[13](01, 04)-(01, 10): NAME(NAME) 'return'
[13](01, 11)-(01, 15): NAME(NAME) 'True'
[13](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 01): NL(NL) '\n'
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 22): NAME(NAME) 'is_palindrome_sentence'
[15](01, 22)-(01, 23): LPAR(OP) '('
[15](01, 23)-(01, 34): STRING(STRING) '"stevevets"'
[15](01, 34)-(01, 35): RPAR(OP) ')'
[15](01, 35)-(01, 36): NEWLINE(NEWLINE)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

