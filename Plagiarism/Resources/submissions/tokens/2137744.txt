[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 22): COMMENT(COMMENT) '# write your code here'
[00](01, 22)-(01, 23): NL(NL) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 01): NL(NL) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 08): NAME(NAME) 'string_a'
[02](01, 09)-(01, 10): EQUAL(OP) '='
[02](01, 11)-(01, 16): NAME(NAME) 'input'
[02](01, 16)-(01, 17): LPAR(OP) '('
[02](01, 17)-(01, 45): STRING(STRING) '"Give me the first string: "'
[02](01, 45)-(01, 46): RPAR(OP) ')'
[02](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 08): NAME(NAME) 'string_b'
[03](01, 09)-(01, 10): EQUAL(OP) '='
[03](01, 11)-(01, 16): NAME(NAME) 'input'
[03](01, 16)-(01, 17): LPAR(OP) '('
[03](01, 17)-(01, 46): STRING(STRING) '"Give me the second string: "'
[03](01, 46)-(01, 47): RPAR(OP) ')'
[03](01, 47)-(01, 48): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 01): NL(NL) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 03): NAME(NAME) 'err'
[05](01, 04)-(01, 05): EQUAL(OP) '='
[05](01, 06)-(01, 11): NAME(NAME) 'False'
[05](01, 11)-(01, 12): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 01): NL(NL) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 03): NAME(NAME) 'for'
[07](01, 04)-(01, 18): NAME(NAME) 'current_letter'
[07](01, 19)-(01, 21): NAME(NAME) 'in'
[07](01, 22)-(01, 50): STRING(STRING) '"abcdefghijklmnopqrstuvwxyz"'
[07](01, 50)-(01, 51): COLON(OP) ':'
[07](01, 51)-(01, 52): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 01): NL(NL) '\n'
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 12): NAME(NAME) 'amount_a'
[09](01, 13)-(01, 14): EQUAL(OP) '='
[09](01, 15)-(01, 16): NUMBER(NUMBER) '0'
[09](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 04): INDENT(INDENT) '    '
[10](01, 04)-(01, 12): NAME(NAME) 'amount_b'
[10](01, 13)-(01, 14): EQUAL(OP) '='
[10](01, 15)-(01, 16): NUMBER(NUMBER) '0'
[10](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 01): NL(NL) '\n'
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 04): INDENT(INDENT) '    '
[12](01, 04)-(01, 07): NAME(NAME) 'for'
[12](01, 08)-(01, 15): NAME(NAME) 'index_a'
[12](01, 16)-(01, 18): NAME(NAME) 'in'
[12](01, 19)-(01, 24): NAME(NAME) 'range'
[12](01, 24)-(01, 25): LPAR(OP) '('
[12](01, 25)-(01, 28): NAME(NAME) 'len'
[12](01, 28)-(01, 29): LPAR(OP) '('
[12](01, 29)-(01, 37): NAME(NAME) 'string_a'
[12](01, 37)-(01, 38): RPAR(OP) ')'
[12](01, 38)-(01, 39): RPAR(OP) ')'
[12](01, 39)-(01, 40): COLON(OP) ':'
[12](01, 40)-(01, 41): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 08): INDENT(INDENT) '        '
[13](01, 08)-(01, 10): NAME(NAME) 'if'
[13](01, 11)-(01, 25): NAME(NAME) 'current_letter'
[13](01, 26)-(01, 28): EQEQUAL(OP) '=='
[13](01, 29)-(01, 37): NAME(NAME) 'string_a'
[13](01, 37)-(01, 38): LSQB(OP) '['
[13](01, 38)-(01, 45): NAME(NAME) 'index_a'
[13](01, 45)-(01, 46): RSQB(OP) ']'
[13](01, 46)-(01, 47): COLON(OP) ':'
[13](01, 47)-(01, 48): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 12): INDENT(INDENT) '            '
[14](01, 12)-(01, 20): NAME(NAME) 'amount_a'
[14](01, 21)-(01, 23): PLUSEQUAL(OP) '+='
[14](01, 24)-(01, 25): NUMBER(NUMBER) '1'
[14](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 01): NL(NL) '\n'
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 04): INDENT(INDENT) '    '
[16](01, 04)-(01, 07): NAME(NAME) 'for'
[16](01, 08)-(01, 15): NAME(NAME) 'index_b'
[16](01, 16)-(01, 18): NAME(NAME) 'in'
[16](01, 19)-(01, 24): NAME(NAME) 'range'
[16](01, 24)-(01, 25): LPAR(OP) '('
[16](01, 25)-(01, 28): NAME(NAME) 'len'
[16](01, 28)-(01, 29): LPAR(OP) '('
[16](01, 29)-(01, 37): NAME(NAME) 'string_b'
[16](01, 37)-(01, 38): RPAR(OP) ')'
[16](01, 38)-(01, 39): RPAR(OP) ')'
[16](01, 39)-(01, 40): COLON(OP) ':'
[16](01, 40)-(01, 41): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 08): INDENT(INDENT) '        '
[17](01, 08)-(01, 10): NAME(NAME) 'if'
[17](01, 11)-(01, 25): NAME(NAME) 'current_letter'
[17](01, 26)-(01, 28): EQEQUAL(OP) '=='
[17](01, 29)-(01, 37): NAME(NAME) 'string_b'
[17](01, 37)-(01, 38): LSQB(OP) '['
[17](01, 38)-(01, 45): NAME(NAME) 'index_b'
[17](01, 45)-(01, 46): RSQB(OP) ']'
[17](01, 46)-(01, 47): COLON(OP) ':'
[17](01, 47)-(01, 48): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 12): INDENT(INDENT) '            '
[18](01, 12)-(01, 20): NAME(NAME) 'amount_b'
[18](01, 21)-(01, 23): PLUSEQUAL(OP) '+='
[18](01, 24)-(01, 25): NUMBER(NUMBER) '1'
[18](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 01): NL(NL) '\n'
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 04): INDENT(INDENT) '    '
[20](01, 04)-(01, 06): NAME(NAME) 'if'
[20](01, 07)-(01, 15): NAME(NAME) 'amount_a'
[20](01, 16)-(01, 18): NOTEQUAL(OP) '!='
[20](01, 19)-(01, 27): NAME(NAME) 'amount_b'
[20](01, 27)-(01, 28): COLON(OP) ':'
[20](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[20](02, 00)-(02, 00): DEDENT(DEDENT)
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 08): INDENT(INDENT) '        '
[21](01, 08)-(01, 11): NAME(NAME) 'err'
[21](01, 12)-(01, 13): EQUAL(OP) '='
[21](01, 14)-(01, 18): NAME(NAME) 'True'
[21](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[21](02, 00)-(02, 00): DEDENT(DEDENT)
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 01): NL(NL) '\n'
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[23](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[23](01, 00)-(01, 02): NAME(NAME) 'if'
[23](01, 03)-(01, 06): NAME(NAME) 'err'
[23](01, 06)-(01, 07): COLON(OP) ':'
[23](01, 07)-(01, 08): NEWLINE(NEWLINE) '\n'
[23](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[24](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[24](01, 00)-(01, 04): INDENT(INDENT) '    '
[24](01, 04)-(01, 09): NAME(NAME) 'print'
[24](01, 09)-(01, 10): LPAR(OP) '('
[24](01, 10)-(01, 18): NAME(NAME) 'string_a'
[24](01, 18)-(01, 19): COMMA(OP) ','
[24](01, 20)-(01, 25): STRING(STRING) '"and"'
[24](01, 25)-(01, 26): COMMA(OP) ','
[24](01, 27)-(01, 35): NAME(NAME) 'string_b'
[24](01, 35)-(01, 36): COMMA(OP) ','
[24](01, 37)-(01, 55): STRING(STRING) '"are not anagrams"'
[24](01, 55)-(01, 56): RPAR(OP) ')'
[24](01, 56)-(01, 57): NEWLINE(NEWLINE) '\n'
[24](02, 00)-(02, 00): DEDENT(DEDENT)
[24](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[25](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[25](01, 00)-(01, 04): NAME(NAME) 'else'
[25](01, 04)-(01, 05): COLON(OP) ':'
[25](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[25](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[26](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[26](01, 00)-(01, 04): INDENT(INDENT) '    '
[26](01, 04)-(01, 09): NAME(NAME) 'print'
[26](01, 09)-(01, 10): LPAR(OP) '('
[26](01, 10)-(01, 18): NAME(NAME) 'string_a'
[26](01, 18)-(01, 19): COMMA(OP) ','
[26](01, 20)-(01, 25): STRING(STRING) '"and"'
[26](01, 25)-(01, 26): COMMA(OP) ','
[26](01, 27)-(01, 35): NAME(NAME) 'string_b'
[26](01, 35)-(01, 36): COMMA(OP) ','
[26](01, 37)-(01, 51): STRING(STRING) '"are anagrams"'
[26](01, 51)-(01, 52): RPAR(OP) ')'
[26](01, 52)-(01, 53): NEWLINE(NEWLINE)
[26](02, 00)-(02, 00): DEDENT(DEDENT)
[26](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

