[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 11): NAME(NAME) 'replace'
[00](01, 11)-(01, 12): LPAR(OP) '('
[00](01, 12)-(01, 19): NAME(NAME) 'pattern'
[00](01, 19)-(01, 20): COMMA(OP) ','
[00](01, 21)-(01, 32): NAME(NAME) 'replacement'
[00](01, 32)-(01, 33): COMMA(OP) ','
[00](01, 34)-(01, 40): NAME(NAME) 'corpus'
[00](01, 40)-(01, 41): RPAR(OP) ')'
[00](01, 41)-(01, 42): COLON(OP) ':'
[00](01, 42)-(01, 43): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 12): NAME(NAME) 'position'
[01](01, 13)-(01, 14): EQUAL(OP) '='
[01](01, 15)-(01, 16): NUMBER(NUMBER) '0'
[01](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 13): NAME(NAME) 'wordFound'
[02](01, 14)-(01, 15): EQUAL(OP) '='
[02](01, 16)-(01, 21): NAME(NAME) 'False'
[02](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 01): NL(NL) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 07): NAME(NAME) 'for'
[04](01, 08)-(01, 09): NAME(NAME) 'i'
[04](01, 10)-(01, 12): NAME(NAME) 'in'
[04](01, 13)-(01, 18): NAME(NAME) 'range'
[04](01, 18)-(01, 19): LPAR(OP) '('
[04](01, 19)-(01, 22): NAME(NAME) 'len'
[04](01, 22)-(01, 23): LPAR(OP) '('
[04](01, 23)-(01, 29): NAME(NAME) 'corpus'
[04](01, 29)-(01, 30): RPAR(OP) ')'
[04](01, 31)-(01, 32): MINUS(OP) '-'
[04](01, 33)-(01, 36): NAME(NAME) 'len'
[04](01, 36)-(01, 37): LPAR(OP) '('
[04](01, 37)-(01, 44): NAME(NAME) 'pattern'
[04](01, 44)-(01, 45): RPAR(OP) ')'
[04](01, 45)-(01, 46): RPAR(OP) ')'
[04](01, 46)-(01, 47): COLON(OP) ':'
[04](01, 47)-(01, 48): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 08): INDENT(INDENT) '        '
[05](01, 08)-(01, 12): NAME(NAME) 'word'
[05](01, 13)-(01, 14): EQUAL(OP) '='
[05](01, 15)-(01, 21): NAME(NAME) 'corpus'
[05](01, 21)-(01, 22): LSQB(OP) '['
[05](01, 22)-(01, 23): NAME(NAME) 'i'
[05](01, 23)-(01, 24): COLON(OP) ':'
[05](01, 24)-(01, 25): NAME(NAME) 'i'
[05](01, 25)-(01, 26): PLUS(OP) '+'
[05](01, 26)-(01, 29): NAME(NAME) 'len'
[05](01, 29)-(01, 30): LPAR(OP) '('
[05](01, 30)-(01, 37): NAME(NAME) 'pattern'
[05](01, 37)-(01, 38): RPAR(OP) ')'
[05](01, 38)-(01, 39): RSQB(OP) ']'
[05](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 08): INDENT(INDENT) '        '
[06](01, 08)-(01, 10): NAME(NAME) 'if'
[06](01, 11)-(01, 18): NAME(NAME) 'pattern'
[06](01, 19)-(01, 21): EQEQUAL(OP) '=='
[06](01, 22)-(01, 26): NAME(NAME) 'word'
[06](01, 26)-(01, 27): COLON(OP) ':'
[06](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 12): INDENT(INDENT) '            '
[07](01, 12)-(01, 20): NAME(NAME) 'position'
[07](01, 21)-(01, 22): EQUAL(OP) '='
[07](01, 23)-(01, 24): NAME(NAME) 'i'
[07](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 12): INDENT(INDENT) '            '
[08](01, 12)-(01, 21): NAME(NAME) 'wordFound'
[08](01, 22)-(01, 23): EQUAL(OP) '='
[08](01, 24)-(01, 28): NAME(NAME) 'True'
[08](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 12): INDENT(INDENT) '            '
[09](01, 12)-(01, 17): NAME(NAME) 'break'
[09](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 01): NL(NL) '\n'
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 04): INDENT(INDENT) '    '
[11](01, 04)-(01, 06): NAME(NAME) 'if'
[11](01, 07)-(01, 16): NAME(NAME) 'wordFound'
[11](01, 16)-(01, 17): COLON(OP) ':'
[11](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 08): INDENT(INDENT) '        '
[12](01, 08)-(01, 19): NAME(NAME) 'newSentence'
[12](01, 20)-(01, 21): EQUAL(OP) '='
[12](01, 22)-(01, 28): NAME(NAME) 'corpus'
[12](01, 28)-(01, 29): LSQB(OP) '['
[12](01, 29)-(01, 30): COLON(OP) ':'
[12](01, 30)-(01, 38): NAME(NAME) 'position'
[12](01, 38)-(01, 39): RSQB(OP) ']'
[12](01, 40)-(01, 41): PLUS(OP) '+'
[12](01, 42)-(01, 53): NAME(NAME) 'replacement'
[12](01, 54)-(01, 55): PLUS(OP) '+'
[12](01, 56)-(01, 62): NAME(NAME) 'corpus'
[12](01, 62)-(01, 63): LSQB(OP) '['
[12](01, 63)-(01, 71): NAME(NAME) 'position'
[12](01, 71)-(01, 72): PLUS(OP) '+'
[12](01, 72)-(01, 75): NAME(NAME) 'len'
[12](01, 75)-(01, 76): LPAR(OP) '('
[12](01, 76)-(01, 83): NAME(NAME) 'pattern'
[12](01, 83)-(01, 84): RPAR(OP) ')'
[12](01, 84)-(01, 85): COLON(OP) ':'
[12](01, 85)-(01, 86): RSQB(OP) ']'
[12](01, 86)-(01, 87): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 08): INDENT(INDENT) '        '
[13](01, 08)-(01, 14): NAME(NAME) 'return'
[13](01, 15)-(01, 26): NAME(NAME) 'newSentence'
[13](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

