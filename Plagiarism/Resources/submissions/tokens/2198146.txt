[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 07): NAME(NAME) 'alfabet'
[00](01, 08)-(01, 09): EQUAL(OP) '='
[00](01, 10)-(01, 38): STRING(STRING) '"abcdefghijklmnopqrstuvwxyz"'
[00](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 03): NAME(NAME) 'def'
[01](01, 04)-(01, 26): NAME(NAME) 'is_palindrome_sentence'
[01](01, 26)-(01, 27): LPAR(OP) '('
[01](01, 27)-(01, 35): NAME(NAME) 'sentence'
[01](01, 35)-(01, 36): RPAR(OP) ')'
[01](01, 36)-(01, 37): COLON(OP) ':'
[01](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 05): NAME(NAME) 'x'
[02](01, 06)-(01, 07): EQUAL(OP) '='
[02](01, 08)-(01, 09): NUMBER(NUMBER) '1'
[02](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 07): NAME(NAME) 'zin'
[03](01, 08)-(01, 09): EQUAL(OP) '='
[03](01, 10)-(01, 18): NAME(NAME) 'sentence'
[03](01, 18)-(01, 19): DOT(OP) '.'
[03](01, 19)-(01, 24): NAME(NAME) 'split'
[03](01, 24)-(01, 25): LPAR(OP) '('
[03](01, 25)-(01, 26): RPAR(OP) ')'
[03](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 09): NAME(NAME) 'while'
[04](01, 10)-(01, 14): NAME(NAME) 'True'
[04](01, 14)-(01, 15): COLON(OP) ':'
[04](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 08): INDENT(INDENT) '        '
[05](01, 08)-(01, 10): NAME(NAME) 'if'
[05](01, 11)-(01, 14): NAME(NAME) 'zin'
[05](01, 14)-(01, 15): LSQB(OP) '['
[05](01, 15)-(01, 16): NAME(NAME) 'x'
[05](01, 16)-(01, 17): MINUS(OP) '-'
[05](01, 17)-(01, 18): NUMBER(NUMBER) '1'
[05](01, 18)-(01, 19): RSQB(OP) ']'
[05](01, 20)-(01, 22): EQEQUAL(OP) '=='
[05](01, 23)-(01, 26): NAME(NAME) 'zin'
[05](01, 26)-(01, 27): LSQB(OP) '['
[05](01, 27)-(01, 30): NAME(NAME) 'len'
[05](01, 30)-(01, 31): LPAR(OP) '('
[05](01, 31)-(01, 34): NAME(NAME) 'zin'
[05](01, 34)-(01, 35): RPAR(OP) ')'
[05](01, 35)-(01, 36): MINUS(OP) '-'
[05](01, 36)-(01, 37): NAME(NAME) 'x'
[05](01, 37)-(01, 38): RSQB(OP) ']'
[05](01, 39)-(01, 40): COLON(OP) ':'
[05](01, 40)-(01, 41): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 12): INDENT(INDENT) '            '
[06](01, 12)-(01, 13): NAME(NAME) 'x'
[06](01, 14)-(01, 15): EQUAL(OP) '='
[06](01, 16)-(01, 17): NAME(NAME) 'x'
[06](01, 17)-(01, 18): PLUS(OP) '+'
[06](01, 18)-(01, 19): NUMBER(NUMBER) '1'
[06](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 12): INDENT(INDENT) '            '
[07](01, 12)-(01, 18): NAME(NAME) 'return'
[07](01, 19)-(01, 23): NAME(NAME) 'True'
[07](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 08): INDENT(INDENT) '        '
[08](01, 08)-(01, 12): NAME(NAME) 'elif'
[08](01, 13)-(01, 16): NAME(NAME) 'zin'
[08](01, 16)-(01, 17): LSQB(OP) '['
[08](01, 17)-(01, 18): NAME(NAME) 'x'
[08](01, 18)-(01, 19): MINUS(OP) '-'
[08](01, 19)-(01, 20): NUMBER(NUMBER) '1'
[08](01, 20)-(01, 21): RSQB(OP) ']'
[08](01, 22)-(01, 24): NOTEQUAL(OP) '!='
[08](01, 25)-(01, 28): NAME(NAME) 'zin'
[08](01, 28)-(01, 29): LSQB(OP) '['
[08](01, 29)-(01, 32): NAME(NAME) 'len'
[08](01, 32)-(01, 33): LPAR(OP) '('
[08](01, 33)-(01, 36): NAME(NAME) 'zin'
[08](01, 36)-(01, 37): RPAR(OP) ')'
[08](01, 37)-(01, 38): MINUS(OP) '-'
[08](01, 38)-(01, 39): NAME(NAME) 'x'
[08](01, 39)-(01, 40): RSQB(OP) ']'
[08](01, 41)-(01, 42): COLON(OP) ':'
[08](01, 42)-(01, 43): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 12): INDENT(INDENT) '            '
[09](01, 12)-(01, 18): NAME(NAME) 'return'
[09](01, 19)-(01, 24): NAME(NAME) 'False'
[09](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 05): NAME(NAME) 'print'
[10](01, 05)-(01, 06): LPAR(OP) '('
[10](01, 06)-(01, 28): NAME(NAME) 'is_palindrome_sentence'
[10](01, 28)-(01, 29): LPAR(OP) '('
[10](01, 29)-(01, 39): STRING(STRING) '"sentence"'
[10](01, 39)-(01, 40): RPAR(OP) ')'
[10](01, 40)-(01, 41): RPAR(OP) ')'
[10](01, 41)-(01, 42): NEWLINE(NEWLINE)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

