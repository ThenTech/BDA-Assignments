[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 06): NAME(NAME) 'import'
[00](01, 07)-(01, 11): NAME(NAME) 'math'
[00](01, 11)-(01, 12): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 01): NL(NL) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): NAME(NAME) 'text'
[02](01, 05)-(01, 06): EQUAL(OP) '='
[02](01, 07)-(01, 12): NAME(NAME) 'input'
[02](01, 12)-(01, 13): LPAR(OP) '('
[02](01, 13)-(01, 14): RPAR(OP) ')'
[02](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 01): NL(NL) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 06): NAME(NAME) 'length'
[04](01, 07)-(01, 08): EQUAL(OP) '='
[04](01, 09)-(01, 12): NAME(NAME) 'len'
[04](01, 12)-(01, 13): LPAR(OP) '('
[04](01, 13)-(01, 17): NAME(NAME) 'text'
[04](01, 17)-(01, 18): RPAR(OP) ')'
[04](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 12): NAME(NAME) 'isPalindrome'
[05](01, 13)-(01, 14): EQUAL(OP) '='
[05](01, 15)-(01, 19): NAME(NAME) 'True'
[05](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 01): NL(NL) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 03): NAME(NAME) 'for'
[07](01, 04)-(01, 05): NAME(NAME) 'i'
[07](01, 06)-(01, 08): NAME(NAME) 'in'
[07](01, 09)-(01, 14): NAME(NAME) 'range'
[07](01, 14)-(01, 15): LPAR(OP) '('
[07](01, 15)-(01, 16): NUMBER(NUMBER) '0'
[07](01, 16)-(01, 17): COMMA(OP) ','
[07](01, 18)-(01, 22): NAME(NAME) 'math'
[07](01, 22)-(01, 23): DOT(OP) '.'
[07](01, 23)-(01, 27): NAME(NAME) 'ceil'
[07](01, 27)-(01, 28): LPAR(OP) '('
[07](01, 28)-(01, 34): NAME(NAME) 'length'
[07](01, 34)-(01, 35): SLASH(OP) '/'
[07](01, 35)-(01, 36): NUMBER(NUMBER) '2'
[07](01, 36)-(01, 37): RPAR(OP) ')'
[07](01, 37)-(01, 38): RPAR(OP) ')'
[07](01, 38)-(01, 39): COLON(OP) ':'
[07](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 04): INDENT(INDENT) '    '
[08](01, 04)-(01, 06): NAME(NAME) 'if'
[08](01, 07)-(01, 11): NAME(NAME) 'text'
[08](01, 11)-(01, 12): LSQB(OP) '['
[08](01, 12)-(01, 13): NAME(NAME) 'i'
[08](01, 13)-(01, 14): RSQB(OP) ']'
[08](01, 15)-(01, 17): NOTEQUAL(OP) '!='
[08](01, 18)-(01, 22): NAME(NAME) 'text'
[08](01, 22)-(01, 23): LSQB(OP) '['
[08](01, 23)-(01, 24): LPAR(OP) '('
[08](01, 24)-(01, 30): NAME(NAME) 'length'
[08](01, 30)-(01, 31): MINUS(OP) '-'
[08](01, 31)-(01, 32): NUMBER(NUMBER) '1'
[08](01, 32)-(01, 33): RPAR(OP) ')'
[08](01, 33)-(01, 34): MINUS(OP) '-'
[08](01, 34)-(01, 35): NAME(NAME) 'i'
[08](01, 35)-(01, 36): RSQB(OP) ']'
[08](01, 36)-(01, 37): COLON(OP) ':'
[08](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 08): INDENT(INDENT) '        '
[09](01, 08)-(01, 20): NAME(NAME) 'isPalindrome'
[09](01, 21)-(01, 22): EQUAL(OP) '='
[09](01, 23)-(01, 28): NAME(NAME) 'False'
[09](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 01): NL(NL) '\n'
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 02): NAME(NAME) 'if'
[11](01, 03)-(01, 15): NAME(NAME) 'isPalindrome'
[11](01, 15)-(01, 16): COLON(OP) ':'
[11](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 04): INDENT(INDENT) '    '
[12](01, 04)-(01, 09): NAME(NAME) 'print'
[12](01, 09)-(01, 10): LPAR(OP) '('
[12](01, 10)-(01, 14): NAME(NAME) 'text'
[12](01, 15)-(01, 16): PLUS(OP) '+'
[12](01, 17)-(01, 35): STRING(STRING) '" is a palindrome"'
[12](01, 35)-(01, 36): RPAR(OP) ')'
[12](01, 36)-(01, 37): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 04): NAME(NAME) 'else'
[13](01, 04)-(01, 05): COLON(OP) ':'
[13](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 04): INDENT(INDENT) '    '
[14](01, 04)-(01, 09): NAME(NAME) 'print'
[14](01, 09)-(01, 10): LPAR(OP) '('
[14](01, 10)-(01, 14): NAME(NAME) 'text'
[14](01, 15)-(01, 16): PLUS(OP) '+'
[14](01, 17)-(01, 39): STRING(STRING) '" is not a palindrome"'
[14](01, 39)-(01, 40): RPAR(OP) ')'
[14](01, 40)-(01, 41): NEWLINE(NEWLINE)
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

