[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 06): NAME(NAME) 'string'
[00](01, 07)-(01, 08): EQUAL(OP) '='
[00](01, 09)-(01, 14): NAME(NAME) 'input'
[00](01, 14)-(01, 15): LPAR(OP) '('
[00](01, 15)-(01, 37): STRING(STRING) '"Geef een string op: "'
[00](01, 37)-(01, 38): RPAR(OP) ')'
[00](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 01): NL(NL) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 06): NAME(NAME) 'inword'
[02](01, 07)-(01, 08): EQUAL(OP) '='
[02](01, 09)-(01, 14): NAME(NAME) 'False'
[02](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 05): NAME(NAME) 'count'
[03](01, 06)-(01, 07): EQUAL(OP) '='
[03](01, 08)-(01, 09): NUMBER(NUMBER) '0'
[03](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 03): NAME(NAME) 'for'
[04](01, 04)-(01, 05): NAME(NAME) 'x'
[04](01, 06)-(01, 08): NAME(NAME) 'in'
[04](01, 09)-(01, 15): NAME(NAME) 'string'
[04](01, 15)-(01, 16): COLON(OP) ':'
[04](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 06): NAME(NAME) 'if'
[05](01, 07)-(01, 10): STRING(STRING) '"a"'
[05](01, 11)-(01, 13): LESSEQUAL(OP) '<='
[05](01, 14)-(01, 15): NAME(NAME) 'x'
[05](01, 16)-(01, 18): LESSEQUAL(OP) '<='
[05](01, 19)-(01, 22): STRING(STRING) '"z"'
[05](01, 23)-(01, 25): NAME(NAME) 'or'
[05](01, 26)-(01, 29): STRING(STRING) '"A"'
[05](01, 30)-(01, 32): LESSEQUAL(OP) '<='
[05](01, 33)-(01, 34): NAME(NAME) 'x'
[05](01, 35)-(01, 37): LESSEQUAL(OP) '<='
[05](01, 38)-(01, 41): STRING(STRING) '"Z"'
[05](01, 41)-(01, 42): COLON(OP) ':'
[05](01, 42)-(01, 43): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 08): INDENT(INDENT) '        '
[06](01, 08)-(01, 14): NAME(NAME) 'inword'
[06](01, 15)-(01, 16): EQUAL(OP) '='
[06](01, 17)-(01, 21): NAME(NAME) 'True'
[06](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 08): INDENT(INDENT) '        '
[07](01, 08)-(01, 13): NAME(NAME) 'count'
[07](01, 14)-(01, 15): EQUAL(OP) '='
[07](01, 16)-(01, 21): NAME(NAME) 'count'
[07](01, 21)-(01, 22): PLUS(OP) '+'
[07](01, 22)-(01, 23): NUMBER(NUMBER) '1'
[07](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 08): INDENT(INDENT) '        '
[08](01, 08)-(01, 13): NAME(NAME) 'print'
[08](01, 13)-(01, 14): LPAR(OP) '('
[08](01, 14)-(01, 15): NAME(NAME) 'x'
[08](01, 15)-(01, 16): COMMA(OP) ','
[08](01, 17)-(01, 20): NAME(NAME) 'end'
[08](01, 20)-(01, 21): EQUAL(OP) '='
[08](01, 21)-(01, 23): STRING(STRING) '""'
[08](01, 23)-(01, 24): RPAR(OP) ')'
[08](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 08): NAME(NAME) 'else'
[09](01, 08)-(01, 09): COLON(OP) ':'
[09](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 08): INDENT(INDENT) '        '
[10](01, 08)-(01, 10): NAME(NAME) 'if'
[10](01, 11)-(01, 17): NAME(NAME) 'inword'
[10](01, 17)-(01, 18): COLON(OP) ':'
[10](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 12): INDENT(INDENT) '            '
[11](01, 12)-(01, 17): NAME(NAME) 'print'
[11](01, 17)-(01, 18): LPAR(OP) '('
[11](01, 18)-(01, 20): STRING(STRING) '""'
[11](01, 20)-(01, 21): COMMA(OP) ','
[11](01, 22)-(01, 27): NAME(NAME) 'count'
[11](01, 27)-(01, 28): RPAR(OP) ')'
[11](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 12): INDENT(INDENT) '            '
[12](01, 12)-(01, 17): NAME(NAME) 'count'
[12](01, 18)-(01, 19): EQUAL(OP) '='
[12](01, 20)-(01, 21): NUMBER(NUMBER) '0'
[12](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 12): INDENT(INDENT) '            '
[13](01, 12)-(01, 18): NAME(NAME) 'inword'
[13](01, 19)-(01, 20): EQUAL(OP) '='
[13](01, 21)-(01, 26): NAME(NAME) 'False'
[13](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 04): INDENT(INDENT) '    '
[14](01, 04)-(01, 06): NAME(NAME) 'if'
[14](01, 07)-(01, 08): NAME(NAME) 'x'
[14](01, 09)-(01, 11): EQEQUAL(OP) '=='
[14](01, 12)-(01, 18): NAME(NAME) 'string'
[14](01, 18)-(01, 19): LSQB(OP) '['
[14](01, 19)-(01, 20): MINUS(OP) '-'
[14](01, 20)-(01, 21): NUMBER(NUMBER) '1'
[14](01, 21)-(01, 22): RSQB(OP) ']'
[14](01, 22)-(01, 23): COLON(OP) ':'
[14](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 08): INDENT(INDENT) '        '
[15](01, 08)-(01, 13): NAME(NAME) 'print'
[15](01, 13)-(01, 14): LPAR(OP) '('
[15](01, 14)-(01, 16): STRING(STRING) '""'
[15](01, 16)-(01, 17): COMMA(OP) ','
[15](01, 18)-(01, 23): NAME(NAME) 'count'
[15](01, 23)-(01, 24): RPAR(OP) ')'
[15](01, 24)-(01, 25): NEWLINE(NEWLINE)
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

