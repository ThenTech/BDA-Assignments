[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 10): NAME(NAME) 'encode'
[00](01, 10)-(01, 11): LPAR(OP) '('
[00](01, 11)-(01, 23): NAME(NAME) 'input_string'
[00](01, 23)-(01, 24): RPAR(OP) ')'
[00](01, 24)-(01, 25): COLON(OP) ':'
[00](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 15): NAME(NAME) 'encoded_str'
[01](01, 16)-(01, 17): EQUAL(OP) '='
[01](01, 18)-(01, 20): STRING(STRING) '""'
[01](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 01): NL(NL) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 07): NAME(NAME) 'for'
[03](01, 08)-(01, 13): NAME(NAME) 'index'
[03](01, 14)-(01, 16): NAME(NAME) 'in'
[03](01, 17)-(01, 22): NAME(NAME) 'range'
[03](01, 22)-(01, 23): LPAR(OP) '('
[03](01, 23)-(01, 26): NAME(NAME) 'len'
[03](01, 26)-(01, 27): LPAR(OP) '('
[03](01, 27)-(01, 39): NAME(NAME) 'input_string'
[03](01, 39)-(01, 40): RPAR(OP) ')'
[03](01, 40)-(01, 41): RPAR(OP) ')'
[03](01, 41)-(01, 42): COLON(OP) ':'
[03](01, 42)-(01, 43): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 08): INDENT(INDENT) '        '
[04](01, 08)-(01, 18): NAME(NAME) 'line_count'
[04](01, 19)-(01, 20): EQUAL(OP) '='
[04](01, 21)-(01, 22): NUMBER(NUMBER) '0'
[04](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 08): INDENT(INDENT) '        '
[05](01, 08)-(01, 10): NAME(NAME) 'if'
[05](01, 11)-(01, 16): NAME(NAME) 'index'
[05](01, 17)-(01, 19): EQEQUAL(OP) '=='
[05](01, 20)-(01, 21): NUMBER(NUMBER) '0'
[05](01, 22)-(01, 25): NAME(NAME) 'and'
[05](01, 26)-(01, 29): NAME(NAME) 'len'
[05](01, 29)-(01, 30): LPAR(OP) '('
[05](01, 30)-(01, 42): NAME(NAME) 'input_string'
[05](01, 42)-(01, 43): RPAR(OP) ')'
[05](01, 44)-(01, 45): GREATER(OP) '>'
[05](01, 46)-(01, 47): NUMBER(NUMBER) '1'
[05](01, 47)-(01, 48): COLON(OP) ':'
[05](01, 48)-(01, 49): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 12): INDENT(INDENT) '            '
[06](01, 12)-(01, 14): NAME(NAME) 'if'
[06](01, 15)-(01, 27): NAME(NAME) 'input_string'
[06](01, 27)-(01, 28): LSQB(OP) '['
[06](01, 28)-(01, 33): NAME(NAME) 'index'
[06](01, 34)-(01, 35): PLUS(OP) '+'
[06](01, 36)-(01, 37): NUMBER(NUMBER) '1'
[06](01, 37)-(01, 38): RSQB(OP) ']'
[06](01, 39)-(01, 41): EQEQUAL(OP) '=='
[06](01, 42)-(01, 45): STRING(STRING) '"X"'
[06](01, 45)-(01, 46): COLON(OP) ':'
[06](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 16): INDENT(INDENT) '                '
[07](01, 16)-(01, 26): NAME(NAME) 'line_count'
[07](01, 27)-(01, 29): PLUSEQUAL(OP) '+='
[07](01, 30)-(01, 31): NUMBER(NUMBER) '1'
[07](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 08): INDENT(INDENT) '        '
[08](01, 08)-(01, 12): NAME(NAME) 'elif'
[08](01, 13)-(01, 18): NAME(NAME) 'index'
[08](01, 19)-(01, 21): EQEQUAL(OP) '=='
[08](01, 22)-(01, 25): NAME(NAME) 'len'
[08](01, 25)-(01, 26): LPAR(OP) '('
[08](01, 26)-(01, 38): NAME(NAME) 'input_string'
[08](01, 38)-(01, 39): RPAR(OP) ')'
[08](01, 40)-(01, 41): MINUS(OP) '-'
[08](01, 42)-(01, 43): NUMBER(NUMBER) '1'
[08](01, 44)-(01, 47): NAME(NAME) 'and'
[08](01, 48)-(01, 51): NAME(NAME) 'len'
[08](01, 51)-(01, 52): LPAR(OP) '('
[08](01, 52)-(01, 64): NAME(NAME) 'input_string'
[08](01, 64)-(01, 65): RPAR(OP) ')'
[08](01, 66)-(01, 67): GREATER(OP) '>'
[08](01, 68)-(01, 69): NUMBER(NUMBER) '1'
[08](01, 69)-(01, 70): COLON(OP) ':'
[08](01, 70)-(01, 71): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 12): INDENT(INDENT) '            '
[09](01, 12)-(01, 14): NAME(NAME) 'if'
[09](01, 15)-(01, 27): NAME(NAME) 'input_string'
[09](01, 27)-(01, 28): LSQB(OP) '['
[09](01, 28)-(01, 33): NAME(NAME) 'index'
[09](01, 34)-(01, 35): MINUS(OP) '-'
[09](01, 36)-(01, 37): NUMBER(NUMBER) '1'
[09](01, 37)-(01, 38): RSQB(OP) ']'
[09](01, 39)-(01, 41): EQEQUAL(OP) '=='
[09](01, 42)-(01, 45): STRING(STRING) '"X"'
[09](01, 45)-(01, 46): COLON(OP) ':'
[09](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 16): INDENT(INDENT) '                '
[10](01, 16)-(01, 26): NAME(NAME) 'line_count'
[10](01, 27)-(01, 29): PLUSEQUAL(OP) '+='
[10](01, 30)-(01, 31): NUMBER(NUMBER) '1'
[10](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 08): INDENT(INDENT) '        '
[11](01, 08)-(01, 12): NAME(NAME) 'elif'
[11](01, 13)-(01, 16): NAME(NAME) 'len'
[11](01, 16)-(01, 17): LPAR(OP) '('
[11](01, 17)-(01, 29): NAME(NAME) 'input_string'
[11](01, 29)-(01, 30): RPAR(OP) ')'
[11](01, 31)-(01, 32): GREATER(OP) '>'
[11](01, 33)-(01, 34): NUMBER(NUMBER) '2'
[11](01, 34)-(01, 35): COLON(OP) ':'
[11](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 12): INDENT(INDENT) '            '
[12](01, 12)-(01, 14): NAME(NAME) 'if'
[12](01, 15)-(01, 27): NAME(NAME) 'input_string'
[12](01, 27)-(01, 28): LSQB(OP) '['
[12](01, 28)-(01, 33): NAME(NAME) 'index'
[12](01, 34)-(01, 35): MINUS(OP) '-'
[12](01, 36)-(01, 37): NUMBER(NUMBER) '1'
[12](01, 37)-(01, 38): RSQB(OP) ']'
[12](01, 39)-(01, 41): EQEQUAL(OP) '=='
[12](01, 42)-(01, 45): STRING(STRING) '"X"'
[12](01, 45)-(01, 46): COLON(OP) ':'
[12](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 16): INDENT(INDENT) '                '
[13](01, 16)-(01, 26): NAME(NAME) 'line_count'
[13](01, 27)-(01, 29): PLUSEQUAL(OP) '+='
[13](01, 30)-(01, 31): NUMBER(NUMBER) '1'
[13](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 12): INDENT(INDENT) '            '
[14](01, 12)-(01, 14): NAME(NAME) 'if'
[14](01, 15)-(01, 27): NAME(NAME) 'input_string'
[14](01, 27)-(01, 28): LSQB(OP) '['
[14](01, 28)-(01, 33): NAME(NAME) 'index'
[14](01, 34)-(01, 35): PLUS(OP) '+'
[14](01, 36)-(01, 37): NUMBER(NUMBER) '1'
[14](01, 37)-(01, 38): RSQB(OP) ']'
[14](01, 39)-(01, 41): EQEQUAL(OP) '=='
[14](01, 42)-(01, 45): STRING(STRING) '"X"'
[14](01, 45)-(01, 46): COLON(OP) ':'
[14](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 16): INDENT(INDENT) '                '
[15](01, 16)-(01, 26): NAME(NAME) 'line_count'
[15](01, 27)-(01, 29): PLUSEQUAL(OP) '+='
[15](01, 30)-(01, 31): NUMBER(NUMBER) '1'
[15](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 01): NL(NL) '\n'
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 08): INDENT(INDENT) '        '
[17](01, 08)-(01, 19): NAME(NAME) 'encoded_str'
[17](01, 20)-(01, 22): PLUSEQUAL(OP) '+='
[17](01, 23)-(01, 26): NAME(NAME) 'str'
[17](01, 26)-(01, 27): LPAR(OP) '('
[17](01, 27)-(01, 37): NAME(NAME) 'line_count'
[17](01, 37)-(01, 38): RPAR(OP) ')'
[17](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 01): NL(NL) '\n'
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 04): INDENT(INDENT) '    '
[19](01, 04)-(01, 10): NAME(NAME) 'return'
[19](01, 11)-(01, 22): NAME(NAME) 'encoded_str'
[19](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): DEDENT(DEDENT)
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 01): NL(NL) '\n'
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 03): NAME(NAME) 'def'
[21](01, 04)-(01, 10): NAME(NAME) 'decode'
[21](01, 10)-(01, 11): LPAR(OP) '('
[21](01, 11)-(01, 23): NAME(NAME) 'input_string'
[21](01, 23)-(01, 24): RPAR(OP) ')'
[21](01, 24)-(01, 25): COLON(OP) ':'
[21](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 04): INDENT(INDENT) '    '
[22](01, 04)-(01, 11): NAME(NAME) 'str_len'
[22](01, 12)-(01, 13): EQUAL(OP) '='
[22](01, 14)-(01, 17): NAME(NAME) 'len'
[22](01, 17)-(01, 18): LPAR(OP) '('
[22](01, 18)-(01, 30): NAME(NAME) 'input_string'
[22](01, 30)-(01, 31): RPAR(OP) ')'
[22](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[22](02, 00)-(02, 00): DEDENT(DEDENT)
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[23](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[23](01, 00)-(01, 01): NL(NL) '\n'
[23](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[24](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[24](01, 00)-(01, 04): INDENT(INDENT) '    '
[24](01, 04)-(01, 07): NAME(NAME) 'for'
[24](01, 08)-(01, 15): NAME(NAME) 'element'
[24](01, 16)-(01, 18): NAME(NAME) 'in'
[24](01, 19)-(01, 30): NAME(NAME) 'brute_force'
[24](01, 30)-(01, 31): LPAR(OP) '('
[24](01, 31)-(01, 35): STRING(STRING) '" X"'
[24](01, 35)-(01, 36): COMMA(OP) ','
[24](01, 37)-(01, 44): NAME(NAME) 'str_len'
[24](01, 44)-(01, 45): RPAR(OP) ')'
[24](01, 45)-(01, 46): COLON(OP) ':'
[24](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[24](02, 00)-(02, 00): DEDENT(DEDENT)
[24](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[25](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[25](01, 00)-(01, 08): INDENT(INDENT) '        '
[25](01, 08)-(01, 10): NAME(NAME) 'if'
[25](01, 11)-(01, 17): NAME(NAME) 'encode'
[25](01, 17)-(01, 18): LPAR(OP) '('
[25](01, 18)-(01, 25): NAME(NAME) 'element'
[25](01, 25)-(01, 26): RPAR(OP) ')'
[25](01, 27)-(01, 29): EQEQUAL(OP) '=='
[25](01, 30)-(01, 42): NAME(NAME) 'input_string'
[25](01, 42)-(01, 43): COLON(OP) ':'
[25](01, 43)-(01, 44): NEWLINE(NEWLINE) '\n'
[25](02, 00)-(02, 00): DEDENT(DEDENT)
[25](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[26](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[26](01, 00)-(01, 12): INDENT(INDENT) '            '
[26](01, 12)-(01, 17): NAME(NAME) 'print'
[26](01, 17)-(01, 18): LPAR(OP) '('
[26](01, 18)-(01, 25): NAME(NAME) 'element'
[26](01, 25)-(01, 26): RPAR(OP) ')'
[26](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[26](02, 00)-(02, 00): DEDENT(DEDENT)
[26](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[27](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[27](01, 00)-(01, 01): NL(NL) '\n'
[27](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[28](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[28](01, 00)-(01, 01): NL(NL) '\n'
[28](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[29](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[29](01, 00)-(01, 03): NAME(NAME) 'def'
[29](01, 04)-(01, 15): NAME(NAME) 'brute_force'
[29](01, 15)-(01, 16): LPAR(OP) '('
[29](01, 16)-(01, 21): NAME(NAME) 'chars'
[29](01, 21)-(01, 22): COMMA(OP) ','
[29](01, 23)-(01, 29): NAME(NAME) 'length'
[29](01, 29)-(01, 30): RPAR(OP) ')'
[29](01, 30)-(01, 31): COLON(OP) ':'
[29](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[29](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[30](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[30](01, 00)-(01, 04): INDENT(INDENT) '    '
[30](01, 04)-(01, 15): NAME(NAME) 'forced_list'
[30](01, 16)-(01, 17): EQUAL(OP) '='
[30](01, 18)-(01, 19): LSQB(OP) '['
[30](01, 19)-(01, 20): LPAR(OP) '('
[30](01, 20)-(01, 25): NAME(NAME) 'chars'
[30](01, 25)-(01, 26): LSQB(OP) '['
[30](01, 26)-(01, 27): NUMBER(NUMBER) '0'
[30](01, 27)-(01, 28): RSQB(OP) ']'
[30](01, 28)-(01, 29): RPAR(OP) ')'
[30](01, 30)-(01, 31): STAR(OP) '*'
[30](01, 32)-(01, 38): NAME(NAME) 'length'
[30](01, 38)-(01, 39): RSQB(OP) ']'
[30](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[30](02, 00)-(02, 00): DEDENT(DEDENT)
[30](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[31](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[31](01, 00)-(01, 04): INDENT(INDENT) '    '
[31](01, 04)-(01, 12): NAME(NAME) 'new_list'
[31](01, 13)-(01, 14): EQUAL(OP) '='
[31](01, 15)-(01, 16): LSQB(OP) '['
[31](01, 16)-(01, 17): RSQB(OP) ']'
[31](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[31](02, 00)-(02, 00): DEDENT(DEDENT)
[31](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[32](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[32](01, 00)-(01, 01): NL(NL) '\n'
[32](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[33](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[33](01, 04)-(01, 54): COMMENT(COMMENT) '# Gaat over de lengte van de te bruteforcen string'
[33](01, 54)-(01, 55): NL(NL) '\n'
[33](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[34](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[34](01, 04)-(01, 100): COMMENT(COMMENT) '# Voeg de nieuwe lijst tijd aan de oude en maak de nieuwe leeg zodat je het process kan herhalen'
[34](01, 100)-(01, 101): NL(NL) '\n'
[34](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[35](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[35](01, 00)-(01, 04): INDENT(INDENT) '    '
[35](01, 04)-(01, 07): NAME(NAME) 'for'
[35](01, 08)-(01, 15): NAME(NAME) 'current'
[35](01, 16)-(01, 18): NAME(NAME) 'in'
[35](01, 19)-(01, 24): NAME(NAME) 'range'
[35](01, 24)-(01, 25): LPAR(OP) '('
[35](01, 25)-(01, 31): NAME(NAME) 'length'
[35](01, 31)-(01, 32): RPAR(OP) ')'
[35](01, 32)-(01, 33): COLON(OP) ':'
[35](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[35](02, 00)-(02, 00): DEDENT(DEDENT)
[35](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[36](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[36](01, 00)-(01, 01): NL(NL) '\n'
[36](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[37](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[37](01, 08)-(01, 60): COMMENT(COMMENT) '# Ga voor elk te gebruiken character alle stappen af'
[37](01, 60)-(01, 61): NL(NL) '\n'
[37](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[38](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[38](01, 00)-(01, 08): INDENT(INDENT) '        '
[38](01, 08)-(01, 11): NAME(NAME) 'for'
[38](01, 12)-(01, 17): NAME(NAME) 'index'
[38](01, 18)-(01, 20): NAME(NAME) 'in'
[38](01, 21)-(01, 26): NAME(NAME) 'range'
[38](01, 26)-(01, 27): LPAR(OP) '('
[38](01, 27)-(01, 28): NUMBER(NUMBER) '1'
[38](01, 28)-(01, 29): COMMA(OP) ','
[38](01, 30)-(01, 33): NAME(NAME) 'len'
[38](01, 33)-(01, 34): LPAR(OP) '('
[38](01, 34)-(01, 39): NAME(NAME) 'chars'
[38](01, 39)-(01, 40): RPAR(OP) ')'
[38](01, 40)-(01, 41): RPAR(OP) ')'
[38](01, 41)-(01, 42): COLON(OP) ':'
[38](01, 42)-(01, 43): NEWLINE(NEWLINE) '\n'
[38](02, 00)-(02, 00): DEDENT(DEDENT)
[38](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[39](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[39](01, 00)-(01, 01): NL(NL) '\n'
[39](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[40](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[40](01, 12)-(01, 136): COMMENT(COMMENT) '# Per element in de lijst, maak een nieuw element aan en pas het i(de) of current character aan en voeg dit toe aan de lijst'
[40](01, 136)-(01, 137): NL(NL) '\n'
[40](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[41](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[41](01, 00)-(01, 12): INDENT(INDENT) '            '
[41](01, 12)-(01, 15): NAME(NAME) 'for'
[41](01, 16)-(01, 23): NAME(NAME) 'element'
[41](01, 24)-(01, 26): NAME(NAME) 'in'
[41](01, 27)-(01, 38): NAME(NAME) 'forced_list'
[41](01, 38)-(01, 39): COLON(OP) ':'
[41](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[41](02, 00)-(02, 00): DEDENT(DEDENT)
[41](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[42](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[42](01, 00)-(01, 16): INDENT(INDENT) '                '
[42](01, 16)-(01, 25): NAME(NAME) 'new_force'
[42](01, 26)-(01, 27): EQUAL(OP) '='
[42](01, 28)-(01, 30): STRING(STRING) '""'
[42](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[42](02, 00)-(02, 00): DEDENT(DEDENT)
[42](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[43](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[43](01, 00)-(01, 16): INDENT(INDENT) '                '
[43](01, 16)-(01, 22): NAME(NAME) 'el_len'
[43](01, 23)-(01, 24): EQUAL(OP) '='
[43](01, 25)-(01, 28): NAME(NAME) 'len'
[43](01, 28)-(01, 29): LPAR(OP) '('
[43](01, 29)-(01, 36): NAME(NAME) 'element'
[43](01, 36)-(01, 37): RPAR(OP) ')'
[43](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[43](02, 00)-(02, 00): DEDENT(DEDENT)
[43](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[44](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[44](01, 16)-(01, 113): COMMENT(COMMENT) '# Pas het character op huidige positie aan naar het huidige character van het element in de lijst'
[44](01, 113)-(01, 114): NL(NL) '\n'
[44](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[45](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[45](01, 00)-(01, 16): INDENT(INDENT) '                '
[45](01, 16)-(01, 19): NAME(NAME) 'for'
[45](01, 20)-(01, 28): NAME(NAME) 'el_index'
[45](01, 29)-(01, 31): NAME(NAME) 'in'
[45](01, 32)-(01, 37): NAME(NAME) 'range'
[45](01, 37)-(01, 38): LPAR(OP) '('
[45](01, 38)-(01, 44): NAME(NAME) 'el_len'
[45](01, 44)-(01, 45): RPAR(OP) ')'
[45](01, 45)-(01, 46): COLON(OP) ':'
[45](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[45](02, 00)-(02, 00): DEDENT(DEDENT)
[45](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[46](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[46](01, 00)-(01, 20): INDENT(INDENT) '                    '
[46](01, 20)-(01, 22): NAME(NAME) 'if'
[46](01, 23)-(01, 31): NAME(NAME) 'el_index'
[46](01, 32)-(01, 34): EQEQUAL(OP) '=='
[46](01, 35)-(01, 42): NAME(NAME) 'current'
[46](01, 42)-(01, 43): COLON(OP) ':'
[46](01, 43)-(01, 44): NEWLINE(NEWLINE) '\n'
[46](02, 00)-(02, 00): DEDENT(DEDENT)
[46](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[47](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[47](01, 00)-(01, 24): INDENT(INDENT) '                        '
[47](01, 24)-(01, 33): NAME(NAME) 'new_force'
[47](01, 34)-(01, 36): PLUSEQUAL(OP) '+='
[47](01, 37)-(01, 42): NAME(NAME) 'chars'
[47](01, 42)-(01, 43): LSQB(OP) '['
[47](01, 43)-(01, 48): NAME(NAME) 'index'
[47](01, 48)-(01, 49): RSQB(OP) ']'
[47](01, 49)-(01, 50): NEWLINE(NEWLINE) '\n'
[47](02, 00)-(02, 00): DEDENT(DEDENT)
[47](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[48](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[48](01, 00)-(01, 20): INDENT(INDENT) '                    '
[48](01, 20)-(01, 24): NAME(NAME) 'else'
[48](01, 24)-(01, 25): COLON(OP) ':'
[48](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[48](02, 00)-(02, 00): DEDENT(DEDENT)
[48](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[49](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[49](01, 00)-(01, 24): INDENT(INDENT) '                        '
[49](01, 24)-(01, 33): NAME(NAME) 'new_force'
[49](01, 34)-(01, 36): PLUSEQUAL(OP) '+='
[49](01, 37)-(01, 44): NAME(NAME) 'element'
[49](01, 44)-(01, 45): LSQB(OP) '['
[49](01, 45)-(01, 53): NAME(NAME) 'el_index'
[49](01, 53)-(01, 54): RSQB(OP) ']'
[49](01, 54)-(01, 55): NEWLINE(NEWLINE) '\n'
[49](02, 00)-(02, 00): DEDENT(DEDENT)
[49](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[50](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[50](01, 00)-(01, 16): INDENT(INDENT) '                '
[50](01, 16)-(01, 24): NAME(NAME) 'new_list'
[50](01, 24)-(01, 25): DOT(OP) '.'
[50](01, 25)-(01, 31): NAME(NAME) 'append'
[50](01, 31)-(01, 32): LPAR(OP) '('
[50](01, 32)-(01, 41): NAME(NAME) 'new_force'
[50](01, 41)-(01, 42): RPAR(OP) ')'
[50](01, 42)-(01, 43): NEWLINE(NEWLINE) '\n'
[50](02, 00)-(02, 00): DEDENT(DEDENT)
[50](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[51](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[51](01, 00)-(01, 08): INDENT(INDENT) '        '
[51](01, 08)-(01, 19): NAME(NAME) 'forced_list'
[51](01, 20)-(01, 22): PLUSEQUAL(OP) '+='
[51](01, 23)-(01, 31): NAME(NAME) 'new_list'
[51](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[51](02, 00)-(02, 00): DEDENT(DEDENT)
[51](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[52](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[52](01, 00)-(01, 08): INDENT(INDENT) '        '
[52](01, 08)-(01, 16): NAME(NAME) 'new_list'
[52](01, 17)-(01, 18): EQUAL(OP) '='
[52](01, 19)-(01, 20): LSQB(OP) '['
[52](01, 20)-(01, 21): RSQB(OP) ']'
[52](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[52](02, 00)-(02, 00): DEDENT(DEDENT)
[52](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[53](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[53](01, 00)-(01, 01): NL(NL) '\n'
[53](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[54](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[54](01, 00)-(01, 04): INDENT(INDENT) '    '
[54](01, 04)-(01, 10): NAME(NAME) 'return'
[54](01, 11)-(01, 22): NAME(NAME) 'forced_list'
[54](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[54](02, 00)-(02, 00): DEDENT(DEDENT)
[54](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

