[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 26): NAME(NAME) 'is_palindrome_sentence'
[00](01, 26)-(01, 27): LPAR(OP) '('
[00](01, 27)-(01, 35): NAME(NAME) 'sentence'
[00](01, 35)-(01, 36): RPAR(OP) ')'
[00](01, 36)-(01, 37): COLON(OP) ':'
[00](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 16): NAME(NAME) 'countForward'
[01](01, 17)-(01, 18): EQUAL(OP) '='
[01](01, 19)-(01, 20): NUMBER(NUMBER) '0'
[01](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 17): NAME(NAME) 'countBackward'
[02](01, 18)-(01, 19): EQUAL(OP) '='
[02](01, 20)-(01, 23): NAME(NAME) 'len'
[02](01, 23)-(01, 24): LPAR(OP) '('
[02](01, 24)-(01, 32): NAME(NAME) 'sentence'
[02](01, 32)-(01, 33): RPAR(OP) ')'
[02](01, 34)-(01, 35): MINUS(OP) '-'
[02](01, 36)-(01, 37): NUMBER(NUMBER) '1'
[02](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 12): NAME(NAME) 'alphabet'
[03](01, 13)-(01, 14): EQUAL(OP) '='
[03](01, 15)-(01, 43): STRING(STRING) "'abcdefghijklmnopqrstuvwxyz'"
[03](01, 43)-(01, 44): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 04)-(01, 05): NL(NL) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 09): NAME(NAME) 'while'
[05](01, 10)-(01, 22): NAME(NAME) 'countForward'
[05](01, 23)-(01, 24): LESS(OP) '<'
[05](01, 25)-(01, 38): NAME(NAME) 'countBackward'
[05](01, 38)-(01, 39): COLON(OP) ':'
[05](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 08): INDENT(INDENT) '        '
[06](01, 08)-(01, 10): NAME(NAME) 'if'
[06](01, 11)-(01, 12): LPAR(OP) '('
[06](01, 12)-(01, 20): NAME(NAME) 'sentence'
[06](01, 20)-(01, 21): LSQB(OP) '['
[06](01, 21)-(01, 33): NAME(NAME) 'countForward'
[06](01, 33)-(01, 34): RSQB(OP) ']'
[06](01, 34)-(01, 35): DOT(OP) '.'
[06](01, 35)-(01, 40): NAME(NAME) 'lower'
[06](01, 40)-(01, 41): LPAR(OP) '('
[06](01, 41)-(01, 42): RPAR(OP) ')'
[06](01, 43)-(01, 45): NAME(NAME) 'in'
[06](01, 46)-(01, 54): NAME(NAME) 'alphabet'
[06](01, 54)-(01, 55): RPAR(OP) ')'
[06](01, 56)-(01, 59): NAME(NAME) 'and'
[06](01, 60)-(01, 63): NAME(NAME) 'not'
[06](01, 63)-(01, 64): LPAR(OP) '('
[06](01, 64)-(01, 72): NAME(NAME) 'sentence'
[06](01, 72)-(01, 73): LSQB(OP) '['
[06](01, 73)-(01, 86): NAME(NAME) 'countBackward'
[06](01, 86)-(01, 87): RSQB(OP) ']'
[06](01, 87)-(01, 88): DOT(OP) '.'
[06](01, 88)-(01, 93): NAME(NAME) 'lower'
[06](01, 93)-(01, 94): LPAR(OP) '('
[06](01, 94)-(01, 95): RPAR(OP) ')'
[06](01, 96)-(01, 98): NAME(NAME) 'in'
[06](01, 99)-(01, 107): NAME(NAME) 'alphabet'
[06](01, 107)-(01, 108): RPAR(OP) ')'
[06](01, 108)-(01, 109): COLON(OP) ':'
[06](01, 109)-(01, 110): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 12): INDENT(INDENT) '            '
[07](01, 12)-(01, 25): NAME(NAME) 'countBackward'
[07](01, 26)-(01, 28): MINEQUAL(OP) '-='
[07](01, 29)-(01, 30): NUMBER(NUMBER) '1'
[07](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 08): INDENT(INDENT) '        '
[08](01, 08)-(01, 12): NAME(NAME) 'elif'
[08](01, 13)-(01, 16): NAME(NAME) 'not'
[08](01, 16)-(01, 17): LPAR(OP) '('
[08](01, 17)-(01, 25): NAME(NAME) 'sentence'
[08](01, 25)-(01, 26): LSQB(OP) '['
[08](01, 26)-(01, 38): NAME(NAME) 'countForward'
[08](01, 38)-(01, 39): RSQB(OP) ']'
[08](01, 39)-(01, 40): DOT(OP) '.'
[08](01, 40)-(01, 45): NAME(NAME) 'lower'
[08](01, 45)-(01, 46): LPAR(OP) '('
[08](01, 46)-(01, 47): RPAR(OP) ')'
[08](01, 48)-(01, 50): NAME(NAME) 'in'
[08](01, 51)-(01, 59): NAME(NAME) 'alphabet'
[08](01, 59)-(01, 60): RPAR(OP) ')'
[08](01, 61)-(01, 64): NAME(NAME) 'and'
[08](01, 65)-(01, 73): NAME(NAME) 'sentence'
[08](01, 73)-(01, 74): LSQB(OP) '['
[08](01, 74)-(01, 87): NAME(NAME) 'countBackward'
[08](01, 87)-(01, 88): RSQB(OP) ']'
[08](01, 88)-(01, 89): DOT(OP) '.'
[08](01, 89)-(01, 94): NAME(NAME) 'lower'
[08](01, 94)-(01, 95): LPAR(OP) '('
[08](01, 95)-(01, 96): RPAR(OP) ')'
[08](01, 97)-(01, 99): NAME(NAME) 'in'
[08](01, 100)-(01, 108): NAME(NAME) 'alphabet'
[08](01, 108)-(01, 109): COLON(OP) ':'
[08](01, 109)-(01, 110): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 12): INDENT(INDENT) '            '
[09](01, 12)-(01, 24): NAME(NAME) 'countForward'
[09](01, 25)-(01, 27): PLUSEQUAL(OP) '+='
[09](01, 28)-(01, 29): NUMBER(NUMBER) '1'
[09](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 08): INDENT(INDENT) '        '
[10](01, 08)-(01, 12): NAME(NAME) 'else'
[10](01, 12)-(01, 13): COLON(OP) ':'
[10](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 12): INDENT(INDENT) '            '
[11](01, 12)-(01, 14): NAME(NAME) 'if'
[11](01, 15)-(01, 23): NAME(NAME) 'sentence'
[11](01, 23)-(01, 24): LSQB(OP) '['
[11](01, 24)-(01, 36): NAME(NAME) 'countForward'
[11](01, 36)-(01, 37): RSQB(OP) ']'
[11](01, 37)-(01, 38): DOT(OP) '.'
[11](01, 38)-(01, 43): NAME(NAME) 'lower'
[11](01, 43)-(01, 44): LPAR(OP) '('
[11](01, 44)-(01, 45): RPAR(OP) ')'
[11](01, 46)-(01, 48): NOTEQUAL(OP) '!='
[11](01, 49)-(01, 57): NAME(NAME) 'sentence'
[11](01, 57)-(01, 58): LSQB(OP) '['
[11](01, 58)-(01, 71): NAME(NAME) 'countBackward'
[11](01, 71)-(01, 72): RSQB(OP) ']'
[11](01, 72)-(01, 73): DOT(OP) '.'
[11](01, 73)-(01, 78): NAME(NAME) 'lower'
[11](01, 78)-(01, 79): LPAR(OP) '('
[11](01, 79)-(01, 80): RPAR(OP) ')'
[11](01, 80)-(01, 81): COLON(OP) ':'
[11](01, 81)-(01, 82): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 16): INDENT(INDENT) '                '
[12](01, 16)-(01, 22): NAME(NAME) 'return'
[12](01, 23)-(01, 28): NAME(NAME) 'False'
[12](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 12): INDENT(INDENT) '            '
[13](01, 12)-(01, 16): NAME(NAME) 'else'
[13](01, 16)-(01, 17): COLON(OP) ':'
[13](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 16): INDENT(INDENT) '                '
[14](01, 16)-(01, 28): NAME(NAME) 'countForward'
[14](01, 29)-(01, 31): PLUSEQUAL(OP) '+='
[14](01, 32)-(01, 33): NUMBER(NUMBER) '1'
[14](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 16): INDENT(INDENT) '                '
[15](01, 16)-(01, 29): NAME(NAME) 'countBackward'
[15](01, 30)-(01, 32): MINEQUAL(OP) '-='
[15](01, 33)-(01, 34): NUMBER(NUMBER) '1'
[15](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 12)-(01, 13): NL(NL) '\n'
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 04): INDENT(INDENT) '    '
[17](01, 04)-(01, 10): NAME(NAME) 'return'
[17](01, 11)-(01, 15): NAME(NAME) 'True'
[17](01, 15)-(01, 16): NEWLINE(NEWLINE)
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

