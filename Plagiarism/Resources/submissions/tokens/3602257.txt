[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 22): COMMENT(COMMENT) '# write your code here'
[00](01, 22)-(01, 23): NL(NL) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): NAME(NAME) 'word'
[01](01, 05)-(01, 06): EQUAL(OP) '='
[01](01, 07)-(01, 12): NAME(NAME) 'input'
[01](01, 12)-(01, 13): LPAR(OP) '('
[01](01, 13)-(01, 29): STRING(STRING) '"Give me a word"'
[01](01, 29)-(01, 30): RPAR(OP) ')'
[01](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 12): NAME(NAME) 'isPalindrome'
[02](01, 13)-(01, 14): EQUAL(OP) '='
[02](01, 15)-(01, 20): NAME(NAME) 'False'
[02](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 01): NL(NL) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 03): NAME(NAME) 'for'
[04](01, 04)-(01, 05): NAME(NAME) 'i'
[04](01, 06)-(01, 08): NAME(NAME) 'in'
[04](01, 09)-(01, 14): NAME(NAME) 'range'
[04](01, 14)-(01, 15): LPAR(OP) '('
[04](01, 15)-(01, 16): NUMBER(NUMBER) '0'
[04](01, 16)-(01, 17): COMMA(OP) ','
[04](01, 18)-(01, 21): NAME(NAME) 'len'
[04](01, 21)-(01, 22): LPAR(OP) '('
[04](01, 22)-(01, 26): NAME(NAME) 'word'
[04](01, 26)-(01, 27): RPAR(OP) ')'
[04](01, 28)-(01, 30): DOUBLESLASH(OP) '//'
[04](01, 31)-(01, 32): NUMBER(NUMBER) '2'
[04](01, 32)-(01, 33): RPAR(OP) ')'
[04](01, 33)-(01, 34): COLON(OP) ':'
[04](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 06): NAME(NAME) 'if'
[05](01, 07)-(01, 11): NAME(NAME) 'word'
[05](01, 11)-(01, 12): LSQB(OP) '['
[05](01, 12)-(01, 13): NAME(NAME) 'i'
[05](01, 13)-(01, 14): RSQB(OP) ']'
[05](01, 15)-(01, 17): NOTEQUAL(OP) '!='
[05](01, 18)-(01, 22): NAME(NAME) 'word'
[05](01, 22)-(01, 23): LSQB(OP) '['
[05](01, 23)-(01, 26): NAME(NAME) 'len'
[05](01, 26)-(01, 27): LPAR(OP) '('
[05](01, 27)-(01, 31): NAME(NAME) 'word'
[05](01, 31)-(01, 32): RPAR(OP) ')'
[05](01, 33)-(01, 34): MINUS(OP) '-'
[05](01, 35)-(01, 36): NUMBER(NUMBER) '1'
[05](01, 37)-(01, 38): MINUS(OP) '-'
[05](01, 39)-(01, 40): NAME(NAME) 'i'
[05](01, 40)-(01, 41): RSQB(OP) ']'
[05](01, 41)-(01, 42): COLON(OP) ':'
[05](01, 42)-(01, 43): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 08): INDENT(INDENT) '        '
[06](01, 08)-(01, 13): NAME(NAME) 'break'
[06](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 04): INDENT(INDENT) '    '
[07](01, 04)-(01, 08): NAME(NAME) 'elif'
[07](01, 09)-(01, 10): NAME(NAME) 'i'
[07](01, 11)-(01, 13): EQEQUAL(OP) '=='
[07](01, 14)-(01, 15): LPAR(OP) '('
[07](01, 15)-(01, 18): NAME(NAME) 'len'
[07](01, 18)-(01, 19): LPAR(OP) '('
[07](01, 19)-(01, 23): NAME(NAME) 'word'
[07](01, 23)-(01, 24): RPAR(OP) ')'
[07](01, 25)-(01, 27): DOUBLESLASH(OP) '//'
[07](01, 28)-(01, 29): NUMBER(NUMBER) '2'
[07](01, 29)-(01, 30): RPAR(OP) ')'
[07](01, 31)-(01, 32): MINUS(OP) '-'
[07](01, 33)-(01, 34): NUMBER(NUMBER) '1'
[07](01, 35)-(01, 38): NAME(NAME) 'and'
[07](01, 39)-(01, 43): NAME(NAME) 'word'
[07](01, 43)-(01, 44): LSQB(OP) '['
[07](01, 44)-(01, 45): NAME(NAME) 'i'
[07](01, 45)-(01, 46): RSQB(OP) ']'
[07](01, 47)-(01, 49): EQEQUAL(OP) '=='
[07](01, 50)-(01, 54): NAME(NAME) 'word'
[07](01, 54)-(01, 55): LSQB(OP) '['
[07](01, 55)-(01, 58): NAME(NAME) 'len'
[07](01, 58)-(01, 59): LPAR(OP) '('
[07](01, 59)-(01, 63): NAME(NAME) 'word'
[07](01, 63)-(01, 64): RPAR(OP) ')'
[07](01, 65)-(01, 66): MINUS(OP) '-'
[07](01, 67)-(01, 68): NUMBER(NUMBER) '1'
[07](01, 69)-(01, 70): MINUS(OP) '-'
[07](01, 71)-(01, 72): NAME(NAME) 'i'
[07](01, 72)-(01, 73): RSQB(OP) ']'
[07](01, 73)-(01, 74): COLON(OP) ':'
[07](01, 74)-(01, 75): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 08): INDENT(INDENT) '        '
[08](01, 08)-(01, 20): NAME(NAME) 'isPalindrome'
[08](01, 21)-(01, 22): EQUAL(OP) '='
[08](01, 23)-(01, 27): NAME(NAME) 'True'
[08](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 02): NAME(NAME) 'if'
[09](01, 03)-(01, 15): NAME(NAME) 'isPalindrome'
[09](01, 15)-(01, 16): COLON(OP) ':'
[09](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 04): INDENT(INDENT) '    '
[10](01, 04)-(01, 09): NAME(NAME) 'print'
[10](01, 09)-(01, 10): LPAR(OP) '('
[10](01, 10)-(01, 14): NAME(NAME) 'word'
[10](01, 14)-(01, 15): COMMA(OP) ','
[10](01, 16)-(01, 34): STRING(STRING) '" is a palindrome"'
[10](01, 34)-(01, 35): RPAR(OP) ')'
[10](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 04): NAME(NAME) 'else'
[11](01, 04)-(01, 05): COLON(OP) ':'
[11](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 04): INDENT(INDENT) '    '
[12](01, 04)-(01, 09): NAME(NAME) 'print'
[12](01, 09)-(01, 10): LPAR(OP) '('
[12](01, 10)-(01, 14): NAME(NAME) 'word'
[12](01, 14)-(01, 15): COMMA(OP) ','
[12](01, 16)-(01, 38): STRING(STRING) '" is not a palindrome"'
[12](01, 38)-(01, 39): RPAR(OP) ')'
[12](01, 39)-(01, 40): NEWLINE(NEWLINE)
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

