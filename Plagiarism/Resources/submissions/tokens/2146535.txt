[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 04): NAME(NAME) 'year'
[00](01, 04)-(01, 05): EQUAL(OP) '='
[00](01, 06)-(01, 09): NAME(NAME) 'int'
[00](01, 09)-(01, 10): LPAR(OP) '('
[00](01, 10)-(01, 15): NAME(NAME) 'input'
[00](01, 15)-(01, 16): LPAR(OP) '('
[00](01, 16)-(01, 24): STRING(STRING) '"year: "'
[00](01, 24)-(01, 25): RPAR(OP) ')'
[00](01, 25)-(01, 26): RPAR(OP) ')'
[00](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 01): NL(NL) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 02): NAME(NAME) 'if'
[02](01, 03)-(01, 07): NAME(NAME) 'year'
[02](01, 07)-(01, 08): PERCENT(OP) '%'
[02](01, 08)-(01, 09): NUMBER(NUMBER) '4'
[02](01, 09)-(01, 11): EQEQUAL(OP) '=='
[02](01, 11)-(01, 12): NUMBER(NUMBER) '0'
[02](01, 13)-(01, 16): NAME(NAME) 'and'
[02](01, 18)-(01, 22): NAME(NAME) 'year'
[02](01, 22)-(01, 23): PERCENT(OP) '%'
[02](01, 23)-(01, 26): NUMBER(NUMBER) '100'
[02](01, 26)-(01, 28): NOTEQUAL(OP) '!='
[02](01, 28)-(01, 29): NUMBER(NUMBER) '0'
[02](01, 29)-(01, 30): COLON(OP) ':'
[02](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 09): NAME(NAME) 'print'
[03](01, 09)-(01, 10): LPAR(OP) '('
[03](01, 10)-(01, 14): NAME(NAME) 'year'
[03](01, 14)-(01, 15): COMMA(OP) ','
[03](01, 16)-(01, 32): STRING(STRING) '"is a leap year"'
[03](01, 32)-(01, 33): RPAR(OP) ')'
[03](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 01): NL(NL) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): NAME(NAME) 'elif'
[05](01, 05)-(01, 09): NAME(NAME) 'year'
[05](01, 09)-(01, 10): PERCENT(OP) '%'
[05](01, 10)-(01, 11): NUMBER(NUMBER) '4'
[05](01, 11)-(01, 13): EQEQUAL(OP) '=='
[05](01, 13)-(01, 14): NUMBER(NUMBER) '0'
[05](01, 15)-(01, 18): NAME(NAME) 'and'
[05](01, 19)-(01, 23): NAME(NAME) 'year'
[05](01, 23)-(01, 24): PERCENT(OP) '%'
[05](01, 24)-(01, 27): NUMBER(NUMBER) '100'
[05](01, 27)-(01, 29): EQEQUAL(OP) '=='
[05](01, 29)-(01, 30): NUMBER(NUMBER) '0'
[05](01, 31)-(01, 34): NAME(NAME) 'and'
[05](01, 35)-(01, 39): NAME(NAME) 'year'
[05](01, 39)-(01, 40): PERCENT(OP) '%'
[05](01, 40)-(01, 43): NUMBER(NUMBER) '400'
[05](01, 43)-(01, 45): EQEQUAL(OP) '=='
[05](01, 45)-(01, 46): NUMBER(NUMBER) '0'
[05](01, 46)-(01, 47): COLON(OP) ':'
[05](01, 47)-(01, 48): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 04): INDENT(INDENT) '    '
[06](01, 04)-(01, 09): NAME(NAME) 'print'
[06](01, 09)-(01, 10): LPAR(OP) '('
[06](01, 10)-(01, 14): NAME(NAME) 'year'
[06](01, 14)-(01, 15): COMMA(OP) ','
[06](01, 16)-(01, 32): STRING(STRING) '"is a leap year"'
[06](01, 32)-(01, 33): RPAR(OP) ')'
[06](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 01): NL(NL) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 04): NAME(NAME) 'else'
[08](01, 04)-(01, 05): COLON(OP) ':'
[08](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 09): NAME(NAME) 'print'
[09](01, 09)-(01, 10): LPAR(OP) '('
[09](01, 10)-(01, 14): NAME(NAME) 'year'
[09](01, 14)-(01, 15): COMMA(OP) ','
[09](01, 16)-(01, 36): STRING(STRING) '"is not a leap year"'
[09](01, 36)-(01, 37): RPAR(OP) ')'
[09](01, 37)-(01, 38): NEWLINE(NEWLINE)
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

