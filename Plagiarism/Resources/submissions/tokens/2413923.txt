[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 16): NAME(NAME) 'print_combos'
[00](01, 16)-(01, 17): LPAR(OP) '('
[00](01, 17)-(01, 25): NAME(NAME) 'previous'
[00](01, 25)-(01, 26): COMMA(OP) ','
[00](01, 27)-(01, 28): NAME(NAME) 'n'
[00](01, 28)-(01, 29): RPAR(OP) ')'
[00](01, 29)-(01, 30): COLON(OP) ':'
[00](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 01): INDENT(INDENT) '\t'
[01](01, 01)-(01, 03): NAME(NAME) 'if'
[01](01, 04)-(01, 05): NAME(NAME) 'n'
[01](01, 06)-(01, 07): LESS(OP) '<'
[01](01, 08)-(01, 09): NUMBER(NUMBER) '1'
[01](01, 09)-(01, 10): COLON(OP) ':'
[01](01, 10)-(01, 11): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 02): INDENT(INDENT) '\t\t'
[02](01, 02)-(01, 05): NAME(NAME) 'for'
[02](01, 06)-(01, 07): NAME(NAME) 'i'
[02](01, 08)-(01, 10): NAME(NAME) 'in'
[02](01, 11)-(01, 17): STRING(STRING) '"ACGT"'
[02](01, 17)-(01, 18): COLON(OP) ':'
[02](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 03): INDENT(INDENT) '\t\t\t'
[03](01, 03)-(01, 08): NAME(NAME) 'print'
[03](01, 08)-(01, 09): LPAR(OP) '('
[03](01, 09)-(01, 17): NAME(NAME) 'previous'
[03](01, 18)-(01, 19): PLUS(OP) '+'
[03](01, 20)-(01, 21): NAME(NAME) 'i'
[03](01, 21)-(01, 22): RPAR(OP) ')'
[03](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 01): INDENT(INDENT) '\t'
[04](01, 01)-(01, 05): NAME(NAME) 'else'
[04](01, 05)-(01, 06): COLON(OP) ':'
[04](01, 06)-(01, 07): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 02): INDENT(INDENT) '\t\t'
[05](01, 02)-(01, 05): NAME(NAME) 'for'
[05](01, 06)-(01, 12): NAME(NAME) 'nucleo'
[05](01, 13)-(01, 15): NAME(NAME) 'in'
[05](01, 16)-(01, 22): STRING(STRING) '"ACGT"'
[05](01, 22)-(01, 23): COLON(OP) ':'
[05](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 03): INDENT(INDENT) '\t\t\t'
[06](01, 03)-(01, 15): NAME(NAME) 'print_combos'
[06](01, 15)-(01, 16): LPAR(OP) '('
[06](01, 16)-(01, 24): NAME(NAME) 'previous'
[06](01, 25)-(01, 26): PLUS(OP) '+'
[06](01, 27)-(01, 33): NAME(NAME) 'nucleo'
[06](01, 33)-(01, 34): COMMA(OP) ','
[06](01, 35)-(01, 36): NAME(NAME) 'n'
[06](01, 36)-(01, 37): MINUS(OP) '-'
[06](01, 37)-(01, 38): NUMBER(NUMBER) '1'
[06](01, 38)-(01, 39): RPAR(OP) ')'
[06](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 01): NL(NL) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 01): NL(NL) '\n'
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 05): NAME(NAME) 'bases'
[09](01, 06)-(01, 07): EQUAL(OP) '='
[09](01, 08)-(01, 11): NAME(NAME) 'int'
[09](01, 11)-(01, 12): LPAR(OP) '('
[09](01, 12)-(01, 17): NAME(NAME) 'input'
[09](01, 17)-(01, 18): LPAR(OP) '('
[09](01, 18)-(01, 28): STRING(STRING) '"bases = "'
[09](01, 28)-(01, 29): RPAR(OP) ')'
[09](01, 29)-(01, 30): RPAR(OP) ')'
[09](01, 30)-(01, 31): MINUS(OP) '-'
[09](01, 31)-(01, 32): NUMBER(NUMBER) '1'
[09](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 12): NAME(NAME) 'print_combos'
[10](01, 12)-(01, 13): LPAR(OP) '('
[10](01, 13)-(01, 15): STRING(STRING) '""'
[10](01, 15)-(01, 16): COMMA(OP) ','
[10](01, 18)-(01, 23): NAME(NAME) 'bases'
[10](01, 23)-(01, 24): RPAR(OP) ')'
[10](01, 24)-(01, 25): NEWLINE(NEWLINE)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

