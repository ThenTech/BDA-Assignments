[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 20): NAME(NAME) 'fibonacci_values'
[00](01, 20)-(01, 21): LPAR(OP) '('
[00](01, 21)-(01, 22): NAME(NAME) 'i'
[00](01, 22)-(01, 23): RPAR(OP) ')'
[00](01, 23)-(01, 24): COLON(OP) ':'
[00](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 01): INDENT(INDENT) '\t'
[01](01, 01)-(01, 18): NAME(NAME) 'fibonaccisequence'
[01](01, 19)-(01, 20): EQUAL(OP) '='
[01](01, 21)-(01, 22): LSQB(OP) '['
[01](01, 22)-(01, 23): NUMBER(NUMBER) '0'
[01](01, 23)-(01, 24): COMMA(OP) ','
[01](01, 25)-(01, 26): NUMBER(NUMBER) '1'
[01](01, 26)-(01, 27): RSQB(OP) ']'
[01](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 01): INDENT(INDENT) '\t'
[02](01, 01)-(01, 04): NAME(NAME) 'for'
[02](01, 05)-(01, 06): NAME(NAME) 'n'
[02](01, 07)-(01, 09): NAME(NAME) 'in'
[02](01, 10)-(01, 15): NAME(NAME) 'range'
[02](01, 15)-(01, 16): LPAR(OP) '('
[02](01, 16)-(01, 17): NUMBER(NUMBER) '2'
[02](01, 17)-(01, 18): COMMA(OP) ','
[02](01, 18)-(01, 19): NAME(NAME) 'i'
[02](01, 19)-(01, 20): RPAR(OP) ')'
[02](01, 20)-(01, 21): COLON(OP) ':'
[02](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 02): INDENT(INDENT) '\t\t'
[03](01, 02)-(01, 19): NAME(NAME) 'fibonaccisequence'
[03](01, 20)-(01, 22): PLUSEQUAL(OP) '+='
[03](01, 23)-(01, 24): LSQB(OP) '['
[03](01, 24)-(01, 25): LPAR(OP) '('
[03](01, 25)-(01, 42): NAME(NAME) 'fibonaccisequence'
[03](01, 42)-(01, 43): LSQB(OP) '['
[03](01, 43)-(01, 44): NAME(NAME) 'n'
[03](01, 44)-(01, 45): MINUS(OP) '-'
[03](01, 45)-(01, 46): NUMBER(NUMBER) '2'
[03](01, 46)-(01, 47): RSQB(OP) ']'
[03](01, 48)-(01, 49): PLUS(OP) '+'
[03](01, 50)-(01, 67): NAME(NAME) 'fibonaccisequence'
[03](01, 67)-(01, 68): LSQB(OP) '['
[03](01, 68)-(01, 69): NAME(NAME) 'n'
[03](01, 69)-(01, 70): MINUS(OP) '-'
[03](01, 70)-(01, 71): NUMBER(NUMBER) '1'
[03](01, 71)-(01, 72): RSQB(OP) ']'
[03](01, 72)-(01, 73): RPAR(OP) ')'
[03](01, 73)-(01, 74): RSQB(OP) ']'
[03](01, 74)-(01, 75): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 01): INDENT(INDENT) '\t'
[04](01, 01)-(01, 07): NAME(NAME) 'return'
[04](01, 08)-(01, 25): NAME(NAME) 'fibonaccisequence'
[04](01, 25)-(01, 26): NEWLINE(NEWLINE)
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

