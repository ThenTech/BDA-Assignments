[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'zin'
[00](01, 04)-(01, 05): EQUAL(OP) '='
[00](01, 06)-(01, 11): NAME(NAME) 'input'
[00](01, 11)-(01, 12): LPAR(OP) '('
[00](01, 12)-(01, 14): STRING(STRING) '""'
[00](01, 14)-(01, 15): RPAR(OP) ')'
[00](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 07): NAME(NAME) 'anagram'
[01](01, 08)-(01, 09): EQUAL(OP) '='
[01](01, 10)-(01, 15): NAME(NAME) 'input'
[01](01, 15)-(01, 16): LPAR(OP) '('
[01](01, 16)-(01, 18): STRING(STRING) '""'
[01](01, 18)-(01, 19): RPAR(OP) ')'
[01](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 07): NAME(NAME) 'alfabet'
[02](01, 08)-(01, 09): EQUAL(OP) '='
[02](01, 10)-(01, 38): STRING(STRING) '"abcdefghijklmnopqrstuvwxyz"'
[02](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 09): NAME(NAME) 'aantalzin'
[03](01, 10)-(01, 11): EQUAL(OP) '='
[03](01, 12)-(01, 13): NUMBER(NUMBER) '0'
[03](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 13): NAME(NAME) 'aantalanagram'
[04](01, 14)-(01, 15): EQUAL(OP) '='
[04](01, 16)-(01, 17): NUMBER(NUMBER) '0'
[04](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 03): NAME(NAME) 'for'
[05](01, 04)-(01, 05): NAME(NAME) 'i'
[05](01, 06)-(01, 08): NAME(NAME) 'in'
[05](01, 09)-(01, 14): NAME(NAME) 'range'
[05](01, 14)-(01, 15): LPAR(OP) '('
[05](01, 15)-(01, 18): NAME(NAME) 'len'
[05](01, 18)-(01, 19): LPAR(OP) '('
[05](01, 19)-(01, 26): NAME(NAME) 'alfabet'
[05](01, 26)-(01, 27): RPAR(OP) ')'
[05](01, 27)-(01, 28): RPAR(OP) ')'
[05](01, 28)-(01, 29): COLON(OP) ':'
[05](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 01): INDENT(INDENT) '\t'
[06](01, 01)-(01, 04): NAME(NAME) 'for'
[06](01, 05)-(01, 06): NAME(NAME) 'j'
[06](01, 07)-(01, 09): NAME(NAME) 'in'
[06](01, 10)-(01, 15): NAME(NAME) 'range'
[06](01, 15)-(01, 16): LPAR(OP) '('
[06](01, 16)-(01, 17): NUMBER(NUMBER) '0'
[06](01, 17)-(01, 18): COMMA(OP) ','
[06](01, 19)-(01, 22): NAME(NAME) 'len'
[06](01, 22)-(01, 23): LPAR(OP) '('
[06](01, 23)-(01, 26): NAME(NAME) 'zin'
[06](01, 26)-(01, 27): RPAR(OP) ')'
[06](01, 27)-(01, 28): RPAR(OP) ')'
[06](01, 28)-(01, 29): COLON(OP) ':'
[06](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 02): INDENT(INDENT) '\t\t'
[07](01, 02)-(01, 04): NAME(NAME) 'if'
[07](01, 05)-(01, 08): NAME(NAME) 'zin'
[07](01, 08)-(01, 09): LSQB(OP) '['
[07](01, 09)-(01, 10): NAME(NAME) 'j'
[07](01, 10)-(01, 11): RSQB(OP) ']'
[07](01, 12)-(01, 14): EQEQUAL(OP) '=='
[07](01, 15)-(01, 22): NAME(NAME) 'alfabet'
[07](01, 22)-(01, 23): LSQB(OP) '['
[07](01, 23)-(01, 24): NAME(NAME) 'i'
[07](01, 24)-(01, 25): RSQB(OP) ']'
[07](01, 25)-(01, 26): COLON(OP) ':'
[07](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 03): INDENT(INDENT) '\t\t\t'
[08](01, 03)-(01, 12): NAME(NAME) 'aantalzin'
[08](01, 13)-(01, 15): PLUSEQUAL(OP) '+='
[08](01, 16)-(01, 17): NUMBER(NUMBER) '1'
[08](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 43): COMMENT(COMMENT) '#\tprint(alfabet[i] + ": " + str(aantalzin))'
[09](01, 43)-(01, 44): NL(NL) '\n'
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 01): INDENT(INDENT) '\t'
[10](01, 01)-(01, 10): NAME(NAME) 'aantalzin'
[10](01, 11)-(01, 12): EQUAL(OP) '='
[10](01, 13)-(01, 14): NUMBER(NUMBER) '0'
[10](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 01): NL(NL) '\n'
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 02): INDENT(INDENT) '\t\t'
[12](01, 02)-(01, 04): NAME(NAME) 'if'
[12](01, 05)-(01, 12): NAME(NAME) 'anagram'
[12](01, 12)-(01, 13): LSQB(OP) '['
[12](01, 13)-(01, 14): NAME(NAME) 'j'
[12](01, 14)-(01, 15): RSQB(OP) ']'
[12](01, 16)-(01, 18): EQEQUAL(OP) '=='
[12](01, 19)-(01, 26): NAME(NAME) 'alfabet'
[12](01, 26)-(01, 27): LSQB(OP) '['
[12](01, 27)-(01, 28): NAME(NAME) 'i'
[12](01, 28)-(01, 29): RSQB(OP) ']'
[12](01, 29)-(01, 30): COLON(OP) ':'
[12](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 03): INDENT(INDENT) '\t\t\t'
[13](01, 03)-(01, 16): NAME(NAME) 'aantalanagram'
[13](01, 17)-(01, 19): PLUSEQUAL(OP) '+='
[13](01, 20)-(01, 21): NUMBER(NUMBER) '1'
[13](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 47): COMMENT(COMMENT) '#\tprint(alfabet[i] + ": " + str(aantalanagram))'
[14](01, 47)-(01, 48): NL(NL) '\n'
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 01): INDENT(INDENT) '\t'
[15](01, 01)-(01, 14): NAME(NAME) 'aantalanagram'
[15](01, 15)-(01, 16): EQUAL(OP) '='
[15](01, 17)-(01, 18): NUMBER(NUMBER) '0'
[15](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 01): NL(NL) '\n'
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 02): INDENT(INDENT) '\t\t'
[17](01, 02)-(01, 04): NAME(NAME) 'if'
[17](01, 05)-(01, 18): NAME(NAME) 'aantalanagram'
[17](01, 19)-(01, 21): NOTEQUAL(OP) '!='
[17](01, 22)-(01, 31): NAME(NAME) 'aantalzin'
[17](01, 31)-(01, 32): COLON(OP) ':'
[17](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 03): INDENT(INDENT) '\t\t\t'
[18](01, 03)-(01, 08): NAME(NAME) 'print'
[18](01, 08)-(01, 09): LPAR(OP) '('
[18](01, 09)-(01, 12): NAME(NAME) 'zin'
[18](01, 13)-(01, 14): PLUS(OP) '+'
[18](01, 15)-(01, 20): STRING(STRING) '"and"'
[18](01, 21)-(01, 22): PLUS(OP) '+'
[18](01, 23)-(01, 30): NAME(NAME) 'anagram'
[18](01, 31)-(01, 32): PLUS(OP) '+'
[18](01, 33)-(01, 47): STRING(STRING) '"are anagrams"'
[18](01, 47)-(01, 48): RPAR(OP) ')'
[18](01, 48)-(01, 49): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 02): INDENT(INDENT) '\t\t'
[19](01, 02)-(01, 06): NAME(NAME) 'else'
[19](01, 06)-(01, 07): COLON(OP) ':'
[19](01, 07)-(01, 08): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): DEDENT(DEDENT)
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 03): INDENT(INDENT) '\t\t\t'
[20](01, 03)-(01, 08): NAME(NAME) 'print'
[20](01, 08)-(01, 09): LPAR(OP) '('
[20](01, 09)-(01, 12): NAME(NAME) 'zin'
[20](01, 13)-(01, 14): PLUS(OP) '+'
[20](01, 15)-(01, 20): STRING(STRING) '"and"'
[20](01, 21)-(01, 22): PLUS(OP) '+'
[20](01, 23)-(01, 30): NAME(NAME) 'anagram'
[20](01, 31)-(01, 32): PLUS(OP) '+'
[20](01, 33)-(01, 51): STRING(STRING) '"are not anagrams"'
[20](01, 51)-(01, 52): RPAR(OP) ')'
[20](01, 52)-(01, 53): NEWLINE(NEWLINE)
[20](02, 00)-(02, 00): DEDENT(DEDENT)
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

