[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 10): NAME(NAME) 'encode'
[00](01, 10)-(01, 11): LPAR(OP) '('
[00](01, 11)-(01, 17): NAME(NAME) 'string'
[00](01, 17)-(01, 18): COMMA(OP) ','
[00](01, 19)-(01, 20): NAME(NAME) 'n'
[00](01, 20)-(01, 21): RPAR(OP) ')'
[00](01, 21)-(01, 22): COLON(OP) ':'
[00](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 18): NAME(NAME) 'encoded_string'
[01](01, 19)-(01, 20): EQUAL(OP) '='
[01](01, 21)-(01, 23): STRING(STRING) '""'
[01](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 07): NAME(NAME) 'for'
[02](01, 08)-(01, 12): NAME(NAME) 'char'
[02](01, 13)-(01, 15): NAME(NAME) 'in'
[02](01, 16)-(01, 22): NAME(NAME) 'string'
[02](01, 22)-(01, 23): COLON(OP) ':'
[02](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 08): INDENT(INDENT) '        '
[03](01, 08)-(01, 15): NAME(NAME) 'new_ord'
[03](01, 16)-(01, 17): EQUAL(OP) '='
[03](01, 18)-(01, 21): NAME(NAME) 'ord'
[03](01, 21)-(01, 22): LPAR(OP) '('
[03](01, 22)-(01, 26): NAME(NAME) 'char'
[03](01, 26)-(01, 27): RPAR(OP) ')'
[03](01, 28)-(01, 29): PLUS(OP) '+'
[03](01, 30)-(01, 31): NAME(NAME) 'n'
[03](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 08): INDENT(INDENT) '        '
[04](01, 08)-(01, 10): NAME(NAME) 'if'
[04](01, 11)-(01, 18): NAME(NAME) 'new_ord'
[04](01, 19)-(01, 20): GREATER(OP) '>'
[04](01, 21)-(01, 24): NUMBER(NUMBER) '122'
[04](01, 24)-(01, 25): COLON(OP) ':'
[04](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 12): INDENT(INDENT) '            '
[05](01, 12)-(01, 19): NAME(NAME) 'new_ord'
[05](01, 20)-(01, 22): MINEQUAL(OP) '-='
[05](01, 23)-(01, 25): NUMBER(NUMBER) '25'
[05](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 08): INDENT(INDENT) '        '
[06](01, 08)-(01, 22): NAME(NAME) 'encoded_string'
[06](01, 23)-(01, 25): PLUSEQUAL(OP) '+='
[06](01, 26)-(01, 29): NAME(NAME) 'chr'
[06](01, 29)-(01, 30): LPAR(OP) '('
[06](01, 30)-(01, 37): NAME(NAME) 'new_ord'
[06](01, 37)-(01, 38): RPAR(OP) ')'
[06](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 01): NL(NL) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 03): NAME(NAME) 'def'
[08](01, 04)-(01, 10): NAME(NAME) 'decode'
[08](01, 10)-(01, 11): LPAR(OP) '('
[08](01, 11)-(01, 17): NAME(NAME) 'string'
[08](01, 17)-(01, 18): COMMA(OP) ','
[08](01, 19)-(01, 20): NAME(NAME) 'n'
[08](01, 20)-(01, 21): RPAR(OP) ')'
[08](01, 21)-(01, 22): COLON(OP) ':'
[08](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 18): NAME(NAME) 'decoded_string'
[09](01, 19)-(01, 20): EQUAL(OP) '='
[09](01, 21)-(01, 23): STRING(STRING) '""'
[09](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 04): INDENT(INDENT) '    '
[10](01, 04)-(01, 07): NAME(NAME) 'for'
[10](01, 08)-(01, 12): NAME(NAME) 'char'
[10](01, 13)-(01, 15): NAME(NAME) 'in'
[10](01, 16)-(01, 22): NAME(NAME) 'string'
[10](01, 22)-(01, 23): COLON(OP) ':'
[10](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 08): INDENT(INDENT) '        '
[11](01, 08)-(01, 15): NAME(NAME) 'new_ord'
[11](01, 16)-(01, 17): EQUAL(OP) '='
[11](01, 18)-(01, 21): NAME(NAME) 'ord'
[11](01, 21)-(01, 22): LPAR(OP) '('
[11](01, 22)-(01, 26): NAME(NAME) 'char'
[11](01, 26)-(01, 27): RPAR(OP) ')'
[11](01, 28)-(01, 29): MINUS(OP) '-'
[11](01, 30)-(01, 31): NAME(NAME) 'n'
[11](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 08): INDENT(INDENT) '        '
[12](01, 08)-(01, 10): NAME(NAME) 'if'
[12](01, 11)-(01, 18): NAME(NAME) 'new_ord'
[12](01, 19)-(01, 20): LESS(OP) '<'
[12](01, 21)-(01, 23): NUMBER(NUMBER) '97'
[12](01, 23)-(01, 24): COLON(OP) ':'
[12](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 12): INDENT(INDENT) '            '
[13](01, 12)-(01, 19): NAME(NAME) 'new_ord'
[13](01, 20)-(01, 22): PLUSEQUAL(OP) '+='
[13](01, 23)-(01, 25): NUMBER(NUMBER) '25'
[13](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 08): INDENT(INDENT) '        '
[14](01, 08)-(01, 22): NAME(NAME) 'decoded_string'
[14](01, 23)-(01, 25): PLUSEQUAL(OP) '+='
[14](01, 26)-(01, 29): NAME(NAME) 'chr'
[14](01, 29)-(01, 30): LPAR(OP) '('
[14](01, 30)-(01, 37): NAME(NAME) 'new_ord'
[14](01, 37)-(01, 38): RPAR(OP) ')'
[14](01, 38)-(01, 39): NEWLINE(NEWLINE)
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

