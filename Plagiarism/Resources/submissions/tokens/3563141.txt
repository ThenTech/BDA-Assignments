[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 07): NAME(NAME) 'string1'
[00](01, 08)-(01, 09): EQUAL(OP) '='
[00](01, 10)-(01, 15): NAME(NAME) 'input'
[00](01, 15)-(01, 16): LPAR(OP) '('
[00](01, 16)-(01, 45): STRING(STRING) '"give a word or a sentence: "'
[00](01, 45)-(01, 46): RPAR(OP) ')'
[00](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 07): NAME(NAME) 'string2'
[01](01, 08)-(01, 09): EQUAL(OP) '='
[01](01, 10)-(01, 15): NAME(NAME) 'input'
[01](01, 15)-(01, 16): LPAR(OP) '('
[01](01, 16)-(01, 45): STRING(STRING) '"give a word or a sentence: "'
[01](01, 45)-(01, 46): RPAR(OP) ')'
[01](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 01): NL(NL) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 05): NAME(NAME) 'test1'
[03](01, 06)-(01, 07): EQUAL(OP) '='
[03](01, 08)-(01, 10): STRING(STRING) '""'
[03](01, 10)-(01, 11): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 06): NAME(NAME) 'teller'
[04](01, 07)-(01, 08): EQUAL(OP) '='
[04](01, 09)-(01, 10): NUMBER(NUMBER) '0'
[04](01, 10)-(01, 11): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 03): NAME(NAME) 'for'
[05](01, 04)-(01, 05): NAME(NAME) 'i'
[05](01, 06)-(01, 08): NAME(NAME) 'in'
[05](01, 09)-(01, 16): NAME(NAME) 'string1'
[05](01, 16)-(01, 17): COLON(OP) ':'
[05](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 04): INDENT(INDENT) '    '
[06](01, 04)-(01, 06): NAME(NAME) 'if'
[06](01, 07)-(01, 08): NAME(NAME) 'i'
[06](01, 09)-(01, 11): EQEQUAL(OP) '=='
[06](01, 12)-(01, 15): STRING(STRING) '" "'
[06](01, 15)-(01, 16): COLON(OP) ':'
[06](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 08): INDENT(INDENT) '        '
[07](01, 08)-(01, 13): NAME(NAME) 'test1'
[07](01, 14)-(01, 16): PLUSEQUAL(OP) '+='
[07](01, 17)-(01, 19): STRING(STRING) '""'
[07](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 08): INDENT(INDENT) '        '
[08](01, 08)-(01, 14): NAME(NAME) 'teller'
[08](01, 15)-(01, 17): PLUSEQUAL(OP) '+='
[08](01, 18)-(01, 19): NUMBER(NUMBER) '1'
[08](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 08): NAME(NAME) 'else'
[09](01, 08)-(01, 09): COLON(OP) ':'
[09](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 08): INDENT(INDENT) '        '
[10](01, 08)-(01, 13): NAME(NAME) 'test1'
[10](01, 14)-(01, 16): PLUSEQUAL(OP) '+='
[10](01, 17)-(01, 18): NAME(NAME) 'i'
[10](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 01): NL(NL) '\n'
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 05): NAME(NAME) 'test2'
[12](01, 06)-(01, 07): EQUAL(OP) '='
[12](01, 07)-(01, 09): STRING(STRING) '""'
[12](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 03): NAME(NAME) 'for'
[13](01, 04)-(01, 05): NAME(NAME) 'i'
[13](01, 06)-(01, 08): NAME(NAME) 'in'
[13](01, 09)-(01, 16): NAME(NAME) 'string2'
[13](01, 16)-(01, 17): COLON(OP) ':'
[13](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 04): INDENT(INDENT) '    '
[14](01, 04)-(01, 06): NAME(NAME) 'if'
[14](01, 07)-(01, 08): NAME(NAME) 'i'
[14](01, 09)-(01, 11): EQEQUAL(OP) '=='
[14](01, 12)-(01, 15): STRING(STRING) '" "'
[14](01, 15)-(01, 16): COLON(OP) ':'
[14](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 08): INDENT(INDENT) '        '
[15](01, 08)-(01, 13): NAME(NAME) 'test2'
[15](01, 14)-(01, 16): PLUSEQUAL(OP) '+='
[15](01, 17)-(01, 19): STRING(STRING) '""'
[15](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 04): INDENT(INDENT) '    '
[16](01, 04)-(01, 08): NAME(NAME) 'else'
[16](01, 08)-(01, 09): COLON(OP) ':'
[16](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 08): INDENT(INDENT) '        '
[17](01, 08)-(01, 13): NAME(NAME) 'test2'
[17](01, 14)-(01, 16): PLUSEQUAL(OP) '+='
[17](01, 17)-(01, 18): NAME(NAME) 'i'
[17](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 02): NAME(NAME) 'if'
[18](01, 03)-(01, 06): NAME(NAME) 'len'
[18](01, 06)-(01, 07): LPAR(OP) '('
[18](01, 07)-(01, 12): NAME(NAME) 'test1'
[18](01, 12)-(01, 13): RPAR(OP) ')'
[18](01, 14)-(01, 16): NOTEQUAL(OP) '!='
[18](01, 17)-(01, 20): NAME(NAME) 'len'
[18](01, 20)-(01, 21): LPAR(OP) '('
[18](01, 21)-(01, 26): NAME(NAME) 'test2'
[18](01, 26)-(01, 27): RPAR(OP) ')'
[18](01, 27)-(01, 28): COLON(OP) ':'
[18](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 04): INDENT(INDENT) '    '
[19](01, 04)-(01, 09): NAME(NAME) 'print'
[19](01, 09)-(01, 10): LPAR(OP) '('
[19](01, 10)-(01, 17): NAME(NAME) 'string1'
[19](01, 17)-(01, 18): COMMA(OP) ','
[19](01, 19)-(01, 24): STRING(STRING) '"and"'
[19](01, 24)-(01, 25): COMMA(OP) ','
[19](01, 26)-(01, 33): NAME(NAME) 'string2'
[19](01, 33)-(01, 34): COMMA(OP) ','
[19](01, 35)-(01, 53): STRING(STRING) '"are not anagrams"'
[19](01, 53)-(01, 54): RPAR(OP) ')'
[19](01, 54)-(01, 55): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): DEDENT(DEDENT)
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 01): NL(NL) '\n'
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 05): NAME(NAME) 'count'
[21](01, 06)-(01, 07): EQUAL(OP) '='
[21](01, 08)-(01, 09): NUMBER(NUMBER) '0'
[21](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 03): NAME(NAME) 'tel'
[22](01, 04)-(01, 05): EQUAL(OP) '='
[22](01, 06)-(01, 07): NUMBER(NUMBER) '0'
[22](01, 07)-(01, 08): NEWLINE(NEWLINE) '\n'
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[23](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[23](01, 00)-(01, 01): NL(NL) '\n'
[23](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[24](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[24](01, 00)-(01, 03): NAME(NAME) 'for'
[24](01, 04)-(01, 05): NAME(NAME) 'i'
[24](01, 06)-(01, 08): NAME(NAME) 'in'
[24](01, 09)-(01, 14): NAME(NAME) 'range'
[24](01, 14)-(01, 15): LPAR(OP) '('
[24](01, 15)-(01, 18): NAME(NAME) 'len'
[24](01, 18)-(01, 19): LPAR(OP) '('
[24](01, 19)-(01, 24): NAME(NAME) 'test1'
[24](01, 24)-(01, 25): RPAR(OP) ')'
[24](01, 25)-(01, 26): RPAR(OP) ')'
[24](01, 26)-(01, 27): COLON(OP) ':'
[24](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[24](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[25](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[25](01, 00)-(01, 04): INDENT(INDENT) '    '
[25](01, 04)-(01, 07): NAME(NAME) 'for'
[25](01, 08)-(01, 09): NAME(NAME) 'j'
[25](01, 10)-(01, 12): NAME(NAME) 'in'
[25](01, 13)-(01, 18): NAME(NAME) 'range'
[25](01, 18)-(01, 19): LPAR(OP) '('
[25](01, 19)-(01, 22): NAME(NAME) 'len'
[25](01, 22)-(01, 23): LPAR(OP) '('
[25](01, 23)-(01, 28): NAME(NAME) 'test2'
[25](01, 28)-(01, 29): RPAR(OP) ')'
[25](01, 29)-(01, 30): RPAR(OP) ')'
[25](01, 30)-(01, 31): COLON(OP) ':'
[25](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[25](02, 00)-(02, 00): DEDENT(DEDENT)
[25](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[26](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[26](01, 00)-(01, 08): INDENT(INDENT) '        '
[26](01, 08)-(01, 10): NAME(NAME) 'if'
[26](01, 11)-(01, 16): NAME(NAME) 'test1'
[26](01, 16)-(01, 17): LSQB(OP) '['
[26](01, 17)-(01, 18): NAME(NAME) 'i'
[26](01, 18)-(01, 19): RSQB(OP) ']'
[26](01, 20)-(01, 22): EQEQUAL(OP) '=='
[26](01, 23)-(01, 28): NAME(NAME) 'test2'
[26](01, 28)-(01, 29): LSQB(OP) '['
[26](01, 29)-(01, 30): NAME(NAME) 'j'
[26](01, 30)-(01, 31): RSQB(OP) ']'
[26](01, 31)-(01, 32): COLON(OP) ':'
[26](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[26](02, 00)-(02, 00): DEDENT(DEDENT)
[26](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[27](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[27](01, 00)-(01, 12): INDENT(INDENT) '            '
[27](01, 12)-(01, 17): NAME(NAME) 'count'
[27](01, 18)-(01, 20): PLUSEQUAL(OP) '+='
[27](01, 21)-(01, 22): NUMBER(NUMBER) '1'
[27](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[27](02, 00)-(02, 00): DEDENT(DEDENT)
[27](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[28](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[28](01, 00)-(01, 08): INDENT(INDENT) '        '
[28](01, 08)-(01, 10): NAME(NAME) 'if'
[28](01, 11)-(01, 16): NAME(NAME) 'count'
[28](01, 17)-(01, 18): GREATER(OP) '>'
[28](01, 19)-(01, 20): NUMBER(NUMBER) '1'
[28](01, 20)-(01, 21): COLON(OP) ':'
[28](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[28](02, 00)-(02, 00): DEDENT(DEDENT)
[28](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[29](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[29](01, 00)-(01, 12): INDENT(INDENT) '            '
[29](01, 12)-(01, 17): NAME(NAME) 'count'
[29](01, 18)-(01, 19): EQUAL(OP) '='
[29](01, 20)-(01, 21): NUMBER(NUMBER) '1'
[29](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[29](02, 00)-(02, 00): DEDENT(DEDENT)
[29](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[30](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[30](01, 00)-(01, 04): INDENT(INDENT) '    '
[30](01, 04)-(01, 07): NAME(NAME) 'tel'
[30](01, 08)-(01, 10): PLUSEQUAL(OP) '+='
[30](01, 11)-(01, 16): NAME(NAME) 'count'
[30](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[30](02, 00)-(02, 00): DEDENT(DEDENT)
[30](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[31](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[31](01, 00)-(01, 01): NL(NL) '\n'
[31](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[32](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[32](01, 00)-(01, 02): NAME(NAME) 'if'
[32](01, 03)-(01, 04): LPAR(OP) '('
[32](01, 04)-(01, 07): NAME(NAME) 'tel'
[32](01, 08)-(01, 10): EQEQUAL(OP) '=='
[32](01, 11)-(01, 14): NAME(NAME) 'len'
[32](01, 14)-(01, 15): LPAR(OP) '('
[32](01, 15)-(01, 22): NAME(NAME) 'string1'
[32](01, 22)-(01, 23): RPAR(OP) ')'
[32](01, 24)-(01, 25): MINUS(OP) '-'
[32](01, 26)-(01, 32): NAME(NAME) 'teller'
[32](01, 32)-(01, 33): RPAR(OP) ')'
[32](01, 33)-(01, 34): COLON(OP) ':'
[32](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[32](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[33](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[33](01, 00)-(01, 04): INDENT(INDENT) '    '
[33](01, 04)-(01, 09): NAME(NAME) 'print'
[33](01, 09)-(01, 10): LPAR(OP) '('
[33](01, 10)-(01, 17): NAME(NAME) 'string1'
[33](01, 17)-(01, 18): COMMA(OP) ','
[33](01, 19)-(01, 24): STRING(STRING) '"and"'
[33](01, 24)-(01, 25): COMMA(OP) ','
[33](01, 26)-(01, 33): NAME(NAME) 'string2'
[33](01, 33)-(01, 34): COMMA(OP) ','
[33](01, 35)-(01, 49): STRING(STRING) '"are anagrams"'
[33](01, 49)-(01, 50): RPAR(OP) ')'
[33](01, 50)-(01, 51): NEWLINE(NEWLINE) '\n'
[33](02, 00)-(02, 00): DEDENT(DEDENT)
[33](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[34](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[34](01, 00)-(01, 04): NAME(NAME) 'else'
[34](01, 04)-(01, 05): COLON(OP) ':'
[34](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[34](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[35](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[35](01, 00)-(01, 04): INDENT(INDENT) '    '
[35](01, 04)-(01, 09): NAME(NAME) 'print'
[35](01, 09)-(01, 10): LPAR(OP) '('
[35](01, 10)-(01, 17): NAME(NAME) 'string1'
[35](01, 17)-(01, 18): COMMA(OP) ','
[35](01, 19)-(01, 24): STRING(STRING) '"and"'
[35](01, 24)-(01, 25): COMMA(OP) ','
[35](01, 26)-(01, 33): NAME(NAME) 'string2'
[35](01, 33)-(01, 34): COMMA(OP) ','
[35](01, 35)-(01, 53): STRING(STRING) '"are not anagrams"'
[35](01, 53)-(01, 54): RPAR(OP) ')'
[35](01, 54)-(01, 55): NEWLINE(NEWLINE)
[35](02, 00)-(02, 00): DEDENT(DEDENT)
[35](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

