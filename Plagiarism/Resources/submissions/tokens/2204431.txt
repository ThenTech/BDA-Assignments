[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 10): NAME(NAME) 'encode'
[00](01, 10)-(01, 11): LPAR(OP) '('
[00](01, 11)-(01, 12): NAME(NAME) 's'
[00](01, 12)-(01, 13): RPAR(OP) ')'
[00](01, 13)-(01, 14): COLON(OP) ':'
[00](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 10): NAME(NAME) 'result'
[01](01, 11)-(01, 12): EQUAL(OP) '='
[01](01, 13)-(01, 15): STRING(STRING) '""'
[01](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 07): NAME(NAME) 'for'
[02](01, 08)-(01, 09): NAME(NAME) 'i'
[02](01, 10)-(01, 12): NAME(NAME) 'in'
[02](01, 13)-(01, 18): NAME(NAME) 'range'
[02](01, 18)-(01, 19): LPAR(OP) '('
[02](01, 19)-(01, 22): NAME(NAME) 'len'
[02](01, 22)-(01, 23): LPAR(OP) '('
[02](01, 23)-(01, 24): NAME(NAME) 's'
[02](01, 24)-(01, 25): RPAR(OP) ')'
[02](01, 25)-(01, 26): RPAR(OP) ')'
[02](01, 26)-(01, 27): COLON(OP) ':'
[02](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 08): INDENT(INDENT) '        '
[03](01, 08)-(01, 10): NAME(NAME) 'if'
[03](01, 11)-(01, 14): NAME(NAME) 'len'
[03](01, 14)-(01, 15): LPAR(OP) '('
[03](01, 15)-(01, 16): NAME(NAME) 's'
[03](01, 16)-(01, 17): RPAR(OP) ')'
[03](01, 18)-(01, 20): EQEQUAL(OP) '=='
[03](01, 21)-(01, 22): NUMBER(NUMBER) '1'
[03](01, 22)-(01, 23): COLON(OP) ':'
[03](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 12): INDENT(INDENT) '            '
[04](01, 12)-(01, 18): NAME(NAME) 'return'
[04](01, 19)-(01, 22): STRING(STRING) "'0'"
[04](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 08): INDENT(INDENT) '        '
[05](01, 08)-(01, 10): NAME(NAME) 'if'
[05](01, 11)-(01, 12): NAME(NAME) 'i'
[05](01, 13)-(01, 15): EQEQUAL(OP) '=='
[05](01, 16)-(01, 17): NUMBER(NUMBER) '0'
[05](01, 17)-(01, 18): COLON(OP) ':'
[05](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 12): INDENT(INDENT) '            '
[06](01, 12)-(01, 14): NAME(NAME) 'if'
[06](01, 15)-(01, 16): NAME(NAME) 's'
[06](01, 16)-(01, 17): LSQB(OP) '['
[06](01, 17)-(01, 18): NAME(NAME) 'i'
[06](01, 19)-(01, 20): PLUS(OP) '+'
[06](01, 21)-(01, 22): NUMBER(NUMBER) '1'
[06](01, 22)-(01, 23): RSQB(OP) ']'
[06](01, 24)-(01, 26): EQEQUAL(OP) '=='
[06](01, 27)-(01, 30): STRING(STRING) "'X'"
[06](01, 30)-(01, 31): COLON(OP) ':'
[06](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 16): INDENT(INDENT) '                '
[07](01, 16)-(01, 22): NAME(NAME) 'result'
[07](01, 23)-(01, 25): PLUSEQUAL(OP) '+='
[07](01, 26)-(01, 29): STRING(STRING) "'1'"
[07](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 12): INDENT(INDENT) '            '
[08](01, 12)-(01, 16): NAME(NAME) 'else'
[08](01, 16)-(01, 17): COLON(OP) ':'
[08](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 16): INDENT(INDENT) '                '
[09](01, 16)-(01, 22): NAME(NAME) 'result'
[09](01, 23)-(01, 25): PLUSEQUAL(OP) '+='
[09](01, 26)-(01, 29): STRING(STRING) "'0'"
[09](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 08): INDENT(INDENT) '        '
[10](01, 08)-(01, 12): NAME(NAME) 'elif'
[10](01, 13)-(01, 14): NAME(NAME) 'i'
[10](01, 15)-(01, 17): EQEQUAL(OP) '=='
[10](01, 18)-(01, 21): NAME(NAME) 'len'
[10](01, 21)-(01, 22): LPAR(OP) '('
[10](01, 22)-(01, 23): NAME(NAME) 's'
[10](01, 23)-(01, 24): RPAR(OP) ')'
[10](01, 25)-(01, 26): MINUS(OP) '-'
[10](01, 27)-(01, 28): NUMBER(NUMBER) '1'
[10](01, 28)-(01, 29): COLON(OP) ':'
[10](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 12): INDENT(INDENT) '            '
[11](01, 12)-(01, 14): NAME(NAME) 'if'
[11](01, 15)-(01, 16): NAME(NAME) 's'
[11](01, 16)-(01, 17): LSQB(OP) '['
[11](01, 17)-(01, 18): NAME(NAME) 'i'
[11](01, 19)-(01, 20): MINUS(OP) '-'
[11](01, 21)-(01, 22): NUMBER(NUMBER) '1'
[11](01, 22)-(01, 23): RSQB(OP) ']'
[11](01, 24)-(01, 26): EQEQUAL(OP) '=='
[11](01, 27)-(01, 30): STRING(STRING) "'X'"
[11](01, 30)-(01, 31): COLON(OP) ':'
[11](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 16): INDENT(INDENT) '                '
[12](01, 16)-(01, 22): NAME(NAME) 'result'
[12](01, 23)-(01, 25): PLUSEQUAL(OP) '+='
[12](01, 26)-(01, 29): STRING(STRING) "'1'"
[12](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 12): INDENT(INDENT) '            '
[13](01, 12)-(01, 16): NAME(NAME) 'else'
[13](01, 16)-(01, 17): COLON(OP) ':'
[13](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 16): INDENT(INDENT) '                '
[14](01, 16)-(01, 22): NAME(NAME) 'result'
[14](01, 23)-(01, 25): PLUSEQUAL(OP) '+='
[14](01, 26)-(01, 29): STRING(STRING) "'0'"
[14](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 08): INDENT(INDENT) '        '
[15](01, 08)-(01, 12): NAME(NAME) 'else'
[15](01, 12)-(01, 13): COLON(OP) ':'
[15](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 12): INDENT(INDENT) '            '
[16](01, 12)-(01, 16): NAME(NAME) 'temp'
[16](01, 17)-(01, 18): EQUAL(OP) '='
[16](01, 19)-(01, 20): NUMBER(NUMBER) '0'
[16](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 12): INDENT(INDENT) '            '
[17](01, 12)-(01, 14): NAME(NAME) 'if'
[17](01, 15)-(01, 16): NAME(NAME) 's'
[17](01, 16)-(01, 17): LSQB(OP) '['
[17](01, 17)-(01, 18): NAME(NAME) 'i'
[17](01, 19)-(01, 20): PLUS(OP) '+'
[17](01, 21)-(01, 22): NUMBER(NUMBER) '1'
[17](01, 22)-(01, 23): RSQB(OP) ']'
[17](01, 24)-(01, 26): EQEQUAL(OP) '=='
[17](01, 27)-(01, 30): STRING(STRING) "'X'"
[17](01, 30)-(01, 31): COLON(OP) ':'
[17](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 16): INDENT(INDENT) '                '
[18](01, 16)-(01, 20): NAME(NAME) 'temp'
[18](01, 21)-(01, 23): PLUSEQUAL(OP) '+='
[18](01, 24)-(01, 25): NUMBER(NUMBER) '1'
[18](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 12): INDENT(INDENT) '            '
[19](01, 12)-(01, 14): NAME(NAME) 'if'
[19](01, 15)-(01, 16): NAME(NAME) 's'
[19](01, 16)-(01, 17): LSQB(OP) '['
[19](01, 17)-(01, 18): NAME(NAME) 'i'
[19](01, 19)-(01, 20): MINUS(OP) '-'
[19](01, 21)-(01, 22): NUMBER(NUMBER) '1'
[19](01, 22)-(01, 23): RSQB(OP) ']'
[19](01, 24)-(01, 26): EQEQUAL(OP) '=='
[19](01, 27)-(01, 30): STRING(STRING) "'X'"
[19](01, 30)-(01, 31): COLON(OP) ':'
[19](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): DEDENT(DEDENT)
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 16): INDENT(INDENT) '                '
[20](01, 16)-(01, 20): NAME(NAME) 'temp'
[20](01, 21)-(01, 23): PLUSEQUAL(OP) '+='
[20](01, 24)-(01, 25): NUMBER(NUMBER) '1'
[20](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[20](02, 00)-(02, 00): DEDENT(DEDENT)
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 12): INDENT(INDENT) '            '
[21](01, 12)-(01, 18): NAME(NAME) 'result'
[21](01, 19)-(01, 21): PLUSEQUAL(OP) '+='
[21](01, 22)-(01, 25): NAME(NAME) 'str'
[21](01, 25)-(01, 26): LPAR(OP) '('
[21](01, 26)-(01, 30): NAME(NAME) 'temp'
[21](01, 30)-(01, 31): RPAR(OP) ')'
[21](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[21](02, 00)-(02, 00): DEDENT(DEDENT)
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 04): INDENT(INDENT) '    '
[22](01, 04)-(01, 10): NAME(NAME) 'return'
[22](01, 11)-(01, 17): NAME(NAME) 'result'
[22](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[22](02, 00)-(02, 00): DEDENT(DEDENT)
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[23](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[23](01, 00)-(01, 01): NL(NL) '\n'
[23](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[24](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[24](01, 00)-(01, 01): NL(NL) '\n'
[24](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[25](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[25](01, 00)-(01, 03): NAME(NAME) 'def'
[25](01, 04)-(01, 11): NAME(NAME) 'replace'
[25](01, 11)-(01, 12): LPAR(OP) '('
[25](01, 12)-(01, 13): NAME(NAME) 's'
[25](01, 13)-(01, 14): COMMA(OP) ','
[25](01, 15)-(01, 20): NAME(NAME) 'value'
[25](01, 20)-(01, 21): COMMA(OP) ','
[25](01, 22)-(01, 27): NAME(NAME) 'index'
[25](01, 27)-(01, 28): RPAR(OP) ')'
[25](01, 28)-(01, 29): COLON(OP) ':'
[25](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[25](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[26](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[26](01, 00)-(01, 04): INDENT(INDENT) '    '
[26](01, 04)-(01, 06): NAME(NAME) 'if'
[26](01, 07)-(01, 12): NAME(NAME) 'index'
[26](01, 13)-(01, 14): LESS(OP) '<'
[26](01, 15)-(01, 16): LPAR(OP) '('
[26](01, 16)-(01, 19): NAME(NAME) 'len'
[26](01, 19)-(01, 20): LPAR(OP) '('
[26](01, 20)-(01, 21): NAME(NAME) 's'
[26](01, 21)-(01, 22): RPAR(OP) ')'
[26](01, 23)-(01, 24): MINUS(OP) '-'
[26](01, 25)-(01, 26): NUMBER(NUMBER) '1'
[26](01, 26)-(01, 27): RPAR(OP) ')'
[26](01, 27)-(01, 28): COLON(OP) ':'
[26](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[26](02, 00)-(02, 00): DEDENT(DEDENT)
[26](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[27](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[27](01, 00)-(01, 08): INDENT(INDENT) '        '
[27](01, 08)-(01, 14): NAME(NAME) 'return'
[27](01, 15)-(01, 16): NAME(NAME) 's'
[27](01, 16)-(01, 17): LSQB(OP) '['
[27](01, 17)-(01, 18): COLON(OP) ':'
[27](01, 18)-(01, 23): NAME(NAME) 'index'
[27](01, 23)-(01, 24): RSQB(OP) ']'
[27](01, 25)-(01, 26): PLUS(OP) '+'
[27](01, 27)-(01, 32): NAME(NAME) 'value'
[27](01, 33)-(01, 34): PLUS(OP) '+'
[27](01, 35)-(01, 36): NAME(NAME) 's'
[27](01, 36)-(01, 37): LSQB(OP) '['
[27](01, 37)-(01, 42): NAME(NAME) 'index'
[27](01, 43)-(01, 44): PLUS(OP) '+'
[27](01, 45)-(01, 46): NUMBER(NUMBER) '1'
[27](01, 46)-(01, 47): COLON(OP) ':'
[27](01, 47)-(01, 48): RSQB(OP) ']'
[27](01, 48)-(01, 49): NEWLINE(NEWLINE) '\n'
[27](02, 00)-(02, 00): DEDENT(DEDENT)
[27](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[28](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[28](01, 00)-(01, 04): INDENT(INDENT) '    '
[28](01, 04)-(01, 08): NAME(NAME) 'else'
[28](01, 08)-(01, 09): COLON(OP) ':'
[28](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[28](02, 00)-(02, 00): DEDENT(DEDENT)
[28](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[29](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[29](01, 00)-(01, 08): INDENT(INDENT) '        '
[29](01, 08)-(01, 14): NAME(NAME) 'return'
[29](01, 15)-(01, 16): NAME(NAME) 's'
[29](01, 16)-(01, 17): LSQB(OP) '['
[29](01, 17)-(01, 18): COLON(OP) ':'
[29](01, 18)-(01, 23): NAME(NAME) 'index'
[29](01, 23)-(01, 24): RSQB(OP) ']'
[29](01, 25)-(01, 26): PLUS(OP) '+'
[29](01, 27)-(01, 32): NAME(NAME) 'value'
[29](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[29](02, 00)-(02, 00): DEDENT(DEDENT)
[29](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[30](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[30](01, 00)-(01, 01): NL(NL) '\n'
[30](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[31](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[31](01, 00)-(01, 01): NL(NL) '\n'
[31](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[32](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[32](01, 00)-(01, 03): NAME(NAME) 'def'
[32](01, 04)-(01, 08): NAME(NAME) 'next'
[32](01, 08)-(01, 09): LPAR(OP) '('
[32](01, 09)-(01, 10): NAME(NAME) 's'
[32](01, 10)-(01, 11): RPAR(OP) ')'
[32](01, 11)-(01, 12): COLON(OP) ':'
[32](01, 12)-(01, 13): NEWLINE(NEWLINE) '\n'
[32](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[33](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[33](01, 00)-(01, 04): INDENT(INDENT) '    '
[33](01, 04)-(01, 11): NAME(NAME) 'decimal'
[33](01, 12)-(01, 13): EQUAL(OP) '='
[33](01, 14)-(01, 15): NAME(NAME) 's'
[33](01, 16)-(01, 17): PLUS(OP) '+'
[33](01, 18)-(01, 19): NUMBER(NUMBER) '1'
[33](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[33](02, 00)-(02, 00): DEDENT(DEDENT)
[33](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[34](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[34](01, 00)-(01, 01): NL(NL) '\n'
[34](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[35](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[35](01, 00)-(01, 04): INDENT(INDENT) '    '
[35](01, 04)-(01, 10): NAME(NAME) 'binary'
[35](01, 11)-(01, 12): EQUAL(OP) '='
[35](01, 13)-(01, 20): STRING(STRING) "'{0:b}'"
[35](01, 20)-(01, 21): DOT(OP) '.'
[35](01, 21)-(01, 27): NAME(NAME) 'format'
[35](01, 27)-(01, 28): LPAR(OP) '('
[35](01, 28)-(01, 35): NAME(NAME) 'decimal'
[35](01, 35)-(01, 36): RPAR(OP) ')'
[35](01, 36)-(01, 37): NEWLINE(NEWLINE) '\n'
[35](02, 00)-(02, 00): DEDENT(DEDENT)
[35](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[36](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[36](01, 00)-(01, 04): INDENT(INDENT) '    '
[36](01, 04)-(01, 07): NAME(NAME) 'for'
[36](01, 08)-(01, 09): NAME(NAME) 'x'
[36](01, 10)-(01, 12): NAME(NAME) 'in'
[36](01, 13)-(01, 18): NAME(NAME) 'range'
[36](01, 18)-(01, 19): LPAR(OP) '('
[36](01, 19)-(01, 22): NAME(NAME) 'len'
[36](01, 22)-(01, 23): LPAR(OP) '('
[36](01, 23)-(01, 29): NAME(NAME) 'binary'
[36](01, 29)-(01, 30): RPAR(OP) ')'
[36](01, 30)-(01, 31): RPAR(OP) ')'
[36](01, 31)-(01, 32): COLON(OP) ':'
[36](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[36](02, 00)-(02, 00): DEDENT(DEDENT)
[36](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[37](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[37](01, 00)-(01, 08): INDENT(INDENT) '        '
[37](01, 08)-(01, 10): NAME(NAME) 'if'
[37](01, 11)-(01, 17): NAME(NAME) 'binary'
[37](01, 17)-(01, 18): LSQB(OP) '['
[37](01, 18)-(01, 19): NAME(NAME) 'x'
[37](01, 19)-(01, 20): RSQB(OP) ']'
[37](01, 21)-(01, 23): EQEQUAL(OP) '=='
[37](01, 24)-(01, 27): STRING(STRING) "'1'"
[37](01, 27)-(01, 28): COLON(OP) ':'
[37](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[37](02, 00)-(02, 00): DEDENT(DEDENT)
[37](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[38](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[38](01, 00)-(01, 12): INDENT(INDENT) '            '
[38](01, 12)-(01, 18): NAME(NAME) 'binary'
[38](01, 19)-(01, 20): EQUAL(OP) '='
[38](01, 21)-(01, 28): NAME(NAME) 'replace'
[38](01, 28)-(01, 29): LPAR(OP) '('
[38](01, 29)-(01, 35): NAME(NAME) 'binary'
[38](01, 35)-(01, 36): COMMA(OP) ','
[38](01, 37)-(01, 40): STRING(STRING) "'X'"
[38](01, 40)-(01, 41): COMMA(OP) ','
[38](01, 42)-(01, 43): NAME(NAME) 'x'
[38](01, 43)-(01, 44): RPAR(OP) ')'
[38](01, 44)-(01, 45): NEWLINE(NEWLINE) '\n'
[38](02, 00)-(02, 00): DEDENT(DEDENT)
[38](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[39](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[39](01, 00)-(01, 08): INDENT(INDENT) '        '
[39](01, 08)-(01, 12): NAME(NAME) 'else'
[39](01, 12)-(01, 13): COLON(OP) ':'
[39](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[39](02, 00)-(02, 00): DEDENT(DEDENT)
[39](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[40](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[40](01, 00)-(01, 12): INDENT(INDENT) '            '
[40](01, 12)-(01, 18): NAME(NAME) 'binary'
[40](01, 19)-(01, 20): EQUAL(OP) '='
[40](01, 21)-(01, 28): NAME(NAME) 'replace'
[40](01, 28)-(01, 29): LPAR(OP) '('
[40](01, 29)-(01, 35): NAME(NAME) 'binary'
[40](01, 35)-(01, 36): COMMA(OP) ','
[40](01, 37)-(01, 40): STRING(STRING) "' '"
[40](01, 40)-(01, 41): COMMA(OP) ','
[40](01, 42)-(01, 43): NAME(NAME) 'x'
[40](01, 43)-(01, 44): RPAR(OP) ')'
[40](01, 44)-(01, 45): NEWLINE(NEWLINE) '\n'
[40](02, 00)-(02, 00): DEDENT(DEDENT)
[40](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[41](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[41](01, 00)-(01, 04): INDENT(INDENT) '    '
[41](01, 04)-(01, 10): NAME(NAME) 'return'
[41](01, 11)-(01, 17): NAME(NAME) 'binary'
[41](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[41](02, 00)-(02, 00): DEDENT(DEDENT)
[41](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[42](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[42](01, 00)-(01, 01): NL(NL) '\n'
[42](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[43](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[43](01, 00)-(01, 01): NL(NL) '\n'
[43](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[44](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[44](01, 00)-(01, 03): NAME(NAME) 'def'
[44](01, 04)-(01, 10): NAME(NAME) 'decode'
[44](01, 10)-(01, 11): LPAR(OP) '('
[44](01, 11)-(01, 12): NAME(NAME) 's'
[44](01, 12)-(01, 13): RPAR(OP) ')'
[44](01, 13)-(01, 14): COLON(OP) ':'
[44](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[44](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[45](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[45](01, 00)-(01, 04): INDENT(INDENT) '    '
[45](01, 04)-(01, 10): NAME(NAME) 'result'
[45](01, 11)-(01, 12): EQUAL(OP) '='
[45](01, 13)-(01, 16): STRING(STRING) '" "'
[45](01, 17)-(01, 18): STAR(OP) '*'
[45](01, 19)-(01, 22): NAME(NAME) 'len'
[45](01, 22)-(01, 23): LPAR(OP) '('
[45](01, 23)-(01, 24): NAME(NAME) 's'
[45](01, 24)-(01, 25): RPAR(OP) ')'
[45](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[45](02, 00)-(02, 00): DEDENT(DEDENT)
[45](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[46](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[46](01, 00)-(01, 04): INDENT(INDENT) '    '
[46](01, 04)-(01, 10): NAME(NAME) 'dumdum'
[46](01, 11)-(01, 12): EQUAL(OP) '='
[46](01, 13)-(01, 14): NUMBER(NUMBER) '0'
[46](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[46](02, 00)-(02, 00): DEDENT(DEDENT)
[46](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[47](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[47](01, 00)-(01, 04): INDENT(INDENT) '    '
[47](01, 04)-(01, 09): NAME(NAME) 'while'
[47](01, 10)-(01, 16): NAME(NAME) 'dumdum'
[47](01, 17)-(01, 19): LESSEQUAL(OP) '<='
[47](01, 20)-(01, 23): NAME(NAME) 'int'
[47](01, 23)-(01, 24): LPAR(OP) '('
[47](01, 24)-(01, 27): STRING(STRING) "'1'"
[47](01, 27)-(01, 28): STAR(OP) '*'
[47](01, 28)-(01, 31): NAME(NAME) 'len'
[47](01, 31)-(01, 32): LPAR(OP) '('
[47](01, 32)-(01, 33): NAME(NAME) 's'
[47](01, 33)-(01, 34): RPAR(OP) ')'
[47](01, 34)-(01, 35): COMMA(OP) ','
[47](01, 36)-(01, 37): NUMBER(NUMBER) '2'
[47](01, 37)-(01, 38): RPAR(OP) ')'
[47](01, 38)-(01, 39): COLON(OP) ':'
[47](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[47](02, 00)-(02, 00): DEDENT(DEDENT)
[47](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[48](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[48](01, 00)-(01, 08): INDENT(INDENT) '        '
[48](01, 08)-(01, 10): NAME(NAME) 'if'
[48](01, 11)-(01, 12): NAME(NAME) 's'
[48](01, 13)-(01, 15): EQEQUAL(OP) '=='
[48](01, 16)-(01, 22): NAME(NAME) 'encode'
[48](01, 22)-(01, 23): LPAR(OP) '('
[48](01, 23)-(01, 29): NAME(NAME) 'result'
[48](01, 29)-(01, 30): RPAR(OP) ')'
[48](01, 30)-(01, 31): COLON(OP) ':'
[48](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[48](02, 00)-(02, 00): DEDENT(DEDENT)
[48](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[49](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[49](01, 00)-(01, 12): INDENT(INDENT) '            '
[49](01, 12)-(01, 17): NAME(NAME) 'print'
[49](01, 17)-(01, 18): LPAR(OP) '('
[49](01, 18)-(01, 24): NAME(NAME) 'result'
[49](01, 24)-(01, 25): RPAR(OP) ')'
[49](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[49](02, 00)-(02, 00): DEDENT(DEDENT)
[49](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[50](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[50](01, 00)-(01, 08): INDENT(INDENT) '        '
[50](01, 08)-(01, 13): NAME(NAME) 'nexts'
[50](01, 14)-(01, 15): EQUAL(OP) '='
[50](01, 16)-(01, 20): NAME(NAME) 'next'
[50](01, 20)-(01, 21): LPAR(OP) '('
[50](01, 21)-(01, 27): NAME(NAME) 'dumdum'
[50](01, 27)-(01, 28): RPAR(OP) ')'
[50](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[50](02, 00)-(02, 00): DEDENT(DEDENT)
[50](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[51](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[51](01, 00)-(01, 08): INDENT(INDENT) '        '
[51](01, 08)-(01, 14): NAME(NAME) 'result'
[51](01, 15)-(01, 16): EQUAL(OP) '='
[51](01, 17)-(01, 20): STRING(STRING) "' '"
[51](01, 20)-(01, 21): STAR(OP) '*'
[51](01, 21)-(01, 22): LPAR(OP) '('
[51](01, 22)-(01, 25): NAME(NAME) 'len'
[51](01, 25)-(01, 26): LPAR(OP) '('
[51](01, 26)-(01, 27): NAME(NAME) 's'
[51](01, 27)-(01, 28): RPAR(OP) ')'
[51](01, 28)-(01, 29): MINUS(OP) '-'
[51](01, 29)-(01, 32): NAME(NAME) 'len'
[51](01, 32)-(01, 33): LPAR(OP) '('
[51](01, 33)-(01, 38): NAME(NAME) 'nexts'
[51](01, 38)-(01, 39): RPAR(OP) ')'
[51](01, 39)-(01, 40): RPAR(OP) ')'
[51](01, 41)-(01, 42): PLUS(OP) '+'
[51](01, 43)-(01, 48): NAME(NAME) 'nexts'
[51](01, 48)-(01, 49): NEWLINE(NEWLINE) '\n'
[51](02, 00)-(02, 00): DEDENT(DEDENT)
[51](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[52](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[52](01, 00)-(01, 08): INDENT(INDENT) '        '
[52](01, 08)-(01, 14): NAME(NAME) 'dumdum'
[52](01, 14)-(01, 16): PLUSEQUAL(OP) '+='
[52](01, 16)-(01, 17): NUMBER(NUMBER) '1'
[52](01, 17)-(01, 18): NEWLINE(NEWLINE)
[52](02, 00)-(02, 00): DEDENT(DEDENT)
[52](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

