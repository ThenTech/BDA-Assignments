[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 12): NAME(NAME) 'kleinalfabet'
[00](01, 13)-(01, 14): EQUAL(OP) '='
[00](01, 15)-(01, 43): STRING(STRING) '"abcdefghijklmnopqrstuvwxyz"'
[00](01, 43)-(01, 44): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 12): NAME(NAME) 'grootalfabet'
[01](01, 13)-(01, 14): EQUAL(OP) '='
[01](01, 15)-(01, 43): STRING(STRING) '"ABCDEFGHIJKLMNOPQRSTUVWXYZ"'
[01](01, 43)-(01, 44): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 01): NL(NL) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 03): NAME(NAME) 'def'
[03](01, 04)-(01, 24): NAME(NAME) 'convert_to_uppercase'
[03](01, 24)-(01, 25): LPAR(OP) '('
[03](01, 25)-(01, 31): NAME(NAME) 'string'
[03](01, 31)-(01, 32): RPAR(OP) ')'
[03](01, 32)-(01, 33): COLON(OP) ':'
[03](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 09): NAME(NAME) 'woord'
[04](01, 10)-(01, 11): EQUAL(OP) '='
[04](01, 12)-(01, 14): STRING(STRING) "''"
[04](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 07): NAME(NAME) 'for'
[05](01, 08)-(01, 14): NAME(NAME) 'letter'
[05](01, 15)-(01, 17): NAME(NAME) 'in'
[05](01, 18)-(01, 24): NAME(NAME) 'string'
[05](01, 24)-(01, 25): COLON(OP) ':'
[05](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 08): INDENT(INDENT) '        '
[06](01, 08)-(01, 10): NAME(NAME) 'if'
[06](01, 11)-(01, 17): NAME(NAME) 'letter'
[06](01, 18)-(01, 20): NAME(NAME) 'in'
[06](01, 21)-(01, 33): NAME(NAME) 'kleinalfabet'
[06](01, 33)-(01, 34): COLON(OP) ':'
[06](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 12): INDENT(INDENT) '            '
[07](01, 12)-(01, 18): NAME(NAME) 'teller'
[07](01, 19)-(01, 20): EQUAL(OP) '='
[07](01, 21)-(01, 22): MINUS(OP) '-'
[07](01, 22)-(01, 23): NUMBER(NUMBER) '1'
[07](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 12): INDENT(INDENT) '            '
[08](01, 12)-(01, 15): NAME(NAME) 'for'
[08](01, 16)-(01, 17): NAME(NAME) 'x'
[08](01, 18)-(01, 20): NAME(NAME) 'in'
[08](01, 21)-(01, 33): NAME(NAME) 'kleinalfabet'
[08](01, 33)-(01, 34): COLON(OP) ':'
[08](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 16): INDENT(INDENT) '                '
[09](01, 16)-(01, 22): NAME(NAME) 'teller'
[09](01, 23)-(01, 25): PLUSEQUAL(OP) '+='
[09](01, 26)-(01, 27): NUMBER(NUMBER) '1'
[09](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 16): INDENT(INDENT) '                '
[10](01, 16)-(01, 18): NAME(NAME) 'if'
[10](01, 19)-(01, 20): NAME(NAME) 'x'
[10](01, 21)-(01, 23): EQEQUAL(OP) '=='
[10](01, 24)-(01, 30): NAME(NAME) 'letter'
[10](01, 30)-(01, 31): COLON(OP) ':'
[10](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 20): INDENT(INDENT) '                    '
[11](01, 20)-(01, 25): NAME(NAME) 'break'
[11](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 12): INDENT(INDENT) '            '
[12](01, 12)-(01, 17): NAME(NAME) 'woord'
[12](01, 18)-(01, 20): PLUSEQUAL(OP) '+='
[12](01, 21)-(01, 33): NAME(NAME) 'grootalfabet'
[12](01, 33)-(01, 34): LSQB(OP) '['
[12](01, 34)-(01, 40): NAME(NAME) 'teller'
[12](01, 40)-(01, 41): RSQB(OP) ']'
[12](01, 41)-(01, 42): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 08): INDENT(INDENT) '        '
[13](01, 08)-(01, 12): NAME(NAME) 'else'
[13](01, 12)-(01, 13): COLON(OP) ':'
[13](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 12): INDENT(INDENT) '            '
[14](01, 12)-(01, 17): NAME(NAME) 'woord'
[14](01, 18)-(01, 20): PLUSEQUAL(OP) '+='
[14](01, 21)-(01, 27): NAME(NAME) 'letter'
[14](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 12): INDENT(INDENT) '            '
[15](01, 12)-(01, 20): NAME(NAME) 'continue'
[15](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 04): INDENT(INDENT) '    '
[16](01, 04)-(01, 10): NAME(NAME) 'return'
[16](01, 11)-(01, 16): NAME(NAME) 'woord'
[16](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 05): NAME(NAME) 'print'
[17](01, 05)-(01, 06): LPAR(OP) '('
[17](01, 06)-(01, 26): NAME(NAME) 'convert_to_uppercase'
[17](01, 26)-(01, 27): LPAR(OP) '('
[17](01, 27)-(01, 42): STRING(STRING) '"steve is snel"'
[17](01, 42)-(01, 43): RPAR(OP) ')'
[17](01, 43)-(01, 44): RPAR(OP) ')'
[17](01, 44)-(01, 45): NEWLINE(NEWLINE)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

