[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 20): NAME(NAME) 'fibonacci_values'
[00](01, 20)-(01, 21): LPAR(OP) '('
[00](01, 21)-(01, 22): NAME(NAME) 'i'
[00](01, 22)-(01, 23): RPAR(OP) ')'
[00](01, 23)-(01, 24): COLON(OP) ':'
[00](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 13): NAME(NAME) 'fibonacci'
[01](01, 14)-(01, 15): EQUAL(OP) '='
[01](01, 16)-(01, 17): LSQB(OP) '['
[01](01, 17)-(01, 18): NUMBER(NUMBER) '0'
[01](01, 18)-(01, 19): COMMA(OP) ','
[01](01, 20)-(01, 21): NUMBER(NUMBER) '1'
[01](01, 21)-(01, 22): RSQB(OP) ']'
[01](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 07): NAME(NAME) 'for'
[02](01, 08)-(01, 12): NAME(NAME) 'item'
[02](01, 13)-(01, 15): NAME(NAME) 'in'
[02](01, 16)-(01, 21): NAME(NAME) 'range'
[02](01, 21)-(01, 22): LPAR(OP) '('
[02](01, 22)-(01, 25): NAME(NAME) 'len'
[02](01, 25)-(01, 26): LPAR(OP) '('
[02](01, 26)-(01, 35): NAME(NAME) 'fibonacci'
[02](01, 35)-(01, 36): RPAR(OP) ')'
[02](01, 36)-(01, 37): COMMA(OP) ','
[02](01, 38)-(01, 39): NAME(NAME) 'i'
[02](01, 39)-(01, 40): RPAR(OP) ')'
[02](01, 40)-(01, 41): COLON(OP) ':'
[02](01, 41)-(01, 42): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 08): INDENT(INDENT) '        '
[03](01, 08)-(01, 17): NAME(NAME) 'fibonacci'
[03](01, 18)-(01, 20): PLUSEQUAL(OP) '+='
[03](01, 21)-(01, 22): LSQB(OP) '['
[03](01, 22)-(01, 31): NAME(NAME) 'fibonacci'
[03](01, 31)-(01, 32): LSQB(OP) '['
[03](01, 32)-(01, 36): NAME(NAME) 'item'
[03](01, 37)-(01, 38): MINUS(OP) '-'
[03](01, 39)-(01, 40): NUMBER(NUMBER) '2'
[03](01, 40)-(01, 41): RSQB(OP) ']'
[03](01, 42)-(01, 43): PLUS(OP) '+'
[03](01, 44)-(01, 53): NAME(NAME) 'fibonacci'
[03](01, 53)-(01, 54): LSQB(OP) '['
[03](01, 54)-(01, 58): NAME(NAME) 'item'
[03](01, 59)-(01, 60): MINUS(OP) '-'
[03](01, 61)-(01, 62): NUMBER(NUMBER) '1'
[03](01, 62)-(01, 63): RSQB(OP) ']'
[03](01, 63)-(01, 64): RSQB(OP) ']'
[03](01, 64)-(01, 65): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 08)-(01, 09): NL(NL) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 10): NAME(NAME) 'return'
[05](01, 11)-(01, 20): NAME(NAME) 'fibonacci'
[05](01, 20)-(01, 21): NEWLINE(NEWLINE)
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

