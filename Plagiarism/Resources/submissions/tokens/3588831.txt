[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 26): NAME(NAME) 'is_palindrome_sentence'
[00](01, 26)-(01, 27): LPAR(OP) '('
[00](01, 27)-(01, 35): NAME(NAME) 'sentence'
[00](01, 35)-(01, 36): RPAR(OP) ')'
[00](01, 36)-(01, 37): COLON(OP) ':'
[00](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 06): NAME(NAME) 'if'
[01](01, 07)-(01, 10): NAME(NAME) 'len'
[01](01, 10)-(01, 11): LPAR(OP) '('
[01](01, 11)-(01, 19): NAME(NAME) 'sentence'
[01](01, 19)-(01, 20): RPAR(OP) ')'
[01](01, 21)-(01, 23): LESSEQUAL(OP) '<='
[01](01, 24)-(01, 25): NUMBER(NUMBER) '1'
[01](01, 25)-(01, 26): COLON(OP) ':'
[01](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 08): INDENT(INDENT) '        '
[02](01, 08)-(01, 14): NAME(NAME) 'return'
[02](01, 15)-(01, 19): NAME(NAME) 'True'
[02](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 04)-(01, 05): NL(NL) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 08): NAME(NAME) 'else'
[04](01, 08)-(01, 09): COLON(OP) ':'
[04](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 08): INDENT(INDENT) '        '
[05](01, 08)-(01, 14): NAME(NAME) 'return'
[05](01, 15)-(01, 23): NAME(NAME) 'sentence'
[05](01, 23)-(01, 24): LSQB(OP) '['
[05](01, 24)-(01, 25): NUMBER(NUMBER) '1'
[05](01, 25)-(01, 26): RSQB(OP) ']'
[05](01, 27)-(01, 28): EQUAL(OP) '='
[05](01, 29)-(01, 37): NAME(NAME) 'sentence'
[05](01, 37)-(01, 38): LSQB(OP) '['
[05](01, 38)-(01, 39): MINUS(OP) '-'
[05](01, 39)-(01, 40): NUMBER(NUMBER) '1'
[05](01, 40)-(01, 41): RSQB(OP) ']'
[05](01, 42)-(01, 45): NAME(NAME) 'and'
[05](01, 46)-(01, 68): NAME(NAME) 'is_palindrome_sentence'
[05](01, 68)-(01, 69): LPAR(OP) '('
[05](01, 69)-(01, 77): NAME(NAME) 'sentence'
[05](01, 77)-(01, 78): LSQB(OP) '['
[05](01, 78)-(01, 79): NUMBER(NUMBER) '1'
[05](01, 79)-(01, 80): COLON(OP) ':'
[05](01, 80)-(01, 81): MINUS(OP) '-'
[05](01, 81)-(01, 82): NUMBER(NUMBER) '1'
[05](01, 82)-(01, 83): RSQB(OP) ']'
[05](01, 83)-(01, 84): RPAR(OP) ')'
[05](01, 84)-(01, 85): COLON(OP) ':'
[05](01, 85)-(01, 86): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 00): ENDMARKER(ENDMARKER)

