[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 22): COMMENT(COMMENT) '# write your code here'
[00](01, 22)-(01, 23): NL(NL) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 25): COMMENT(COMMENT) '# stap 1: recursie vinden'
[01](01, 25)-(01, 26): NL(NL) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 04)-(01, 119): COMMENT(COMMENT) '# lijst met elementen => subsets maken: we beginnen met 1 en zetten alle mogenlijke substets met de andere erachter'
[02](01, 119)-(01, 120): NL(NL) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 03): NAME(NAME) 'def'
[03](01, 04)-(01, 10): NAME(NAME) 'subset'
[03](01, 10)-(01, 11): LPAR(OP) '('
[03](01, 11)-(01, 12): NAME(NAME) 'l'
[03](01, 12)-(01, 13): RPAR(OP) ')'
[03](01, 13)-(01, 14): COLON(OP) ':'
[03](01, 15)-(01, 51): COMMENT(COMMENT) '# niet krachtig genoeg voor recursie'
[03](01, 51)-(01, 52): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 17): NAME(NAME) 'subset_helper'
[04](01, 17)-(01, 18): LPAR(OP) '('
[04](01, 18)-(01, 19): NAME(NAME) 'l'
[04](01, 19)-(01, 20): COMMA(OP) ','
[04](01, 20)-(01, 21): LSQB(OP) '['
[04](01, 21)-(01, 22): RSQB(OP) ']'
[04](01, 22)-(01, 23): RPAR(OP) ')'
[04](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 03): NAME(NAME) 'def'
[05](01, 04)-(01, 17): NAME(NAME) 'subset_helper'
[05](01, 17)-(01, 18): LPAR(OP) '('
[05](01, 18)-(01, 19): NAME(NAME) 'l'
[05](01, 19)-(01, 20): COMMA(OP) ','
[05](01, 20)-(01, 21): NAME(NAME) 'r'
[05](01, 21)-(01, 22): RPAR(OP) ')'
[05](01, 22)-(01, 23): COLON(OP) ':'
[05](01, 24)-(01, 93): COMMENT(COMMENT) '# de recursieve functie, met l de lijst en r het al gekende resutlaat'
[05](01, 93)-(01, 94): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 04)-(01, 58): COMMENT(COMMENT) '#basisgeval = als lijst leeg is => print het resultaat'
[06](01, 58)-(01, 59): NL(NL) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 04): INDENT(INDENT) '    '
[07](01, 04)-(01, 06): NAME(NAME) 'if'
[07](01, 07)-(01, 10): NAME(NAME) 'len'
[07](01, 10)-(01, 11): LPAR(OP) '('
[07](01, 11)-(01, 12): NAME(NAME) 'l'
[07](01, 12)-(01, 13): RPAR(OP) ')'
[07](01, 13)-(01, 15): EQEQUAL(OP) '=='
[07](01, 15)-(01, 16): NUMBER(NUMBER) '0'
[07](01, 16)-(01, 17): COLON(OP) ':'
[07](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 08): INDENT(INDENT) '        '
[08](01, 08)-(01, 13): NAME(NAME) 'print'
[08](01, 13)-(01, 14): LPAR(OP) '('
[08](01, 14)-(01, 15): NAME(NAME) 'r'
[08](01, 15)-(01, 16): RPAR(OP) ')'
[08](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 08): NAME(NAME) 'else'
[09](01, 08)-(01, 09): COLON(OP) ':'
[09](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 08)-(01, 120): COMMENT(COMMENT) '# telkens kiezen of het 1ste element erin zit of niet(beide doen, en beide met recursie voor het acthervolgende)'
[10](01, 120)-(01, 121): NL(NL) '\n'
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 08)-(01, 12): COMMENT(COMMENT) '# =>'
[11](01, 12)-(01, 13): NL(NL) '\n'
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 08): INDENT(INDENT) '        '
[12](01, 08)-(01, 14): NAME(NAME) 'eerste'
[12](01, 15)-(01, 16): EQUAL(OP) '='
[12](01, 17)-(01, 18): NAME(NAME) 'l'
[12](01, 18)-(01, 19): LSQB(OP) '['
[12](01, 19)-(01, 20): NUMBER(NUMBER) '0'
[12](01, 20)-(01, 21): RSQB(OP) ']'
[12](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 08): INDENT(INDENT) '        '
[13](01, 08)-(01, 12): NAME(NAME) 'rest'
[13](01, 13)-(01, 14): EQUAL(OP) '='
[13](01, 15)-(01, 16): NAME(NAME) 'l'
[13](01, 16)-(01, 17): LSQB(OP) '['
[13](01, 17)-(01, 18): NUMBER(NUMBER) '1'
[13](01, 18)-(01, 19): COLON(OP) ':'
[13](01, 19)-(01, 20): RSQB(OP) ']'
[13](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 08)-(01, 23): COMMENT(COMMENT) '#niet toevoegen'
[14](01, 23)-(01, 24): NL(NL) '\n'
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 08): INDENT(INDENT) '        '
[15](01, 08)-(01, 21): NAME(NAME) 'subset_helper'
[15](01, 21)-(01, 22): LPAR(OP) '('
[15](01, 22)-(01, 26): NAME(NAME) 'rest'
[15](01, 26)-(01, 27): COMMA(OP) ','
[15](01, 27)-(01, 28): NAME(NAME) 'r'
[15](01, 28)-(01, 29): RPAR(OP) ')'
[15](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 08)-(01, 12): COMMENT(COMMENT) '#wel'
[16](01, 12)-(01, 13): NL(NL) '\n'
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 08): INDENT(INDENT) '        '
[17](01, 08)-(01, 21): NAME(NAME) 'subset_helper'
[17](01, 21)-(01, 22): LPAR(OP) '('
[17](01, 22)-(01, 26): NAME(NAME) 'rest'
[17](01, 26)-(01, 27): COMMA(OP) ','
[17](01, 27)-(01, 28): NAME(NAME) 'r'
[17](01, 28)-(01, 29): PLUS(OP) '+'
[17](01, 29)-(01, 30): LSQB(OP) '['
[17](01, 30)-(01, 36): NAME(NAME) 'eerste'
[17](01, 36)-(01, 37): RSQB(OP) ']'
[17](01, 37)-(01, 38): RPAR(OP) ')'
[17](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 01): NL(NL) '\n'
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 05): NAME(NAME) 'lijst'
[19](01, 06)-(01, 07): EQUAL(OP) '='
[19](01, 08)-(01, 13): NAME(NAME) 'input'
[19](01, 13)-(01, 14): LPAR(OP) '('
[19](01, 14)-(01, 15): RPAR(OP) ')'
[19](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 05): NAME(NAME) 'lijst'
[20](01, 06)-(01, 07): EQUAL(OP) '='
[20](01, 08)-(01, 13): NAME(NAME) 'lijst'
[20](01, 13)-(01, 14): DOT(OP) '.'
[20](01, 14)-(01, 19): NAME(NAME) 'split'
[20](01, 19)-(01, 20): LPAR(OP) '('
[20](01, 20)-(01, 21): RPAR(OP) ')'
[20](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 06): NAME(NAME) 'subset'
[21](01, 06)-(01, 07): LPAR(OP) '('
[21](01, 07)-(01, 12): NAME(NAME) 'lijst'
[21](01, 12)-(01, 13): RPAR(OP) ')'
[21](01, 13)-(01, 14): NEWLINE(NEWLINE)
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

