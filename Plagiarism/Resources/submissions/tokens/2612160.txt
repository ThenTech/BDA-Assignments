[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 10): NAME(NAME) 'encode'
[00](01, 10)-(01, 11): LPAR(OP) '('
[00](01, 11)-(01, 20): NAME(NAME) 'minefield'
[00](01, 20)-(01, 21): RPAR(OP) ')'
[00](01, 21)-(01, 22): COLON(OP) ':'
[00](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 04)-(01, 48): COMMENT(COMMENT) '#indexen van bommen en lege vakjes groeperen'
[01](01, 48)-(01, 49): NL(NL) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 10): NAME(NAME) 'bommen'
[02](01, 11)-(01, 12): EQUAL(OP) '='
[02](01, 13)-(01, 17): NAME(NAME) 'list'
[02](01, 17)-(01, 18): LPAR(OP) '('
[02](01, 18)-(01, 19): RPAR(OP) ')'
[02](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 08): NAME(NAME) 'leeg'
[03](01, 09)-(01, 10): EQUAL(OP) '='
[03](01, 11)-(01, 15): NAME(NAME) 'list'
[03](01, 15)-(01, 16): LPAR(OP) '('
[03](01, 16)-(01, 17): RPAR(OP) ')'
[03](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 09): NAME(NAME) 'index'
[04](01, 10)-(01, 11): EQUAL(OP) '='
[04](01, 12)-(01, 13): NUMBER(NUMBER) '0'
[04](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 07): NAME(NAME) 'for'
[05](01, 08)-(01, 09): NAME(NAME) 'i'
[05](01, 10)-(01, 12): NAME(NAME) 'in'
[05](01, 13)-(01, 22): NAME(NAME) 'minefield'
[05](01, 22)-(01, 23): COLON(OP) ':'
[05](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 08): INDENT(INDENT) '        '
[06](01, 08)-(01, 10): NAME(NAME) 'if'
[06](01, 11)-(01, 12): NAME(NAME) 'i'
[06](01, 13)-(01, 15): EQEQUAL(OP) '=='
[06](01, 16)-(01, 19): STRING(STRING) '"X"'
[06](01, 19)-(01, 20): COLON(OP) ':'
[06](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 12): INDENT(INDENT) '            '
[07](01, 12)-(01, 18): NAME(NAME) 'bommen'
[07](01, 18)-(01, 19): DOT(OP) '.'
[07](01, 19)-(01, 25): NAME(NAME) 'append'
[07](01, 25)-(01, 26): LPAR(OP) '('
[07](01, 26)-(01, 31): NAME(NAME) 'index'
[07](01, 31)-(01, 32): RPAR(OP) ')'
[07](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 12): INDENT(INDENT) '            '
[08](01, 12)-(01, 17): NAME(NAME) 'index'
[08](01, 18)-(01, 20): PLUSEQUAL(OP) '+='
[08](01, 21)-(01, 22): NUMBER(NUMBER) '1'
[08](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 08): INDENT(INDENT) '        '
[09](01, 08)-(01, 12): NAME(NAME) 'else'
[09](01, 12)-(01, 13): COLON(OP) ':'
[09](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 12): INDENT(INDENT) '            '
[10](01, 12)-(01, 16): NAME(NAME) 'leeg'
[10](01, 16)-(01, 17): DOT(OP) '.'
[10](01, 17)-(01, 23): NAME(NAME) 'append'
[10](01, 23)-(01, 24): LPAR(OP) '('
[10](01, 24)-(01, 29): NAME(NAME) 'index'
[10](01, 29)-(01, 30): RPAR(OP) ')'
[10](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 12): INDENT(INDENT) '            '
[11](01, 12)-(01, 17): NAME(NAME) 'index'
[11](01, 18)-(01, 20): PLUSEQUAL(OP) '+='
[11](01, 21)-(01, 22): NUMBER(NUMBER) '1'
[11](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 01): NL(NL) '\n'
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 04)-(01, 17): COMMENT(COMMENT) '#string maken'
[13](01, 17)-(01, 18): NL(NL) '\n'
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 04): INDENT(INDENT) '    '
[14](01, 04)-(01, 10): NAME(NAME) 'string'
[14](01, 11)-(01, 12): EQUAL(OP) '='
[14](01, 13)-(01, 15): STRING(STRING) '""'
[14](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 04): INDENT(INDENT) '    '
[15](01, 04)-(01, 07): NAME(NAME) 'for'
[15](01, 08)-(01, 09): NAME(NAME) 'i'
[15](01, 10)-(01, 12): NAME(NAME) 'in'
[15](01, 13)-(01, 18): NAME(NAME) 'range'
[15](01, 18)-(01, 19): LPAR(OP) '('
[15](01, 19)-(01, 22): NAME(NAME) 'len'
[15](01, 22)-(01, 23): LPAR(OP) '('
[15](01, 23)-(01, 32): NAME(NAME) 'minefield'
[15](01, 32)-(01, 33): RPAR(OP) ')'
[15](01, 33)-(01, 34): RPAR(OP) ')'
[15](01, 34)-(01, 35): COLON(OP) ':'
[15](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 08): INDENT(INDENT) '        '
[16](01, 08)-(01, 27): NAME(NAME) 'toe_te_voegen_getal'
[16](01, 28)-(01, 29): EQUAL(OP) '='
[16](01, 30)-(01, 31): NUMBER(NUMBER) '0'
[16](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 08): INDENT(INDENT) '        '
[17](01, 08)-(01, 10): NAME(NAME) 'if'
[17](01, 11)-(01, 12): LPAR(OP) '('
[17](01, 12)-(01, 13): NAME(NAME) 'i'
[17](01, 13)-(01, 14): MINUS(OP) '-'
[17](01, 14)-(01, 15): NUMBER(NUMBER) '1'
[17](01, 15)-(01, 16): RPAR(OP) ')'
[17](01, 17)-(01, 19): NAME(NAME) 'in'
[17](01, 20)-(01, 25): NAME(NAME) 'range'
[17](01, 25)-(01, 26): LPAR(OP) '('
[17](01, 26)-(01, 29): NAME(NAME) 'len'
[17](01, 29)-(01, 30): LPAR(OP) '('
[17](01, 30)-(01, 39): NAME(NAME) 'minefield'
[17](01, 39)-(01, 40): RPAR(OP) ')'
[17](01, 40)-(01, 41): RPAR(OP) ')'
[17](01, 42)-(01, 45): NAME(NAME) 'and'
[17](01, 46)-(01, 47): LPAR(OP) '('
[17](01, 47)-(01, 48): NAME(NAME) 'i'
[17](01, 48)-(01, 49): MINUS(OP) '-'
[17](01, 49)-(01, 50): NUMBER(NUMBER) '1'
[17](01, 50)-(01, 51): RPAR(OP) ')'
[17](01, 52)-(01, 54): NAME(NAME) 'in'
[17](01, 55)-(01, 61): NAME(NAME) 'bommen'
[17](01, 61)-(01, 62): COLON(OP) ':'
[17](01, 62)-(01, 63): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 12): INDENT(INDENT) '            '
[18](01, 12)-(01, 31): NAME(NAME) 'toe_te_voegen_getal'
[18](01, 32)-(01, 34): PLUSEQUAL(OP) '+='
[18](01, 35)-(01, 36): NUMBER(NUMBER) '1'
[18](01, 36)-(01, 37): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 08): INDENT(INDENT) '        '
[19](01, 08)-(01, 10): NAME(NAME) 'if'
[19](01, 11)-(01, 12): LPAR(OP) '('
[19](01, 12)-(01, 13): NAME(NAME) 'i'
[19](01, 13)-(01, 14): PLUS(OP) '+'
[19](01, 14)-(01, 15): NUMBER(NUMBER) '1'
[19](01, 15)-(01, 16): RPAR(OP) ')'
[19](01, 17)-(01, 19): NAME(NAME) 'in'
[19](01, 20)-(01, 25): NAME(NAME) 'range'
[19](01, 25)-(01, 26): LPAR(OP) '('
[19](01, 26)-(01, 29): NAME(NAME) 'len'
[19](01, 29)-(01, 30): LPAR(OP) '('
[19](01, 30)-(01, 39): NAME(NAME) 'minefield'
[19](01, 39)-(01, 40): RPAR(OP) ')'
[19](01, 40)-(01, 41): RPAR(OP) ')'
[19](01, 42)-(01, 45): NAME(NAME) 'and'
[19](01, 46)-(01, 47): LPAR(OP) '('
[19](01, 47)-(01, 48): NAME(NAME) 'i'
[19](01, 48)-(01, 49): PLUS(OP) '+'
[19](01, 49)-(01, 50): NUMBER(NUMBER) '1'
[19](01, 50)-(01, 51): RPAR(OP) ')'
[19](01, 52)-(01, 54): NAME(NAME) 'in'
[19](01, 55)-(01, 61): NAME(NAME) 'bommen'
[19](01, 61)-(01, 62): COLON(OP) ':'
[19](01, 62)-(01, 63): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): DEDENT(DEDENT)
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 12): INDENT(INDENT) '            '
[20](01, 12)-(01, 31): NAME(NAME) 'toe_te_voegen_getal'
[20](01, 32)-(01, 34): PLUSEQUAL(OP) '+='
[20](01, 35)-(01, 36): NUMBER(NUMBER) '1'
[20](01, 36)-(01, 37): NEWLINE(NEWLINE) '\n'
[20](02, 00)-(02, 00): DEDENT(DEDENT)
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 08): INDENT(INDENT) '        '
[21](01, 08)-(01, 14): NAME(NAME) 'string'
[21](01, 15)-(01, 17): PLUSEQUAL(OP) '+='
[21](01, 18)-(01, 21): NAME(NAME) 'str'
[21](01, 21)-(01, 22): LPAR(OP) '('
[21](01, 22)-(01, 41): NAME(NAME) 'toe_te_voegen_getal'
[21](01, 41)-(01, 42): RPAR(OP) ')'
[21](01, 42)-(01, 43): NEWLINE(NEWLINE) '\n'
[21](02, 00)-(02, 00): DEDENT(DEDENT)
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 04): INDENT(INDENT) '    '
[22](01, 04)-(01, 10): NAME(NAME) 'return'
[22](01, 11)-(01, 17): NAME(NAME) 'string'
[22](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[22](02, 00)-(02, 00): DEDENT(DEDENT)
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[23](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[23](01, 00)-(01, 01): NL(NL) '\n'
[23](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[24](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[24](01, 00)-(01, 01): NL(NL) '\n'
[24](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[25](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[25](01, 00)-(01, 03): NAME(NAME) 'def'
[25](01, 04)-(01, 10): NAME(NAME) 'decode'
[25](01, 10)-(01, 11): LPAR(OP) '('
[25](01, 11)-(01, 17): NAME(NAME) 'string'
[25](01, 17)-(01, 18): RPAR(OP) ')'
[25](01, 18)-(01, 19): COLON(OP) ':'
[25](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[25](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[26](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[26](01, 04)-(01, 41): COMMENT(COMMENT) '#lege lijst aanmaken om aan te passen'
[26](01, 41)-(01, 42): NL(NL) '\n'
[26](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[27](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[27](01, 00)-(01, 04): INDENT(INDENT) '    '
[27](01, 04)-(01, 13): NAME(NAME) 'minefield'
[27](01, 14)-(01, 15): EQUAL(OP) '='
[27](01, 16)-(01, 20): NAME(NAME) 'list'
[27](01, 20)-(01, 21): LPAR(OP) '('
[27](01, 21)-(01, 22): RPAR(OP) ')'
[27](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[27](02, 00)-(02, 00): DEDENT(DEDENT)
[27](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[28](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[28](01, 00)-(01, 04): INDENT(INDENT) '    '
[28](01, 04)-(01, 07): NAME(NAME) 'for'
[28](01, 08)-(01, 09): NAME(NAME) 'i'
[28](01, 10)-(01, 12): NAME(NAME) 'in'
[28](01, 13)-(01, 18): NAME(NAME) 'range'
[28](01, 18)-(01, 19): LPAR(OP) '('
[28](01, 19)-(01, 22): NAME(NAME) 'len'
[28](01, 22)-(01, 23): LPAR(OP) '('
[28](01, 23)-(01, 29): NAME(NAME) 'string'
[28](01, 29)-(01, 30): RPAR(OP) ')'
[28](01, 30)-(01, 31): RPAR(OP) ')'
[28](01, 31)-(01, 32): COLON(OP) ':'
[28](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[28](02, 00)-(02, 00): DEDENT(DEDENT)
[28](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[29](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[29](01, 00)-(01, 08): INDENT(INDENT) '        '
[29](01, 08)-(01, 17): NAME(NAME) 'minefield'
[29](01, 17)-(01, 18): DOT(OP) '.'
[29](01, 18)-(01, 24): NAME(NAME) 'append'
[29](01, 24)-(01, 25): LPAR(OP) '('
[29](01, 25)-(01, 28): STRING(STRING) '" "'
[29](01, 28)-(01, 29): RPAR(OP) ')'
[29](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[29](02, 00)-(02, 00): DEDENT(DEDENT)
[29](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[30](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[30](01, 00)-(01, 01): NL(NL) '\n'
[30](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[31](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[31](01, 04)-(01, 44): COMMENT(COMMENT) '#eerste en laatste staan sowieso al vast'
[31](01, 44)-(01, 45): NL(NL) '\n'
[31](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[32](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[32](01, 00)-(01, 04): INDENT(INDENT) '    '
[32](01, 04)-(01, 06): NAME(NAME) 'if'
[32](01, 07)-(01, 13): NAME(NAME) 'string'
[32](01, 13)-(01, 14): LSQB(OP) '['
[32](01, 14)-(01, 15): NUMBER(NUMBER) '0'
[32](01, 15)-(01, 16): RSQB(OP) ']'
[32](01, 17)-(01, 19): EQEQUAL(OP) '=='
[32](01, 20)-(01, 23): STRING(STRING) '"1"'
[32](01, 23)-(01, 24): COLON(OP) ':'
[32](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[32](02, 00)-(02, 00): DEDENT(DEDENT)
[32](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[33](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[33](01, 00)-(01, 08): INDENT(INDENT) '        '
[33](01, 08)-(01, 17): NAME(NAME) 'minefield'
[33](01, 17)-(01, 18): LSQB(OP) '['
[33](01, 18)-(01, 19): NUMBER(NUMBER) '1'
[33](01, 19)-(01, 20): RSQB(OP) ']'
[33](01, 21)-(01, 22): EQUAL(OP) '='
[33](01, 23)-(01, 26): STRING(STRING) '"X"'
[33](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[33](02, 00)-(02, 00): DEDENT(DEDENT)
[33](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[34](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[34](01, 00)-(01, 04): INDENT(INDENT) '    '
[34](01, 04)-(01, 06): NAME(NAME) 'if'
[34](01, 07)-(01, 13): NAME(NAME) 'string'
[34](01, 13)-(01, 14): LSQB(OP) '['
[34](01, 14)-(01, 17): NAME(NAME) 'len'
[34](01, 17)-(01, 18): LPAR(OP) '('
[34](01, 18)-(01, 24): NAME(NAME) 'string'
[34](01, 24)-(01, 25): RPAR(OP) ')'
[34](01, 25)-(01, 26): MINUS(OP) '-'
[34](01, 26)-(01, 27): NUMBER(NUMBER) '1'
[34](01, 27)-(01, 28): RSQB(OP) ']'
[34](01, 29)-(01, 31): EQEQUAL(OP) '=='
[34](01, 32)-(01, 35): STRING(STRING) '"1"'
[34](01, 35)-(01, 36): COLON(OP) ':'
[34](01, 36)-(01, 37): NEWLINE(NEWLINE) '\n'
[34](02, 00)-(02, 00): DEDENT(DEDENT)
[34](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[35](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[35](01, 00)-(01, 08): INDENT(INDENT) '        '
[35](01, 08)-(01, 17): NAME(NAME) 'minefield'
[35](01, 17)-(01, 18): LSQB(OP) '['
[35](01, 18)-(01, 21): NAME(NAME) 'len'
[35](01, 21)-(01, 22): LPAR(OP) '('
[35](01, 22)-(01, 31): NAME(NAME) 'minefield'
[35](01, 31)-(01, 32): RPAR(OP) ')'
[35](01, 32)-(01, 33): MINUS(OP) '-'
[35](01, 33)-(01, 34): NUMBER(NUMBER) '2'
[35](01, 34)-(01, 35): RSQB(OP) ']'
[35](01, 36)-(01, 37): EQUAL(OP) '='
[35](01, 38)-(01, 41): STRING(STRING) '"X"'
[35](01, 41)-(01, 42): NEWLINE(NEWLINE) '\n'
[35](02, 00)-(02, 00): DEDENT(DEDENT)
[35](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[36](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[36](01, 00)-(01, 01): NL(NL) '\n'
[36](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[37](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[37](01, 04)-(01, 36): COMMENT(COMMENT) '#iedere 2 staat ook sowieso vast'
[37](01, 36)-(01, 37): NL(NL) '\n'
[37](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[38](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[38](01, 00)-(01, 04): INDENT(INDENT) '    '
[38](01, 04)-(01, 21): NAME(NAME) 'stringindexteller'
[38](01, 22)-(01, 23): EQUAL(OP) '='
[38](01, 24)-(01, 25): NUMBER(NUMBER) '0'
[38](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[38](02, 00)-(02, 00): DEDENT(DEDENT)
[38](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[39](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[39](01, 00)-(01, 04): INDENT(INDENT) '    '
[39](01, 04)-(01, 07): NAME(NAME) 'for'
[39](01, 08)-(01, 09): NAME(NAME) 'i'
[39](01, 10)-(01, 12): NAME(NAME) 'in'
[39](01, 13)-(01, 19): NAME(NAME) 'string'
[39](01, 19)-(01, 20): COLON(OP) ':'
[39](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[39](02, 00)-(02, 00): DEDENT(DEDENT)
[39](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[40](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[40](01, 00)-(01, 08): INDENT(INDENT) '        '
[40](01, 08)-(01, 10): NAME(NAME) 'if'
[40](01, 11)-(01, 12): NAME(NAME) 'i'
[40](01, 13)-(01, 15): EQEQUAL(OP) '=='
[40](01, 16)-(01, 19): STRING(STRING) '"2"'
[40](01, 19)-(01, 20): COLON(OP) ':'
[40](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[40](02, 00)-(02, 00): DEDENT(DEDENT)
[40](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[41](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[41](01, 00)-(01, 12): INDENT(INDENT) '            '
[41](01, 12)-(01, 21): NAME(NAME) 'minefield'
[41](01, 21)-(01, 22): LSQB(OP) '['
[41](01, 22)-(01, 39): NAME(NAME) 'stringindexteller'
[41](01, 39)-(01, 40): PLUS(OP) '+'
[41](01, 40)-(01, 41): NUMBER(NUMBER) '1'
[41](01, 41)-(01, 42): RSQB(OP) ']'
[41](01, 43)-(01, 44): EQUAL(OP) '='
[41](01, 45)-(01, 48): STRING(STRING) '"X"'
[41](01, 48)-(01, 49): NEWLINE(NEWLINE) '\n'
[41](02, 00)-(02, 00): DEDENT(DEDENT)
[41](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[42](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[42](01, 00)-(01, 12): INDENT(INDENT) '            '
[42](01, 12)-(01, 21): NAME(NAME) 'minefield'
[42](01, 21)-(01, 22): LSQB(OP) '['
[42](01, 22)-(01, 39): NAME(NAME) 'stringindexteller'
[42](01, 39)-(01, 40): MINUS(OP) '-'
[42](01, 40)-(01, 41): NUMBER(NUMBER) '1'
[42](01, 41)-(01, 42): RSQB(OP) ']'
[42](01, 43)-(01, 44): EQUAL(OP) '='
[42](01, 45)-(01, 48): STRING(STRING) '"X"'
[42](01, 48)-(01, 49): NEWLINE(NEWLINE) '\n'
[42](02, 00)-(02, 00): DEDENT(DEDENT)
[42](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[43](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[43](01, 00)-(01, 08): INDENT(INDENT) '        '
[43](01, 08)-(01, 25): NAME(NAME) 'stringindexteller'
[43](01, 26)-(01, 28): PLUSEQUAL(OP) '+='
[43](01, 29)-(01, 30): NUMBER(NUMBER) '1'
[43](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[43](02, 00)-(02, 00): DEDENT(DEDENT)
[43](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[44](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[44](01, 00)-(01, 01): NL(NL) '\n'
[44](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[45](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[45](01, 04)-(01, 100): COMMENT(COMMENT) '#nu de rest, heeft meestal meerdere mogelijkheden, maar hangt volgens mij van de eerste al af...'
[45](01, 100)-(01, 101): NL(NL) '\n'
[45](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[46](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[46](01, 00)-(01, 04): INDENT(INDENT) '    '
[46](01, 04)-(01, 15): NAME(NAME) 'indexteller'
[46](01, 16)-(01, 17): EQUAL(OP) '='
[46](01, 18)-(01, 19): NUMBER(NUMBER) '0'
[46](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[46](02, 00)-(02, 00): DEDENT(DEDENT)
[46](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[47](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[47](01, 00)-(01, 04): INDENT(INDENT) '    '
[47](01, 04)-(01, 07): NAME(NAME) 'for'
[47](01, 08)-(01, 09): NAME(NAME) 'i'
[47](01, 10)-(01, 12): NAME(NAME) 'in'
[47](01, 13)-(01, 19): NAME(NAME) 'string'
[47](01, 19)-(01, 20): COLON(OP) ':'
[47](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[47](02, 00)-(02, 00): DEDENT(DEDENT)
[47](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[48](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[48](01, 00)-(01, 08): INDENT(INDENT) '        '
[48](01, 08)-(01, 10): NAME(NAME) 'if'
[48](01, 11)-(01, 22): NAME(NAME) 'indexteller'
[48](01, 23)-(01, 25): EQEQUAL(OP) '=='
[48](01, 26)-(01, 27): NUMBER(NUMBER) '0'
[48](01, 28)-(01, 30): NAME(NAME) 'or'
[48](01, 31)-(01, 42): NAME(NAME) 'indexteller'
[48](01, 43)-(01, 45): EQEQUAL(OP) '=='
[48](01, 46)-(01, 49): NAME(NAME) 'len'
[48](01, 49)-(01, 50): LPAR(OP) '('
[48](01, 50)-(01, 56): NAME(NAME) 'string'
[48](01, 56)-(01, 57): RPAR(OP) ')'
[48](01, 57)-(01, 58): MINUS(OP) '-'
[48](01, 58)-(01, 59): NUMBER(NUMBER) '1'
[48](01, 59)-(01, 60): COLON(OP) ':'
[48](01, 60)-(01, 61): NEWLINE(NEWLINE) '\n'
[48](02, 00)-(02, 00): DEDENT(DEDENT)
[48](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[49](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[49](01, 00)-(01, 12): INDENT(INDENT) '            '
[49](01, 12)-(01, 23): NAME(NAME) 'indexteller'
[49](01, 24)-(01, 26): PLUSEQUAL(OP) '+='
[49](01, 27)-(01, 28): NUMBER(NUMBER) '1'
[49](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[49](02, 00)-(02, 00): DEDENT(DEDENT)
[49](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[50](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[50](01, 00)-(01, 12): INDENT(INDENT) '            '
[50](01, 12)-(01, 16): NAME(NAME) 'pass'
[50](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[50](02, 00)-(02, 00): DEDENT(DEDENT)
[50](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[51](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[51](01, 00)-(01, 08): INDENT(INDENT) '        '
[51](01, 08)-(01, 12): NAME(NAME) 'else'
[51](01, 12)-(01, 13): COLON(OP) ':'
[51](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[51](02, 00)-(02, 00): DEDENT(DEDENT)
[51](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[52](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[52](01, 12)-(01, 19): COMMENT(COMMENT) '#eerste'
[52](01, 19)-(01, 20): NL(NL) '\n'
[52](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[53](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[53](01, 00)-(01, 12): INDENT(INDENT) '            '
[53](01, 12)-(01, 14): NAME(NAME) 'if'
[53](01, 15)-(01, 16): NAME(NAME) 'i'
[53](01, 17)-(01, 19): EQEQUAL(OP) '=='
[53](01, 20)-(01, 23): STRING(STRING) '"1"'
[53](01, 24)-(01, 27): NAME(NAME) 'and'
[53](01, 28)-(01, 37): NAME(NAME) 'minefield'
[53](01, 37)-(01, 38): LSQB(OP) '['
[53](01, 38)-(01, 49): NAME(NAME) 'indexteller'
[53](01, 49)-(01, 50): MINUS(OP) '-'
[53](01, 50)-(01, 51): NUMBER(NUMBER) '1'
[53](01, 51)-(01, 52): RSQB(OP) ']'
[53](01, 53)-(01, 55): NOTEQUAL(OP) '!='
[53](01, 56)-(01, 59): STRING(STRING) '"X"'
[53](01, 60)-(01, 63): NAME(NAME) 'and'
[53](01, 64)-(01, 73): NAME(NAME) 'minefield'
[53](01, 73)-(01, 74): LSQB(OP) '['
[53](01, 74)-(01, 85): NAME(NAME) 'indexteller'
[53](01, 85)-(01, 86): PLUS(OP) '+'
[53](01, 86)-(01, 87): NUMBER(NUMBER) '1'
[53](01, 87)-(01, 88): RSQB(OP) ']'
[53](01, 89)-(01, 91): NOTEQUAL(OP) '!='
[53](01, 92)-(01, 95): STRING(STRING) '"X"'
[53](01, 95)-(01, 96): COLON(OP) ':'
[53](01, 96)-(01, 97): NEWLINE(NEWLINE) '\n'
[53](02, 00)-(02, 00): DEDENT(DEDENT)
[53](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[54](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[54](01, 00)-(01, 16): INDENT(INDENT) '                '
[54](01, 16)-(01, 35): NAME(NAME) 'tweede_mogelijkheid'
[54](01, 36)-(01, 37): EQUAL(OP) '='
[54](01, 38)-(01, 47): NAME(NAME) 'minefield'
[54](01, 47)-(01, 48): LSQB(OP) '['
[54](01, 48)-(01, 49): COLON(OP) ':'
[54](01, 49)-(01, 50): RSQB(OP) ']'
[54](01, 50)-(01, 51): NEWLINE(NEWLINE) '\n'
[54](02, 00)-(02, 00): DEDENT(DEDENT)
[54](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[55](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[55](01, 00)-(01, 16): INDENT(INDENT) '                '
[55](01, 16)-(01, 25): NAME(NAME) 'minefield'
[55](01, 25)-(01, 26): LSQB(OP) '['
[55](01, 26)-(01, 37): NAME(NAME) 'indexteller'
[55](01, 37)-(01, 38): MINUS(OP) '-'
[55](01, 38)-(01, 39): NUMBER(NUMBER) '1'
[55](01, 39)-(01, 40): RSQB(OP) ']'
[55](01, 41)-(01, 42): EQUAL(OP) '='
[55](01, 43)-(01, 46): STRING(STRING) '"X"'
[55](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[55](02, 00)-(02, 00): DEDENT(DEDENT)
[55](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[56](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[56](01, 00)-(01, 16): INDENT(INDENT) '                '
[56](01, 16)-(01, 35): NAME(NAME) 'tweede_mogelijkheid'
[56](01, 35)-(01, 36): LSQB(OP) '['
[56](01, 36)-(01, 47): NAME(NAME) 'indexteller'
[56](01, 47)-(01, 48): PLUS(OP) '+'
[56](01, 48)-(01, 49): NUMBER(NUMBER) '1'
[56](01, 49)-(01, 50): RSQB(OP) ']'
[56](01, 51)-(01, 52): EQUAL(OP) '='
[56](01, 53)-(01, 56): STRING(STRING) '"X"'
[56](01, 56)-(01, 57): NEWLINE(NEWLINE) '\n'
[56](02, 00)-(02, 00): DEDENT(DEDENT)
[56](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[57](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[57](01, 00)-(01, 01): NL(NL) '\n'
[57](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[58](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[58](01, 16)-(01, 37): COMMENT(COMMENT) '#nog verder aanpassen'
[58](01, 37)-(01, 38): NL(NL) '\n'
[58](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[59](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[59](01, 00)-(01, 16): INDENT(INDENT) '                '
[59](01, 16)-(01, 27): NAME(NAME) 'fouteteller'
[59](01, 28)-(01, 29): EQUAL(OP) '='
[59](01, 30)-(01, 31): NUMBER(NUMBER) '0'
[59](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[59](02, 00)-(02, 00): DEDENT(DEDENT)
[59](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[60](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[60](01, 00)-(01, 16): INDENT(INDENT) '                '
[60](01, 16)-(01, 26): NAME(NAME) 'fouteindex'
[60](01, 27)-(01, 28): EQUAL(OP) '='
[60](01, 29)-(01, 33): NAME(NAME) 'list'
[60](01, 33)-(01, 34): LPAR(OP) '('
[60](01, 34)-(01, 35): RPAR(OP) ')'
[60](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[60](02, 00)-(02, 00): DEDENT(DEDENT)
[60](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[61](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[61](01, 00)-(01, 16): INDENT(INDENT) '                '
[61](01, 16)-(01, 19): NAME(NAME) 'for'
[61](01, 20)-(01, 21): NAME(NAME) 'i'
[61](01, 22)-(01, 24): NAME(NAME) 'in'
[61](01, 25)-(01, 30): NAME(NAME) 'range'
[61](01, 30)-(01, 31): LPAR(OP) '('
[61](01, 31)-(01, 34): NAME(NAME) 'len'
[61](01, 34)-(01, 35): LPAR(OP) '('
[61](01, 35)-(01, 41): NAME(NAME) 'string'
[61](01, 41)-(01, 42): RPAR(OP) ')'
[61](01, 42)-(01, 43): RPAR(OP) ')'
[61](01, 43)-(01, 44): COLON(OP) ':'
[61](01, 44)-(01, 45): NEWLINE(NEWLINE) '\n'
[61](02, 00)-(02, 00): DEDENT(DEDENT)
[61](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[62](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[62](01, 00)-(01, 20): INDENT(INDENT) '                    '
[62](01, 20)-(01, 22): NAME(NAME) 'if'
[62](01, 23)-(01, 29): NAME(NAME) 'string'
[62](01, 29)-(01, 30): LSQB(OP) '['
[62](01, 30)-(01, 31): NAME(NAME) 'i'
[62](01, 31)-(01, 32): RSQB(OP) ']'
[62](01, 33)-(01, 35): NOTEQUAL(OP) '!='
[62](01, 36)-(01, 42): NAME(NAME) 'encode'
[62](01, 42)-(01, 43): LPAR(OP) '('
[62](01, 43)-(01, 52): NAME(NAME) 'minefield'
[62](01, 52)-(01, 53): RPAR(OP) ')'
[62](01, 53)-(01, 54): LSQB(OP) '['
[62](01, 54)-(01, 55): NAME(NAME) 'i'
[62](01, 55)-(01, 56): RSQB(OP) ']'
[62](01, 56)-(01, 57): COLON(OP) ':'
[62](01, 57)-(01, 58): NEWLINE(NEWLINE) '\n'
[62](02, 00)-(02, 00): DEDENT(DEDENT)
[62](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[63](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[63](01, 00)-(01, 24): INDENT(INDENT) '                        '
[63](01, 24)-(01, 33): NAME(NAME) 'minefield'
[63](01, 33)-(01, 34): LSQB(OP) '['
[63](01, 34)-(01, 35): NAME(NAME) 'i'
[63](01, 36)-(01, 37): PLUS(OP) '+'
[63](01, 38)-(01, 39): NUMBER(NUMBER) '1'
[63](01, 39)-(01, 40): RSQB(OP) ']'
[63](01, 41)-(01, 42): EQUAL(OP) '='
[63](01, 43)-(01, 46): STRING(STRING) '"X"'
[63](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[63](02, 00)-(02, 00): DEDENT(DEDENT)
[63](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[64](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[64](01, 00)-(01, 01): NL(NL) '\n'
[64](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[65](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[65](01, 00)-(01, 01): NL(NL) '\n'
[65](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[66](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[66](01, 00)-(01, 01): NL(NL) '\n'
[66](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[67](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[67](01, 00)-(01, 16): INDENT(INDENT) '                '
[67](01, 16)-(01, 32): NAME(NAME) 'foutefouteteller'
[67](01, 33)-(01, 34): EQUAL(OP) '='
[67](01, 35)-(01, 36): NUMBER(NUMBER) '0'
[67](01, 36)-(01, 37): NEWLINE(NEWLINE) '\n'
[67](02, 00)-(02, 00): DEDENT(DEDENT)
[67](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[68](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[68](01, 00)-(01, 16): INDENT(INDENT) '                '
[68](01, 16)-(01, 31): NAME(NAME) 'foutefouteindex'
[68](01, 32)-(01, 33): EQUAL(OP) '='
[68](01, 34)-(01, 38): NAME(NAME) 'list'
[68](01, 38)-(01, 39): LPAR(OP) '('
[68](01, 39)-(01, 40): RPAR(OP) ')'
[68](01, 40)-(01, 41): NEWLINE(NEWLINE) '\n'
[68](02, 00)-(02, 00): DEDENT(DEDENT)
[68](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[69](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[69](01, 00)-(01, 16): INDENT(INDENT) '                '
[69](01, 16)-(01, 19): NAME(NAME) 'for'
[69](01, 20)-(01, 21): NAME(NAME) 'i'
[69](01, 22)-(01, 24): NAME(NAME) 'in'
[69](01, 25)-(01, 30): NAME(NAME) 'range'
[69](01, 30)-(01, 31): LPAR(OP) '('
[69](01, 31)-(01, 34): NAME(NAME) 'len'
[69](01, 34)-(01, 35): LPAR(OP) '('
[69](01, 35)-(01, 41): NAME(NAME) 'string'
[69](01, 41)-(01, 42): RPAR(OP) ')'
[69](01, 42)-(01, 43): RPAR(OP) ')'
[69](01, 43)-(01, 44): COLON(OP) ':'
[69](01, 44)-(01, 45): NEWLINE(NEWLINE) '\n'
[69](02, 00)-(02, 00): DEDENT(DEDENT)
[69](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[70](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[70](01, 00)-(01, 20): INDENT(INDENT) '                    '
[70](01, 20)-(01, 22): NAME(NAME) 'if'
[70](01, 23)-(01, 29): NAME(NAME) 'string'
[70](01, 29)-(01, 30): LSQB(OP) '['
[70](01, 30)-(01, 31): NAME(NAME) 'i'
[70](01, 31)-(01, 32): RSQB(OP) ']'
[70](01, 33)-(01, 35): NOTEQUAL(OP) '!='
[70](01, 36)-(01, 42): NAME(NAME) 'encode'
[70](01, 42)-(01, 43): LPAR(OP) '('
[70](01, 43)-(01, 62): NAME(NAME) 'tweede_mogelijkheid'
[70](01, 62)-(01, 63): RPAR(OP) ')'
[70](01, 63)-(01, 64): LSQB(OP) '['
[70](01, 64)-(01, 65): NAME(NAME) 'i'
[70](01, 65)-(01, 66): RSQB(OP) ']'
[70](01, 66)-(01, 67): COLON(OP) ':'
[70](01, 67)-(01, 68): NEWLINE(NEWLINE) '\n'
[70](02, 00)-(02, 00): DEDENT(DEDENT)
[70](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[71](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[71](01, 00)-(01, 24): INDENT(INDENT) '                        '
[71](01, 24)-(01, 40): NAME(NAME) 'foutefouteteller'
[71](01, 41)-(01, 43): PLUSEQUAL(OP) '+='
[71](01, 44)-(01, 45): NUMBER(NUMBER) '1'
[71](01, 45)-(01, 46): NEWLINE(NEWLINE) '\n'
[71](02, 00)-(02, 00): DEDENT(DEDENT)
[71](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[72](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[72](01, 00)-(01, 24): INDENT(INDENT) '                        '
[72](01, 24)-(01, 39): NAME(NAME) 'foutefouteindex'
[72](01, 39)-(01, 40): DOT(OP) '.'
[72](01, 40)-(01, 46): NAME(NAME) 'append'
[72](01, 46)-(01, 47): LPAR(OP) '('
[72](01, 47)-(01, 48): NAME(NAME) 'i'
[72](01, 48)-(01, 49): RPAR(OP) ')'
[72](01, 49)-(01, 50): NEWLINE(NEWLINE) '\n'
[72](02, 00)-(02, 00): DEDENT(DEDENT)
[72](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[73](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[73](01, 00)-(01, 01): NL(NL) '\n'
[73](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[74](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[74](01, 00)-(01, 16): INDENT(INDENT) '                '
[74](01, 16)-(01, 18): NAME(NAME) 'if'
[74](01, 19)-(01, 35): NAME(NAME) 'foutefouteteller'
[74](01, 36)-(01, 37): LESS(OP) '<'
[74](01, 38)-(01, 39): NUMBER(NUMBER) '2'
[74](01, 39)-(01, 40): COLON(OP) ':'
[74](01, 40)-(01, 41): NEWLINE(NEWLINE) '\n'
[74](02, 00)-(02, 00): DEDENT(DEDENT)
[74](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[75](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[75](01, 00)-(01, 20): INDENT(INDENT) '                    '
[75](01, 20)-(01, 39): NAME(NAME) 'tweede_mogelijkheid'
[75](01, 39)-(01, 40): LSQB(OP) '['
[75](01, 40)-(01, 41): NAME(NAME) 'i'
[75](01, 41)-(01, 42): MINUS(OP) '-'
[75](01, 42)-(01, 43): NUMBER(NUMBER) '1'
[75](01, 43)-(01, 44): RSQB(OP) ']'
[75](01, 45)-(01, 46): EQUAL(OP) '='
[75](01, 47)-(01, 50): STRING(STRING) '"X"'
[75](01, 50)-(01, 51): NEWLINE(NEWLINE) '\n'
[75](02, 00)-(02, 00): DEDENT(DEDENT)
[75](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[76](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[76](01, 00)-(01, 16): INDENT(INDENT) '                '
[76](01, 16)-(01, 20): NAME(NAME) 'else'
[76](01, 20)-(01, 21): COLON(OP) ':'
[76](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[76](02, 00)-(02, 00): DEDENT(DEDENT)
[76](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[77](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[77](01, 00)-(01, 20): INDENT(INDENT) '                    '
[77](01, 20)-(01, 39): NAME(NAME) 'tweede_mogelijkheid'
[77](01, 39)-(01, 40): LSQB(OP) '['
[77](01, 40)-(01, 55): NAME(NAME) 'foutefouteindex'
[77](01, 55)-(01, 56): LSQB(OP) '['
[77](01, 56)-(01, 59): NAME(NAME) 'len'
[77](01, 59)-(01, 60): LPAR(OP) '('
[77](01, 60)-(01, 75): NAME(NAME) 'foutefouteindex'
[77](01, 75)-(01, 76): RPAR(OP) ')'
[77](01, 76)-(01, 77): MINUS(OP) '-'
[77](01, 77)-(01, 78): NUMBER(NUMBER) '1'
[77](01, 78)-(01, 79): RSQB(OP) ']'
[77](01, 79)-(01, 80): MINUS(OP) '-'
[77](01, 80)-(01, 81): NUMBER(NUMBER) '1'
[77](01, 81)-(01, 82): RSQB(OP) ']'
[77](01, 83)-(01, 84): EQUAL(OP) '='
[77](01, 85)-(01, 88): STRING(STRING) '"X"'
[77](01, 88)-(01, 89): NEWLINE(NEWLINE) '\n'
[77](02, 00)-(02, 00): DEDENT(DEDENT)
[77](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[78](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[78](01, 00)-(01, 01): NL(NL) '\n'
[78](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[79](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[79](01, 00)-(01, 04): INDENT(INDENT) '    '
[79](01, 04)-(01, 19): NAME(NAME) 'minefieldstring'
[79](01, 20)-(01, 21): EQUAL(OP) '='
[79](01, 22)-(01, 24): STRING(STRING) '""'
[79](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[79](02, 00)-(02, 00): DEDENT(DEDENT)
[79](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[80](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[80](01, 00)-(01, 04): INDENT(INDENT) '    '
[80](01, 04)-(01, 30): NAME(NAME) 'tweede_mogelijkheid_string'
[80](01, 31)-(01, 32): EQUAL(OP) '='
[80](01, 33)-(01, 35): STRING(STRING) '""'
[80](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[80](02, 00)-(02, 00): DEDENT(DEDENT)
[80](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[81](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[81](01, 00)-(01, 04): INDENT(INDENT) '    '
[81](01, 04)-(01, 07): NAME(NAME) 'for'
[81](01, 08)-(01, 09): NAME(NAME) 'i'
[81](01, 10)-(01, 12): NAME(NAME) 'in'
[81](01, 13)-(01, 22): NAME(NAME) 'minefield'
[81](01, 22)-(01, 23): COLON(OP) ':'
[81](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[81](02, 00)-(02, 00): DEDENT(DEDENT)
[81](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[82](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[82](01, 00)-(01, 08): INDENT(INDENT) '        '
[82](01, 08)-(01, 23): NAME(NAME) 'minefieldstring'
[82](01, 24)-(01, 26): PLUSEQUAL(OP) '+='
[82](01, 27)-(01, 28): NAME(NAME) 'i'
[82](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[82](02, 00)-(02, 00): DEDENT(DEDENT)
[82](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[83](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[83](01, 00)-(01, 04): INDENT(INDENT) '    '
[83](01, 04)-(01, 07): NAME(NAME) 'for'
[83](01, 08)-(01, 09): NAME(NAME) 'i'
[83](01, 10)-(01, 12): NAME(NAME) 'in'
[83](01, 13)-(01, 32): NAME(NAME) 'tweede_mogelijkheid'
[83](01, 32)-(01, 33): COLON(OP) ':'
[83](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[83](02, 00)-(02, 00): DEDENT(DEDENT)
[83](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[84](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[84](01, 00)-(01, 08): INDENT(INDENT) '        '
[84](01, 08)-(01, 34): NAME(NAME) 'tweede_mogelijkheid_string'
[84](01, 35)-(01, 37): PLUSEQUAL(OP) '+='
[84](01, 38)-(01, 39): NAME(NAME) 'i'
[84](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[84](02, 00)-(02, 00): DEDENT(DEDENT)
[84](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[85](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[85](01, 00)-(01, 01): NL(NL) '\n'
[85](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[86](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[86](01, 00)-(01, 01): NL(NL) '\n'
[86](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[87](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[87](01, 00)-(01, 04): INDENT(INDENT) '    '
[87](01, 04)-(01, 09): NAME(NAME) 'print'
[87](01, 09)-(01, 10): LPAR(OP) '('
[87](01, 10)-(01, 36): NAME(NAME) 'tweede_mogelijkheid_string'
[87](01, 36)-(01, 37): RPAR(OP) ')'
[87](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[87](02, 00)-(02, 00): DEDENT(DEDENT)
[87](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[88](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[88](01, 00)-(01, 04): INDENT(INDENT) '    '
[88](01, 04)-(01, 09): NAME(NAME) 'print'
[88](01, 09)-(01, 10): LPAR(OP) '('
[88](01, 10)-(01, 25): NAME(NAME) 'minefieldstring'
[88](01, 25)-(01, 26): RPAR(OP) ')'
[88](01, 26)-(01, 27): NEWLINE(NEWLINE)
[88](02, 00)-(02, 00): DEDENT(DEDENT)
[88](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

