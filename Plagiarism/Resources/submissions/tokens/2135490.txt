[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 06): NAME(NAME) 'string'
[00](01, 07)-(01, 08): EQUAL(OP) '='
[00](01, 09)-(01, 14): NAME(NAME) 'input'
[00](01, 14)-(01, 15): LPAR(OP) '('
[00](01, 15)-(01, 24): STRING(STRING) "'String '"
[00](01, 24)-(01, 25): RPAR(OP) ')'
[00](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 12): NAME(NAME) 'lijst_string'
[01](01, 13)-(01, 14): EQUAL(OP) '='
[01](01, 15)-(01, 19): NAME(NAME) 'list'
[01](01, 19)-(01, 20): LPAR(OP) '('
[01](01, 20)-(01, 26): NAME(NAME) 'string'
[01](01, 26)-(01, 27): RPAR(OP) ')'
[01](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 09): NAME(NAME) 'omgekeerd'
[02](01, 10)-(01, 11): EQUAL(OP) '='
[02](01, 12)-(01, 14): STRING(STRING) '""'
[02](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 03): NAME(NAME) 'for'
[03](01, 04)-(01, 06): NAME(NAME) 'el'
[03](01, 07)-(01, 09): NAME(NAME) 'in'
[03](01, 10)-(01, 15): NAME(NAME) 'range'
[03](01, 15)-(01, 16): LPAR(OP) '('
[03](01, 16)-(01, 19): NAME(NAME) 'len'
[03](01, 19)-(01, 20): LPAR(OP) '('
[03](01, 20)-(01, 26): NAME(NAME) 'string'
[03](01, 26)-(01, 27): RPAR(OP) ')'
[03](01, 27)-(01, 28): RPAR(OP) ')'
[03](01, 28)-(01, 29): COLON(OP) ':'
[03](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 13): NAME(NAME) 'omgekeerd'
[04](01, 14)-(01, 15): EQUAL(OP) '='
[04](01, 16)-(01, 25): NAME(NAME) 'omgekeerd'
[04](01, 26)-(01, 27): PLUS(OP) '+'
[04](01, 28)-(01, 40): NAME(NAME) 'lijst_string'
[04](01, 40)-(01, 41): LSQB(OP) '['
[04](01, 41)-(01, 44): NAME(NAME) 'len'
[04](01, 44)-(01, 45): LPAR(OP) '('
[04](01, 45)-(01, 51): NAME(NAME) 'string'
[04](01, 51)-(01, 52): RPAR(OP) ')'
[04](01, 52)-(01, 53): MINUS(OP) '-'
[04](01, 53)-(01, 54): NUMBER(NUMBER) '1'
[04](01, 54)-(01, 55): MINUS(OP) '-'
[04](01, 55)-(01, 57): NAME(NAME) 'el'
[04](01, 57)-(01, 58): RSQB(OP) ']'
[04](01, 58)-(01, 59): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 02): NAME(NAME) 'if'
[05](01, 03)-(01, 12): NAME(NAME) 'omgekeerd'
[05](01, 13)-(01, 15): EQEQUAL(OP) '=='
[05](01, 16)-(01, 22): NAME(NAME) 'string'
[05](01, 22)-(01, 23): COLON(OP) ':'
[05](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 04): INDENT(INDENT) '    '
[06](01, 04)-(01, 09): NAME(NAME) 'print'
[06](01, 09)-(01, 10): LPAR(OP) '('
[06](01, 10)-(01, 16): NAME(NAME) 'string'
[06](01, 16)-(01, 17): COMMA(OP) ','
[06](01, 18)-(01, 35): STRING(STRING) '"is a palindrome"'
[06](01, 35)-(01, 36): RPAR(OP) ')'
[06](01, 36)-(01, 37): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 04): NAME(NAME) 'else'
[07](01, 04)-(01, 05): COLON(OP) ':'
[07](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 04): INDENT(INDENT) '    '
[08](01, 04)-(01, 09): NAME(NAME) 'print'
[08](01, 09)-(01, 10): LPAR(OP) '('
[08](01, 10)-(01, 16): NAME(NAME) 'string'
[08](01, 16)-(01, 17): COMMA(OP) ','
[08](01, 18)-(01, 39): STRING(STRING) '"is not a palindrome"'
[08](01, 39)-(01, 40): RPAR(OP) ')'
[08](01, 40)-(01, 41): NEWLINE(NEWLINE)
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

