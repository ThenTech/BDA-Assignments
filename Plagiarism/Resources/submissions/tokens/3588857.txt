[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 26): NAME(NAME) 'is_palindrome_sentence'
[00](01, 26)-(01, 27): LPAR(OP) '('
[00](01, 27)-(01, 35): NAME(NAME) 'sentence'
[00](01, 35)-(01, 36): RPAR(OP) ')'
[00](01, 36)-(01, 37): COLON(OP) ':'
[00](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 06): NAME(NAME) 'if'
[01](01, 07)-(01, 10): NAME(NAME) 'len'
[01](01, 10)-(01, 11): LPAR(OP) '('
[01](01, 11)-(01, 19): NAME(NAME) 'sentence'
[01](01, 19)-(01, 20): RPAR(OP) ')'
[01](01, 21)-(01, 23): LESSEQUAL(OP) '<='
[01](01, 24)-(01, 25): NUMBER(NUMBER) '1'
[01](01, 25)-(01, 26): COLON(OP) ':'
[01](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 08): INDENT(INDENT) '        '
[02](01, 08)-(01, 14): NAME(NAME) 'return'
[02](01, 15)-(01, 19): NAME(NAME) 'True'
[02](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 04)-(01, 05): NL(NL) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 08): NAME(NAME) 'else'
[04](01, 08)-(01, 09): COLON(OP) ':'
[04](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 08): INDENT(INDENT) '        '
[05](01, 08)-(01, 10): NAME(NAME) 'if'
[05](01, 11)-(01, 14): NAME(NAME) 'not'
[05](01, 15)-(01, 16): LPAR(OP) '('
[05](01, 16)-(01, 19): STRING(STRING) "'a'"
[05](01, 20)-(01, 22): LESSEQUAL(OP) '<='
[05](01, 23)-(01, 31): NAME(NAME) 'sentence'
[05](01, 31)-(01, 32): LSQB(OP) '['
[05](01, 32)-(01, 33): MINUS(OP) '-'
[05](01, 33)-(01, 34): NUMBER(NUMBER) '1'
[05](01, 34)-(01, 35): RSQB(OP) ']'
[05](01, 36)-(01, 38): LESSEQUAL(OP) '<='
[05](01, 39)-(01, 42): STRING(STRING) "'z'"
[05](01, 43)-(01, 45): NAME(NAME) 'or'
[05](01, 46)-(01, 49): STRING(STRING) "'A'"
[05](01, 50)-(01, 52): LESSEQUAL(OP) '<='
[05](01, 53)-(01, 61): NAME(NAME) 'sentence'
[05](01, 61)-(01, 62): LSQB(OP) '['
[05](01, 62)-(01, 63): MINUS(OP) '-'
[05](01, 63)-(01, 64): NUMBER(NUMBER) '1'
[05](01, 64)-(01, 65): RSQB(OP) ']'
[05](01, 66)-(01, 68): LESSEQUAL(OP) '<='
[05](01, 69)-(01, 72): STRING(STRING) "'Z'"
[05](01, 72)-(01, 73): RPAR(OP) ')'
[05](01, 73)-(01, 74): COLON(OP) ':'
[05](01, 74)-(01, 75): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 12): INDENT(INDENT) '            '
[06](01, 12)-(01, 18): NAME(NAME) 'return'
[06](01, 19)-(01, 41): NAME(NAME) 'is_palindrome_sentence'
[06](01, 41)-(01, 42): LPAR(OP) '('
[06](01, 42)-(01, 50): NAME(NAME) 'sentence'
[06](01, 50)-(01, 51): LSQB(OP) '['
[06](01, 51)-(01, 52): NUMBER(NUMBER) '0'
[06](01, 52)-(01, 53): COLON(OP) ':'
[06](01, 53)-(01, 54): MINUS(OP) '-'
[06](01, 54)-(01, 55): NUMBER(NUMBER) '1'
[06](01, 55)-(01, 56): RSQB(OP) ']'
[06](01, 56)-(01, 57): RPAR(OP) ')'
[06](01, 57)-(01, 58): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 08): INDENT(INDENT) '        '
[07](01, 08)-(01, 12): NAME(NAME) 'elif'
[07](01, 13)-(01, 16): NAME(NAME) 'not'
[07](01, 17)-(01, 18): LPAR(OP) '('
[07](01, 18)-(01, 21): STRING(STRING) "'a'"
[07](01, 22)-(01, 24): LESSEQUAL(OP) '<='
[07](01, 25)-(01, 33): NAME(NAME) 'sentence'
[07](01, 33)-(01, 34): LSQB(OP) '['
[07](01, 34)-(01, 35): NUMBER(NUMBER) '0'
[07](01, 35)-(01, 36): RSQB(OP) ']'
[07](01, 37)-(01, 39): LESSEQUAL(OP) '<='
[07](01, 40)-(01, 43): STRING(STRING) "'z'"
[07](01, 44)-(01, 46): NAME(NAME) 'or'
[07](01, 47)-(01, 50): STRING(STRING) "'A'"
[07](01, 51)-(01, 53): LESSEQUAL(OP) '<='
[07](01, 54)-(01, 62): NAME(NAME) 'sentence'
[07](01, 62)-(01, 63): LSQB(OP) '['
[07](01, 63)-(01, 64): NUMBER(NUMBER) '0'
[07](01, 64)-(01, 65): RSQB(OP) ']'
[07](01, 66)-(01, 68): LESSEQUAL(OP) '<='
[07](01, 69)-(01, 72): STRING(STRING) "'Z'"
[07](01, 72)-(01, 73): RPAR(OP) ')'
[07](01, 73)-(01, 74): COLON(OP) ':'
[07](01, 74)-(01, 75): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 12): INDENT(INDENT) '            '
[08](01, 12)-(01, 18): NAME(NAME) 'return'
[08](01, 19)-(01, 41): NAME(NAME) 'is_palindrome_sentence'
[08](01, 41)-(01, 42): LPAR(OP) '('
[08](01, 42)-(01, 50): NAME(NAME) 'sentence'
[08](01, 50)-(01, 51): LSQB(OP) '['
[08](01, 51)-(01, 52): NUMBER(NUMBER) '1'
[08](01, 52)-(01, 53): COLON(OP) ':'
[08](01, 53)-(01, 54): RSQB(OP) ']'
[08](01, 54)-(01, 55): RPAR(OP) ')'
[08](01, 55)-(01, 56): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 08): INDENT(INDENT) '        '
[09](01, 08)-(01, 12): NAME(NAME) 'else'
[09](01, 12)-(01, 13): COLON(OP) ':'
[09](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 12): INDENT(INDENT) '            '
[10](01, 12)-(01, 18): NAME(NAME) 'return'
[10](01, 19)-(01, 27): NAME(NAME) 'sentence'
[10](01, 27)-(01, 28): LSQB(OP) '['
[10](01, 28)-(01, 29): NUMBER(NUMBER) '0'
[10](01, 29)-(01, 30): RSQB(OP) ']'
[10](01, 30)-(01, 31): DOT(OP) '.'
[10](01, 31)-(01, 36): NAME(NAME) 'lower'
[10](01, 36)-(01, 37): LPAR(OP) '('
[10](01, 37)-(01, 38): RPAR(OP) ')'
[10](01, 39)-(01, 41): EQEQUAL(OP) '=='
[10](01, 42)-(01, 50): NAME(NAME) 'sentence'
[10](01, 50)-(01, 51): LSQB(OP) '['
[10](01, 51)-(01, 52): MINUS(OP) '-'
[10](01, 52)-(01, 53): NUMBER(NUMBER) '1'
[10](01, 53)-(01, 54): RSQB(OP) ']'
[10](01, 54)-(01, 55): DOT(OP) '.'
[10](01, 55)-(01, 60): NAME(NAME) 'lower'
[10](01, 60)-(01, 61): LPAR(OP) '('
[10](01, 61)-(01, 62): RPAR(OP) ')'
[10](01, 63)-(01, 66): NAME(NAME) 'and'
[10](01, 67)-(01, 89): NAME(NAME) 'is_palindrome_sentence'
[10](01, 89)-(01, 90): LPAR(OP) '('
[10](01, 90)-(01, 98): NAME(NAME) 'sentence'
[10](01, 98)-(01, 99): LSQB(OP) '['
[10](01, 99)-(01, 100): NUMBER(NUMBER) '1'
[10](01, 100)-(01, 101): COLON(OP) ':'
[10](01, 101)-(01, 102): MINUS(OP) '-'
[10](01, 102)-(01, 103): NUMBER(NUMBER) '1'
[10](01, 103)-(01, 104): RSQB(OP) ']'
[10](01, 104)-(01, 105): RPAR(OP) ')'
[10](01, 105)-(01, 106): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 00): ENDMARKER(ENDMARKER)

