[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 19): NAME(NAME) 'filter_sentence'
[00](01, 19)-(01, 20): LPAR(OP) '('
[00](01, 20)-(01, 28): NAME(NAME) 'sentence'
[00](01, 28)-(01, 29): RPAR(OP) ')'
[00](01, 29)-(01, 30): COLON(OP) ':'
[00](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 13): NAME(NAME) 'lower_sen'
[01](01, 14)-(01, 15): EQUAL(OP) '='
[01](01, 16)-(01, 24): NAME(NAME) 'sentence'
[01](01, 24)-(01, 25): DOT(OP) '.'
[01](01, 25)-(01, 30): NAME(NAME) 'lower'
[01](01, 30)-(01, 31): LPAR(OP) '('
[01](01, 31)-(01, 32): RPAR(OP) ')'
[01](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 16): NAME(NAME) 'new_sentence'
[02](01, 17)-(01, 18): EQUAL(OP) '='
[02](01, 19)-(01, 21): STRING(STRING) '""'
[02](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 07): NAME(NAME) 'for'
[03](01, 08)-(01, 09): NAME(NAME) 'i'
[03](01, 10)-(01, 12): NAME(NAME) 'in'
[03](01, 13)-(01, 22): NAME(NAME) 'lower_sen'
[03](01, 22)-(01, 23): COLON(OP) ':'
[03](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 08): INDENT(INDENT) '        '
[04](01, 08)-(01, 10): NAME(NAME) 'if'
[04](01, 10)-(01, 11): LPAR(OP) '('
[04](01, 11)-(01, 14): STRING(STRING) '"a"'
[04](01, 15)-(01, 17): LESSEQUAL(OP) '<='
[04](01, 18)-(01, 19): NAME(NAME) 'i'
[04](01, 20)-(01, 23): NAME(NAME) 'and'
[04](01, 24)-(01, 25): NAME(NAME) 'i'
[04](01, 26)-(01, 28): LESSEQUAL(OP) '<='
[04](01, 29)-(01, 32): STRING(STRING) '"z"'
[04](01, 32)-(01, 33): RPAR(OP) ')'
[04](01, 33)-(01, 34): COLON(OP) ':'
[04](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 12): INDENT(INDENT) '            '
[05](01, 12)-(01, 24): NAME(NAME) 'new_sentence'
[05](01, 25)-(01, 27): PLUSEQUAL(OP) '+='
[05](01, 28)-(01, 29): NAME(NAME) 'i'
[05](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 01): NL(NL) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 04): INDENT(INDENT) '    '
[07](01, 04)-(01, 10): NAME(NAME) 'return'
[07](01, 11)-(01, 23): NAME(NAME) 'new_sentence'
[07](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 01): NL(NL) '\n'
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 03): NAME(NAME) 'def'
[09](01, 04)-(01, 17): NAME(NAME) 'is_palindrome'
[09](01, 17)-(01, 18): LPAR(OP) '('
[09](01, 18)-(01, 22): NAME(NAME) 'word'
[09](01, 22)-(01, 23): RPAR(OP) ')'
[09](01, 23)-(01, 24): COLON(OP) ':'
[09](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 04): INDENT(INDENT) '    '
[10](01, 04)-(01, 07): NAME(NAME) 'for'
[10](01, 08)-(01, 09): NAME(NAME) 'k'
[10](01, 10)-(01, 12): NAME(NAME) 'in'
[10](01, 13)-(01, 18): NAME(NAME) 'range'
[10](01, 18)-(01, 19): LPAR(OP) '('
[10](01, 19)-(01, 22): NAME(NAME) 'len'
[10](01, 22)-(01, 23): LPAR(OP) '('
[10](01, 23)-(01, 27): NAME(NAME) 'word'
[10](01, 27)-(01, 28): RPAR(OP) ')'
[10](01, 28)-(01, 29): RPAR(OP) ')'
[10](01, 29)-(01, 30): COLON(OP) ':'
[10](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 08): INDENT(INDENT) '        '
[11](01, 08)-(01, 10): NAME(NAME) 'if'
[11](01, 10)-(01, 11): LPAR(OP) '('
[11](01, 11)-(01, 15): NAME(NAME) 'word'
[11](01, 15)-(01, 16): LSQB(OP) '['
[11](01, 16)-(01, 17): NAME(NAME) 'k'
[11](01, 17)-(01, 18): RSQB(OP) ']'
[11](01, 19)-(01, 21): NOTEQUAL(OP) '!='
[11](01, 22)-(01, 26): NAME(NAME) 'word'
[11](01, 26)-(01, 27): LSQB(OP) '['
[11](01, 27)-(01, 30): NAME(NAME) 'len'
[11](01, 30)-(01, 31): LPAR(OP) '('
[11](01, 31)-(01, 35): NAME(NAME) 'word'
[11](01, 35)-(01, 36): RPAR(OP) ')'
[11](01, 37)-(01, 38): MINUS(OP) '-'
[11](01, 39)-(01, 40): NAME(NAME) 'k'
[11](01, 41)-(01, 42): MINUS(OP) '-'
[11](01, 43)-(01, 44): NUMBER(NUMBER) '1'
[11](01, 44)-(01, 45): RSQB(OP) ']'
[11](01, 45)-(01, 46): RPAR(OP) ')'
[11](01, 46)-(01, 47): COLON(OP) ':'
[11](01, 47)-(01, 48): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 12): INDENT(INDENT) '            '
[12](01, 12)-(01, 18): NAME(NAME) 'return'
[12](01, 19)-(01, 24): NAME(NAME) 'False'
[12](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 08): INDENT(INDENT) '        '
[13](01, 08)-(01, 12): NAME(NAME) 'else'
[13](01, 12)-(01, 13): COLON(OP) ':'
[13](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 12): INDENT(INDENT) '            '
[14](01, 12)-(01, 18): NAME(NAME) 'return'
[14](01, 19)-(01, 23): NAME(NAME) 'True'
[14](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 01): NL(NL) '\n'
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 01): NL(NL) '\n'
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 01): NL(NL) '\n'
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 03): NAME(NAME) 'def'
[18](01, 04)-(01, 26): NAME(NAME) 'is_palindrome_sentence'
[18](01, 26)-(01, 27): LPAR(OP) '('
[18](01, 27)-(01, 35): NAME(NAME) 'sentence'
[18](01, 35)-(01, 36): RPAR(OP) ')'
[18](01, 36)-(01, 37): COLON(OP) ':'
[18](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 04): INDENT(INDENT) '    '
[19](01, 04)-(01, 10): NAME(NAME) 'return'
[19](01, 11)-(01, 24): NAME(NAME) 'is_palindrome'
[19](01, 24)-(01, 25): LPAR(OP) '('
[19](01, 25)-(01, 40): NAME(NAME) 'filter_sentence'
[19](01, 40)-(01, 41): LPAR(OP) '('
[19](01, 41)-(01, 49): NAME(NAME) 'sentence'
[19](01, 49)-(01, 50): RPAR(OP) ')'
[19](01, 50)-(01, 51): RPAR(OP) ')'
[19](01, 51)-(01, 52): NEWLINE(NEWLINE)
[19](02, 00)-(02, 00): DEDENT(DEDENT)
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

