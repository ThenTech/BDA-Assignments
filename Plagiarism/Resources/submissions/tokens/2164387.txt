[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 88): COMMENT(COMMENT) '# Write a program that given two strings w1 and w2 checks if these strings are anagrams.'
[00](01, 88)-(01, 89): NL(NL) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 01): NL(NL) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 14): NAME(NAME) 'first_sentence'
[02](01, 15)-(01, 16): EQUAL(OP) '='
[02](01, 17)-(01, 22): NAME(NAME) 'input'
[02](01, 22)-(01, 23): LPAR(OP) '('
[02](01, 23)-(01, 42): STRING(STRING) '"Geef een zin in: "'
[02](01, 42)-(01, 43): RPAR(OP) ')'
[02](01, 43)-(01, 44): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 15): NAME(NAME) 'second_sentence'
[03](01, 16)-(01, 17): EQUAL(OP) '='
[03](01, 18)-(01, 23): NAME(NAME) 'input'
[03](01, 23)-(01, 24): LPAR(OP) '('
[03](01, 24)-(01, 50): STRING(STRING) '"Geef een tweede zin in: "'
[03](01, 50)-(01, 51): RPAR(OP) ')'
[03](01, 51)-(01, 52): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 08): NAME(NAME) 'alphabet'
[04](01, 09)-(01, 10): EQUAL(OP) '='
[04](01, 11)-(01, 39): STRING(STRING) '"abcdefghijklmnopqrstuvwxyz"'
[04](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 01): NL(NL) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 09): NAME(NAME) 'isAnagram'
[06](01, 10)-(01, 11): EQUAL(OP) '='
[06](01, 12)-(01, 16): NAME(NAME) 'True'
[06](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 01): NL(NL) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 03): NAME(NAME) 'for'
[08](01, 04)-(01, 08): NAME(NAME) 'char'
[08](01, 09)-(01, 11): NAME(NAME) 'in'
[08](01, 12)-(01, 20): NAME(NAME) 'alphabet'
[08](01, 20)-(01, 21): COLON(OP) ':'
[08](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 10): NAME(NAME) 'countF'
[09](01, 11)-(01, 12): EQUAL(OP) '='
[09](01, 13)-(01, 14): NUMBER(NUMBER) '0'
[09](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 04): INDENT(INDENT) '    '
[10](01, 04)-(01, 07): NAME(NAME) 'for'
[10](01, 08)-(01, 09): NAME(NAME) 'j'
[10](01, 10)-(01, 12): NAME(NAME) 'in'
[10](01, 13)-(01, 18): NAME(NAME) 'range'
[10](01, 18)-(01, 19): LPAR(OP) '('
[10](01, 19)-(01, 20): NUMBER(NUMBER) '0'
[10](01, 20)-(01, 21): COMMA(OP) ','
[10](01, 22)-(01, 25): NAME(NAME) 'len'
[10](01, 25)-(01, 26): LPAR(OP) '('
[10](01, 26)-(01, 40): NAME(NAME) 'first_sentence'
[10](01, 40)-(01, 41): RPAR(OP) ')'
[10](01, 41)-(01, 42): RPAR(OP) ')'
[10](01, 42)-(01, 43): COLON(OP) ':'
[10](01, 43)-(01, 44): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 08): INDENT(INDENT) '        '
[11](01, 08)-(01, 10): NAME(NAME) 'if'
[11](01, 11)-(01, 15): NAME(NAME) 'char'
[11](01, 16)-(01, 18): EQEQUAL(OP) '=='
[11](01, 19)-(01, 33): NAME(NAME) 'first_sentence'
[11](01, 33)-(01, 34): LSQB(OP) '['
[11](01, 34)-(01, 35): NAME(NAME) 'j'
[11](01, 35)-(01, 36): RSQB(OP) ']'
[11](01, 36)-(01, 37): COLON(OP) ':'
[11](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 12): INDENT(INDENT) '            '
[12](01, 12)-(01, 18): NAME(NAME) 'countF'
[12](01, 19)-(01, 21): PLUSEQUAL(OP) '+='
[12](01, 22)-(01, 23): NUMBER(NUMBER) '1'
[12](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 01): NL(NL) '\n'
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 04): INDENT(INDENT) '    '
[14](01, 04)-(01, 10): NAME(NAME) 'countS'
[14](01, 11)-(01, 12): EQUAL(OP) '='
[14](01, 13)-(01, 14): NUMBER(NUMBER) '0'
[14](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 04): INDENT(INDENT) '    '
[15](01, 04)-(01, 07): NAME(NAME) 'for'
[15](01, 08)-(01, 09): NAME(NAME) 'j'
[15](01, 10)-(01, 12): NAME(NAME) 'in'
[15](01, 13)-(01, 18): NAME(NAME) 'range'
[15](01, 18)-(01, 19): LPAR(OP) '('
[15](01, 19)-(01, 20): NUMBER(NUMBER) '0'
[15](01, 20)-(01, 21): COMMA(OP) ','
[15](01, 22)-(01, 25): NAME(NAME) 'len'
[15](01, 25)-(01, 26): LPAR(OP) '('
[15](01, 26)-(01, 41): NAME(NAME) 'second_sentence'
[15](01, 41)-(01, 42): RPAR(OP) ')'
[15](01, 42)-(01, 43): RPAR(OP) ')'
[15](01, 43)-(01, 44): COLON(OP) ':'
[15](01, 44)-(01, 45): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 08): INDENT(INDENT) '        '
[16](01, 08)-(01, 10): NAME(NAME) 'if'
[16](01, 11)-(01, 15): NAME(NAME) 'char'
[16](01, 16)-(01, 18): EQEQUAL(OP) '=='
[16](01, 19)-(01, 34): NAME(NAME) 'second_sentence'
[16](01, 34)-(01, 35): LSQB(OP) '['
[16](01, 35)-(01, 36): NAME(NAME) 'j'
[16](01, 36)-(01, 37): RSQB(OP) ']'
[16](01, 37)-(01, 38): COLON(OP) ':'
[16](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 12): INDENT(INDENT) '            '
[17](01, 12)-(01, 18): NAME(NAME) 'countS'
[17](01, 19)-(01, 21): PLUSEQUAL(OP) '+='
[17](01, 22)-(01, 23): NUMBER(NUMBER) '1'
[17](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 01): NL(NL) '\n'
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 04): INDENT(INDENT) '    '
[19](01, 04)-(01, 13): NAME(NAME) 'isAnagram'
[19](01, 14)-(01, 15): EQUAL(OP) '='
[19](01, 16)-(01, 25): NAME(NAME) 'isAnagram'
[19](01, 26)-(01, 29): NAME(NAME) 'and'
[19](01, 30)-(01, 36): NAME(NAME) 'countF'
[19](01, 37)-(01, 39): EQEQUAL(OP) '=='
[19](01, 40)-(01, 46): NAME(NAME) 'countS'
[19](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): DEDENT(DEDENT)
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 01): NL(NL) '\n'
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 02): NAME(NAME) 'if'
[21](01, 03)-(01, 12): NAME(NAME) 'isAnagram'
[21](01, 12)-(01, 13): COLON(OP) ':'
[21](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 04): INDENT(INDENT) '    '
[22](01, 04)-(01, 09): NAME(NAME) 'print'
[22](01, 09)-(01, 10): LPAR(OP) '('
[22](01, 10)-(01, 24): NAME(NAME) 'first_sentence'
[22](01, 24)-(01, 25): COMMA(OP) ','
[22](01, 26)-(01, 31): STRING(STRING) '"and"'
[22](01, 31)-(01, 32): COMMA(OP) ','
[22](01, 33)-(01, 48): NAME(NAME) 'second_sentence'
[22](01, 48)-(01, 49): COMMA(OP) ','
[22](01, 50)-(01, 65): STRING(STRING) '"are anagrams!"'
[22](01, 65)-(01, 66): RPAR(OP) ')'
[22](01, 66)-(01, 67): NEWLINE(NEWLINE) '\n'
[22](02, 00)-(02, 00): DEDENT(DEDENT)
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[23](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[23](01, 00)-(01, 04): NAME(NAME) 'else'
[23](01, 04)-(01, 05): COLON(OP) ':'
[23](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[23](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[24](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[24](01, 00)-(01, 04): INDENT(INDENT) '    '
[24](01, 04)-(01, 09): NAME(NAME) 'print'
[24](01, 09)-(01, 10): LPAR(OP) '('
[24](01, 10)-(01, 24): NAME(NAME) 'first_sentence'
[24](01, 24)-(01, 25): COMMA(OP) ','
[24](01, 26)-(01, 31): STRING(STRING) '"and"'
[24](01, 31)-(01, 32): COMMA(OP) ','
[24](01, 33)-(01, 48): NAME(NAME) 'second_sentence'
[24](01, 48)-(01, 49): COMMA(OP) ','
[24](01, 50)-(01, 68): STRING(STRING) '"are not anagrams"'
[24](01, 68)-(01, 69): RPAR(OP) ')'
[24](01, 69)-(01, 70): NEWLINE(NEWLINE) '\n'
[24](02, 00)-(02, 00): DEDENT(DEDENT)
[24](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[25](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[25](01, 00)-(01, 00): ENDMARKER(ENDMARKER)

