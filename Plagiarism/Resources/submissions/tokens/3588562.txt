[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 52): COMMENT(COMMENT) '# This function takes last element as pivot, places '
[00](01, 52)-(01, 53): NL(NL) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 54): COMMENT(COMMENT) '# the pivot element at its correct position in sorted '
[01](01, 54)-(01, 55): NL(NL) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 53): COMMENT(COMMENT) '# array, and places all smaller (smaller than pivot) '
[02](01, 53)-(01, 54): NL(NL) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 53): COMMENT(COMMENT) '# to left of pivot and all greater elements to right '
[03](01, 53)-(01, 54): NL(NL) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 11): COMMENT(COMMENT) '# of pivot '
[04](01, 11)-(01, 12): NL(NL) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 03): NAME(NAME) 'def'
[05](01, 04)-(01, 13): NAME(NAME) 'partition'
[05](01, 13)-(01, 14): LPAR(OP) '('
[05](01, 14)-(01, 17): NAME(NAME) 'arr'
[05](01, 17)-(01, 18): COMMA(OP) ','
[05](01, 18)-(01, 21): NAME(NAME) 'low'
[05](01, 21)-(01, 22): COMMA(OP) ','
[05](01, 22)-(01, 26): NAME(NAME) 'high'
[05](01, 26)-(01, 27): RPAR(OP) ')'
[05](01, 27)-(01, 28): COLON(OP) ':'
[05](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 04): INDENT(INDENT) '    '
[06](01, 04)-(01, 05): NAME(NAME) 'i'
[06](01, 06)-(01, 07): EQUAL(OP) '='
[06](01, 08)-(01, 09): LPAR(OP) '('
[06](01, 10)-(01, 13): NAME(NAME) 'low'
[06](01, 13)-(01, 14): MINUS(OP) '-'
[06](01, 14)-(01, 15): NUMBER(NUMBER) '1'
[06](01, 16)-(01, 17): RPAR(OP) ')'
[06](01, 26)-(01, 53): COMMENT(COMMENT) '# index of smaller element '
[06](01, 53)-(01, 54): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 04): INDENT(INDENT) '    '
[07](01, 04)-(01, 09): NAME(NAME) 'pivot'
[07](01, 10)-(01, 11): EQUAL(OP) '='
[07](01, 12)-(01, 15): NAME(NAME) 'arr'
[07](01, 15)-(01, 16): LSQB(OP) '['
[07](01, 16)-(01, 20): NAME(NAME) 'high'
[07](01, 20)-(01, 21): RSQB(OP) ']'
[07](01, 26)-(01, 34): COMMENT(COMMENT) '# pivot '
[07](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 02)-(01, 03): NL(NL) '\n'
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 07): NAME(NAME) 'for'
[09](01, 08)-(01, 09): NAME(NAME) 'j'
[09](01, 10)-(01, 12): NAME(NAME) 'in'
[09](01, 13)-(01, 18): NAME(NAME) 'range'
[09](01, 18)-(01, 19): LPAR(OP) '('
[09](01, 19)-(01, 22): NAME(NAME) 'low'
[09](01, 23)-(01, 24): COMMA(OP) ','
[09](01, 25)-(01, 29): NAME(NAME) 'high'
[09](01, 29)-(01, 30): RPAR(OP) ')'
[09](01, 30)-(01, 31): COLON(OP) ':'
[09](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 02)-(01, 03): NL(NL) '\n'
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 08)-(01, 48): COMMENT(COMMENT) '# If current element is smaller than or '
[11](01, 48)-(01, 49): NL(NL) '\n'
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 08)-(01, 25): COMMENT(COMMENT) '# equal to pivot '
[12](01, 25)-(01, 26): NL(NL) '\n'
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 08): INDENT(INDENT) '        '
[13](01, 08)-(01, 10): NAME(NAME) 'if'
[13](01, 13)-(01, 16): NAME(NAME) 'arr'
[13](01, 16)-(01, 17): LSQB(OP) '['
[13](01, 17)-(01, 18): NAME(NAME) 'j'
[13](01, 18)-(01, 19): RSQB(OP) ']'
[13](01, 20)-(01, 22): LESSEQUAL(OP) '<='
[13](01, 23)-(01, 28): NAME(NAME) 'pivot'
[13](01, 28)-(01, 29): COLON(OP) ':'
[13](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 10)-(01, 11): NL(NL) '\n'
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 12)-(01, 49): COMMENT(COMMENT) '# increment index of smaller element '
[15](01, 49)-(01, 50): NL(NL) '\n'
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 12): INDENT(INDENT) '            '
[16](01, 12)-(01, 13): NAME(NAME) 'i'
[16](01, 14)-(01, 15): EQUAL(OP) '='
[16](01, 16)-(01, 17): NAME(NAME) 'i'
[16](01, 17)-(01, 18): PLUS(OP) '+'
[16](01, 18)-(01, 19): NUMBER(NUMBER) '1'
[16](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 12): INDENT(INDENT) '            '
[17](01, 12)-(01, 15): NAME(NAME) 'arr'
[17](01, 15)-(01, 16): LSQB(OP) '['
[17](01, 16)-(01, 17): NAME(NAME) 'i'
[17](01, 17)-(01, 18): RSQB(OP) ']'
[17](01, 18)-(01, 19): COMMA(OP) ','
[17](01, 19)-(01, 22): NAME(NAME) 'arr'
[17](01, 22)-(01, 23): LSQB(OP) '['
[17](01, 23)-(01, 24): NAME(NAME) 'j'
[17](01, 24)-(01, 25): RSQB(OP) ']'
[17](01, 26)-(01, 27): EQUAL(OP) '='
[17](01, 28)-(01, 31): NAME(NAME) 'arr'
[17](01, 31)-(01, 32): LSQB(OP) '['
[17](01, 32)-(01, 33): NAME(NAME) 'j'
[17](01, 33)-(01, 34): RSQB(OP) ']'
[17](01, 34)-(01, 35): COMMA(OP) ','
[17](01, 35)-(01, 38): NAME(NAME) 'arr'
[17](01, 38)-(01, 39): LSQB(OP) '['
[17](01, 39)-(01, 40): NAME(NAME) 'i'
[17](01, 40)-(01, 41): RSQB(OP) ']'
[17](01, 42)-(01, 43): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 02)-(01, 03): NL(NL) '\n'
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 04): INDENT(INDENT) '    '
[19](01, 04)-(01, 07): NAME(NAME) 'arr'
[19](01, 07)-(01, 08): LSQB(OP) '['
[19](01, 08)-(01, 09): NAME(NAME) 'i'
[19](01, 09)-(01, 10): PLUS(OP) '+'
[19](01, 10)-(01, 11): NUMBER(NUMBER) '1'
[19](01, 11)-(01, 12): RSQB(OP) ']'
[19](01, 12)-(01, 13): COMMA(OP) ','
[19](01, 13)-(01, 16): NAME(NAME) 'arr'
[19](01, 16)-(01, 17): LSQB(OP) '['
[19](01, 17)-(01, 21): NAME(NAME) 'high'
[19](01, 21)-(01, 22): RSQB(OP) ']'
[19](01, 23)-(01, 24): EQUAL(OP) '='
[19](01, 25)-(01, 28): NAME(NAME) 'arr'
[19](01, 28)-(01, 29): LSQB(OP) '['
[19](01, 29)-(01, 33): NAME(NAME) 'high'
[19](01, 33)-(01, 34): RSQB(OP) ']'
[19](01, 34)-(01, 35): COMMA(OP) ','
[19](01, 35)-(01, 38): NAME(NAME) 'arr'
[19](01, 38)-(01, 39): LSQB(OP) '['
[19](01, 39)-(01, 40): NAME(NAME) 'i'
[19](01, 40)-(01, 41): PLUS(OP) '+'
[19](01, 41)-(01, 42): NUMBER(NUMBER) '1'
[19](01, 42)-(01, 43): RSQB(OP) ']'
[19](01, 44)-(01, 45): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): DEDENT(DEDENT)
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 04): INDENT(INDENT) '    '
[20](01, 04)-(01, 10): NAME(NAME) 'return'
[20](01, 11)-(01, 12): LPAR(OP) '('
[20](01, 13)-(01, 14): NAME(NAME) 'i'
[20](01, 14)-(01, 15): PLUS(OP) '+'
[20](01, 15)-(01, 16): NUMBER(NUMBER) '1'
[20](01, 17)-(01, 18): RPAR(OP) ')'
[20](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[20](02, 00)-(02, 00): DEDENT(DEDENT)
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 02)-(01, 03): NL(NL) '\n'
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 46): COMMENT(COMMENT) '# The main function that implements QuickSort '
[22](01, 46)-(01, 47): NL(NL) '\n'
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[23](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[23](01, 00)-(01, 32): COMMENT(COMMENT) '# arr[] --> Array to be sorted, '
[23](01, 32)-(01, 33): NL(NL) '\n'
[23](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[24](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[24](01, 00)-(01, 27): COMMENT(COMMENT) '# low  --> Starting index, '
[24](01, 27)-(01, 28): NL(NL) '\n'
[24](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[25](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[25](01, 00)-(01, 25): COMMENT(COMMENT) '# high  --> Ending index '
[25](01, 25)-(01, 26): NL(NL) '\n'
[25](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[26](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[26](01, 02)-(01, 03): NL(NL) '\n'
[26](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[27](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[27](01, 00)-(01, 28): COMMENT(COMMENT) '# Function to do Quick sort '
[27](01, 28)-(01, 29): NL(NL) '\n'
[27](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[28](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[28](01, 00)-(01, 03): NAME(NAME) 'def'
[28](01, 04)-(01, 14): NAME(NAME) 'quick_sort'
[28](01, 14)-(01, 15): LPAR(OP) '('
[28](01, 15)-(01, 18): NAME(NAME) 'arr'
[28](01, 18)-(01, 19): COMMA(OP) ','
[28](01, 19)-(01, 22): NAME(NAME) 'low'
[28](01, 22)-(01, 23): COMMA(OP) ','
[28](01, 23)-(01, 27): NAME(NAME) 'high'
[28](01, 27)-(01, 28): RPAR(OP) ')'
[28](01, 28)-(01, 29): COLON(OP) ':'
[28](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[28](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[29](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[29](01, 00)-(01, 04): INDENT(INDENT) '    '
[29](01, 04)-(01, 06): NAME(NAME) 'if'
[29](01, 07)-(01, 10): NAME(NAME) 'low'
[29](01, 11)-(01, 12): LESS(OP) '<'
[29](01, 13)-(01, 17): NAME(NAME) 'high'
[29](01, 17)-(01, 18): COLON(OP) ':'
[29](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[29](02, 00)-(02, 00): DEDENT(DEDENT)
[29](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[30](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[30](01, 02)-(01, 03): NL(NL) '\n'
[30](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[31](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[31](01, 08)-(01, 50): COMMENT(COMMENT) '# pi is partitioning index, arr[p] is now '
[31](01, 50)-(01, 51): NL(NL) '\n'
[31](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[32](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[32](01, 08)-(01, 25): COMMENT(COMMENT) '# at right place '
[32](01, 25)-(01, 26): NL(NL) '\n'
[32](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[33](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[33](01, 00)-(01, 08): INDENT(INDENT) '        '
[33](01, 08)-(01, 10): NAME(NAME) 'pi'
[33](01, 11)-(01, 12): EQUAL(OP) '='
[33](01, 13)-(01, 22): NAME(NAME) 'partition'
[33](01, 22)-(01, 23): LPAR(OP) '('
[33](01, 23)-(01, 26): NAME(NAME) 'arr'
[33](01, 26)-(01, 27): COMMA(OP) ','
[33](01, 27)-(01, 30): NAME(NAME) 'low'
[33](01, 30)-(01, 31): COMMA(OP) ','
[33](01, 31)-(01, 35): NAME(NAME) 'high'
[33](01, 35)-(01, 36): RPAR(OP) ')'
[33](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[33](02, 00)-(02, 00): DEDENT(DEDENT)
[33](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[34](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[34](01, 02)-(01, 03): NL(NL) '\n'
[34](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[35](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[35](01, 08)-(01, 42): COMMENT(COMMENT) '# Separately sort elements before '
[35](01, 42)-(01, 43): NL(NL) '\n'
[35](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[36](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[36](01, 08)-(01, 40): COMMENT(COMMENT) '# partition and after partition '
[36](01, 40)-(01, 41): NL(NL) '\n'
[36](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[37](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[37](01, 00)-(01, 08): INDENT(INDENT) '        '
[37](01, 08)-(01, 17): NAME(NAME) 'quickSort'
[37](01, 17)-(01, 18): LPAR(OP) '('
[37](01, 18)-(01, 21): NAME(NAME) 'arr'
[37](01, 21)-(01, 22): COMMA(OP) ','
[37](01, 23)-(01, 26): NAME(NAME) 'low'
[37](01, 26)-(01, 27): COMMA(OP) ','
[37](01, 28)-(01, 30): NAME(NAME) 'pi'
[37](01, 30)-(01, 31): MINUS(OP) '-'
[37](01, 31)-(01, 32): NUMBER(NUMBER) '1'
[37](01, 32)-(01, 33): RPAR(OP) ')'
[37](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[37](02, 00)-(02, 00): DEDENT(DEDENT)
[37](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[38](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[38](01, 00)-(01, 08): INDENT(INDENT) '        '
[38](01, 08)-(01, 17): NAME(NAME) 'quickSort'
[38](01, 17)-(01, 18): LPAR(OP) '('
[38](01, 18)-(01, 21): NAME(NAME) 'arr'
[38](01, 21)-(01, 22): COMMA(OP) ','
[38](01, 23)-(01, 25): NAME(NAME) 'pi'
[38](01, 25)-(01, 26): PLUS(OP) '+'
[38](01, 26)-(01, 27): NUMBER(NUMBER) '1'
[38](01, 27)-(01, 28): COMMA(OP) ','
[38](01, 29)-(01, 33): NAME(NAME) 'high'
[38](01, 33)-(01, 34): RPAR(OP) ')'
[38](01, 34)-(01, 35): NEWLINE(NEWLINE)
[38](02, 00)-(02, 00): DEDENT(DEDENT)
[38](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

