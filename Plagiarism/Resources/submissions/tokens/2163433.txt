[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 18): NAME(NAME) 'does_intersect'
[00](01, 18)-(01, 19): LPAR(OP) '('
[00](01, 19)-(01, 21): NAME(NAME) 'x1'
[00](01, 21)-(01, 22): COMMA(OP) ','
[00](01, 23)-(01, 25): NAME(NAME) 'y1'
[00](01, 25)-(01, 26): COMMA(OP) ','
[00](01, 27)-(01, 29): NAME(NAME) 'w1'
[00](01, 29)-(01, 30): COMMA(OP) ','
[00](01, 31)-(01, 33): NAME(NAME) 'h1'
[00](01, 33)-(01, 34): COMMA(OP) ','
[00](01, 35)-(01, 37): NAME(NAME) 'x2'
[00](01, 37)-(01, 38): COMMA(OP) ','
[00](01, 39)-(01, 41): NAME(NAME) 'y2'
[00](01, 41)-(01, 42): COMMA(OP) ','
[00](01, 43)-(01, 45): NAME(NAME) 'w2'
[00](01, 45)-(01, 46): COMMA(OP) ','
[00](01, 47)-(01, 49): NAME(NAME) 'h2'
[00](01, 49)-(01, 50): RPAR(OP) ')'
[00](01, 50)-(01, 51): COLON(OP) ':'
[00](01, 51)-(01, 52): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 15): NAME(NAME) 'x_intersect'
[01](01, 16)-(01, 17): EQUAL(OP) '='
[01](01, 18)-(01, 30): NAME(NAME) 'as_intersect'
[01](01, 30)-(01, 31): LPAR(OP) '('
[01](01, 31)-(01, 33): NAME(NAME) 'x1'
[01](01, 33)-(01, 34): COMMA(OP) ','
[01](01, 35)-(01, 37): NAME(NAME) 'w1'
[01](01, 37)-(01, 38): COMMA(OP) ','
[01](01, 39)-(01, 41): NAME(NAME) 'x2'
[01](01, 41)-(01, 42): COMMA(OP) ','
[01](01, 43)-(01, 45): NAME(NAME) 'w2'
[01](01, 45)-(01, 46): RPAR(OP) ')'
[01](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 15): NAME(NAME) 'y_intersect'
[02](01, 16)-(01, 17): EQUAL(OP) '='
[02](01, 18)-(01, 30): NAME(NAME) 'as_intersect'
[02](01, 30)-(01, 31): LPAR(OP) '('
[02](01, 31)-(01, 33): NAME(NAME) 'y1'
[02](01, 33)-(01, 34): COMMA(OP) ','
[02](01, 35)-(01, 37): NAME(NAME) 'h1'
[02](01, 37)-(01, 38): COMMA(OP) ','
[02](01, 39)-(01, 41): NAME(NAME) 'y2'
[02](01, 41)-(01, 42): COMMA(OP) ','
[02](01, 43)-(01, 45): NAME(NAME) 'h2'
[02](01, 45)-(01, 46): RPAR(OP) ')'
[02](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 01): NL(NL) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 10): NAME(NAME) 'return'
[04](01, 11)-(01, 22): NAME(NAME) 'x_intersect'
[04](01, 23)-(01, 25): NAME(NAME) 'or'
[04](01, 26)-(01, 37): NAME(NAME) 'y_intersect'
[04](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 01): NL(NL) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 03): NAME(NAME) 'def'
[06](01, 04)-(01, 16): NAME(NAME) 'as_intersect'
[06](01, 16)-(01, 17): LPAR(OP) '('
[06](01, 17)-(01, 23): NAME(NAME) 'coord1'
[06](01, 23)-(01, 24): COMMA(OP) ','
[06](01, 25)-(01, 30): NAME(NAME) 'size1'
[06](01, 30)-(01, 31): COMMA(OP) ','
[06](01, 32)-(01, 38): NAME(NAME) 'coord2'
[06](01, 38)-(01, 39): COMMA(OP) ','
[06](01, 40)-(01, 45): NAME(NAME) 'size2'
[06](01, 45)-(01, 46): RPAR(OP) ')'
[06](01, 46)-(01, 47): COLON(OP) ':'
[06](01, 47)-(01, 48): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 04): INDENT(INDENT) '    '
[07](01, 04)-(01, 06): NAME(NAME) 'if'
[07](01, 07)-(01, 13): NAME(NAME) 'coord1'
[07](01, 14)-(01, 15): LESS(OP) '<'
[07](01, 16)-(01, 22): NAME(NAME) 'coord2'
[07](01, 22)-(01, 23): COLON(OP) ':'
[07](01, 36)-(01, 94): COMMENT(COMMENT) '#ex: if x1 comes before x2 is x1 + width1 further then x1?'
[07](01, 94)-(01, 95): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 08): INDENT(INDENT) '        '
[08](01, 08)-(01, 14): NAME(NAME) 'return'
[08](01, 15)-(01, 21): NAME(NAME) 'coord1'
[08](01, 21)-(01, 22): PLUS(OP) '+'
[08](01, 22)-(01, 27): NAME(NAME) 'size1'
[08](01, 28)-(01, 29): GREATER(OP) '>'
[08](01, 30)-(01, 36): NAME(NAME) 'coord2'
[08](01, 36)-(01, 37): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 08): NAME(NAME) 'else'
[09](01, 08)-(01, 09): COLON(OP) ':'
[09](01, 36)-(01, 94): COMMENT(COMMENT) '#ex: if x2 comes before x1 is x2 + width2 further then x1?'
[09](01, 94)-(01, 95): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 08): INDENT(INDENT) '        '
[10](01, 08)-(01, 14): NAME(NAME) 'return'
[10](01, 15)-(01, 21): NAME(NAME) 'coord2'
[10](01, 21)-(01, 22): PLUS(OP) '+'
[10](01, 22)-(01, 27): NAME(NAME) 'size2'
[10](01, 28)-(01, 29): LESS(OP) '<'
[10](01, 30)-(01, 36): NAME(NAME) 'coord1'
[10](01, 36)-(01, 37): NEWLINE(NEWLINE)
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

