[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 09): NAME(NAME) 'merge'
[00](01, 09)-(01, 10): LPAR(OP) '('
[00](01, 10)-(01, 14): NAME(NAME) 'left'
[00](01, 14)-(01, 15): COMMA(OP) ','
[00](01, 16)-(01, 21): NAME(NAME) 'right'
[00](01, 21)-(01, 22): RPAR(OP) ')'
[00](01, 22)-(01, 23): COLON(OP) ':'
[00](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 38): STRING(STRING) '"""Merge sort merging function."""'
[01](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 01): NL(NL) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 14): NAME(NAME) 'left_index'
[03](01, 14)-(01, 15): COMMA(OP) ','
[03](01, 16)-(01, 27): NAME(NAME) 'right_index'
[03](01, 28)-(01, 29): EQUAL(OP) '='
[03](01, 30)-(01, 31): NUMBER(NUMBER) '0'
[03](01, 31)-(01, 32): COMMA(OP) ','
[03](01, 33)-(01, 34): NUMBER(NUMBER) '0'
[03](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 10): NAME(NAME) 'result'
[04](01, 11)-(01, 12): EQUAL(OP) '='
[04](01, 13)-(01, 14): LSQB(OP) '['
[04](01, 14)-(01, 15): RSQB(OP) ']'
[04](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 09): NAME(NAME) 'while'
[05](01, 10)-(01, 20): NAME(NAME) 'left_index'
[05](01, 21)-(01, 22): LESS(OP) '<'
[05](01, 23)-(01, 26): NAME(NAME) 'len'
[05](01, 26)-(01, 27): LPAR(OP) '('
[05](01, 27)-(01, 31): NAME(NAME) 'left'
[05](01, 31)-(01, 32): RPAR(OP) ')'
[05](01, 33)-(01, 36): NAME(NAME) 'and'
[05](01, 37)-(01, 48): NAME(NAME) 'right_index'
[05](01, 49)-(01, 50): LESS(OP) '<'
[05](01, 51)-(01, 54): NAME(NAME) 'len'
[05](01, 54)-(01, 55): LPAR(OP) '('
[05](01, 55)-(01, 60): NAME(NAME) 'right'
[05](01, 60)-(01, 61): RPAR(OP) ')'
[05](01, 61)-(01, 62): COLON(OP) ':'
[05](01, 62)-(01, 63): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 08): INDENT(INDENT) '        '
[06](01, 08)-(01, 10): NAME(NAME) 'if'
[06](01, 11)-(01, 15): NAME(NAME) 'left'
[06](01, 15)-(01, 16): LSQB(OP) '['
[06](01, 16)-(01, 26): NAME(NAME) 'left_index'
[06](01, 26)-(01, 27): RSQB(OP) ']'
[06](01, 28)-(01, 29): LESS(OP) '<'
[06](01, 30)-(01, 35): NAME(NAME) 'right'
[06](01, 35)-(01, 36): LSQB(OP) '['
[06](01, 36)-(01, 47): NAME(NAME) 'right_index'
[06](01, 47)-(01, 48): RSQB(OP) ']'
[06](01, 48)-(01, 49): COLON(OP) ':'
[06](01, 49)-(01, 50): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 12): INDENT(INDENT) '            '
[07](01, 12)-(01, 18): NAME(NAME) 'result'
[07](01, 18)-(01, 19): DOT(OP) '.'
[07](01, 19)-(01, 25): NAME(NAME) 'append'
[07](01, 25)-(01, 26): LPAR(OP) '('
[07](01, 26)-(01, 30): NAME(NAME) 'left'
[07](01, 30)-(01, 31): LSQB(OP) '['
[07](01, 31)-(01, 41): NAME(NAME) 'left_index'
[07](01, 41)-(01, 42): RSQB(OP) ']'
[07](01, 42)-(01, 43): RPAR(OP) ')'
[07](01, 43)-(01, 44): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 12): INDENT(INDENT) '            '
[08](01, 12)-(01, 22): NAME(NAME) 'left_index'
[08](01, 23)-(01, 25): PLUSEQUAL(OP) '+='
[08](01, 26)-(01, 27): NUMBER(NUMBER) '1'
[08](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 08): INDENT(INDENT) '        '
[09](01, 08)-(01, 12): NAME(NAME) 'else'
[09](01, 12)-(01, 13): COLON(OP) ':'
[09](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 12): INDENT(INDENT) '            '
[10](01, 12)-(01, 18): NAME(NAME) 'result'
[10](01, 18)-(01, 19): DOT(OP) '.'
[10](01, 19)-(01, 25): NAME(NAME) 'append'
[10](01, 25)-(01, 26): LPAR(OP) '('
[10](01, 26)-(01, 31): NAME(NAME) 'right'
[10](01, 31)-(01, 32): LSQB(OP) '['
[10](01, 32)-(01, 43): NAME(NAME) 'right_index'
[10](01, 43)-(01, 44): RSQB(OP) ']'
[10](01, 44)-(01, 45): RPAR(OP) ')'
[10](01, 45)-(01, 46): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 12): INDENT(INDENT) '            '
[11](01, 12)-(01, 23): NAME(NAME) 'right_index'
[11](01, 24)-(01, 26): PLUSEQUAL(OP) '+='
[11](01, 27)-(01, 28): NUMBER(NUMBER) '1'
[11](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 01): NL(NL) '\n'
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 04): INDENT(INDENT) '    '
[13](01, 04)-(01, 10): NAME(NAME) 'result'
[13](01, 11)-(01, 13): PLUSEQUAL(OP) '+='
[13](01, 14)-(01, 18): NAME(NAME) 'left'
[13](01, 18)-(01, 19): LSQB(OP) '['
[13](01, 19)-(01, 29): NAME(NAME) 'left_index'
[13](01, 29)-(01, 30): COLON(OP) ':'
[13](01, 30)-(01, 31): RSQB(OP) ']'
[13](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 04): INDENT(INDENT) '    '
[14](01, 04)-(01, 10): NAME(NAME) 'result'
[14](01, 11)-(01, 13): PLUSEQUAL(OP) '+='
[14](01, 14)-(01, 19): NAME(NAME) 'right'
[14](01, 19)-(01, 20): LSQB(OP) '['
[14](01, 20)-(01, 31): NAME(NAME) 'right_index'
[14](01, 31)-(01, 32): COLON(OP) ':'
[14](01, 32)-(01, 33): RSQB(OP) ']'
[14](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 04): INDENT(INDENT) '    '
[15](01, 04)-(01, 10): NAME(NAME) 'return'
[15](01, 11)-(01, 17): NAME(NAME) 'result'
[15](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 04)-(01, 05): NL(NL) '\n'
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 03): NAME(NAME) 'def'
[17](01, 04)-(01, 14): NAME(NAME) 'merge_sort'
[17](01, 14)-(01, 15): LPAR(OP) '('
[17](01, 15)-(01, 16): NAME(NAME) 'l'
[17](01, 16)-(01, 17): RPAR(OP) ')'
[17](01, 17)-(01, 18): COLON(OP) ':'
[17](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 04): INDENT(INDENT) '    '
[18](01, 04)-(01, 46): STRING(STRING) '"""Merge sort algorithm implementation."""'
[18](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 01): NL(NL) '\n'
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 04): INDENT(INDENT) '    '
[20](01, 04)-(01, 06): NAME(NAME) 'if'
[20](01, 07)-(01, 10): NAME(NAME) 'len'
[20](01, 10)-(01, 11): LPAR(OP) '('
[20](01, 11)-(01, 12): NAME(NAME) 'l'
[20](01, 12)-(01, 13): RPAR(OP) ')'
[20](01, 14)-(01, 16): LESSEQUAL(OP) '<='
[20](01, 17)-(01, 18): NUMBER(NUMBER) '1'
[20](01, 18)-(01, 19): COLON(OP) ':'
[20](01, 21)-(01, 32): COMMENT(COMMENT) '# base case'
[20](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[20](02, 00)-(02, 00): DEDENT(DEDENT)
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 08): INDENT(INDENT) '        '
[21](01, 08)-(01, 14): NAME(NAME) 'return'
[21](01, 15)-(01, 16): NAME(NAME) 'l'
[21](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[21](02, 00)-(02, 00): DEDENT(DEDENT)
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 01): NL(NL) '\n'
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[23](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[23](01, 04)-(01, 53): COMMENT(COMMENT) '# divide array in half and merge sort recursively'
[23](01, 53)-(01, 54): NL(NL) '\n'
[23](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[24](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[24](01, 00)-(01, 04): INDENT(INDENT) '    '
[24](01, 04)-(01, 08): NAME(NAME) 'half'
[24](01, 09)-(01, 10): EQUAL(OP) '='
[24](01, 11)-(01, 14): NAME(NAME) 'len'
[24](01, 14)-(01, 15): LPAR(OP) '('
[24](01, 15)-(01, 16): NAME(NAME) 'l'
[24](01, 16)-(01, 17): RPAR(OP) ')'
[24](01, 18)-(01, 20): DOUBLESLASH(OP) '//'
[24](01, 21)-(01, 22): NUMBER(NUMBER) '2'
[24](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[24](02, 00)-(02, 00): DEDENT(DEDENT)
[24](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[25](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[25](01, 00)-(01, 04): INDENT(INDENT) '    '
[25](01, 04)-(01, 08): NAME(NAME) 'left'
[25](01, 09)-(01, 10): EQUAL(OP) '='
[25](01, 11)-(01, 21): NAME(NAME) 'merge_sort'
[25](01, 21)-(01, 22): LPAR(OP) '('
[25](01, 22)-(01, 23): NAME(NAME) 'l'
[25](01, 23)-(01, 24): LSQB(OP) '['
[25](01, 24)-(01, 25): COLON(OP) ':'
[25](01, 25)-(01, 29): NAME(NAME) 'half'
[25](01, 29)-(01, 30): RSQB(OP) ']'
[25](01, 30)-(01, 31): RPAR(OP) ')'
[25](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[25](02, 00)-(02, 00): DEDENT(DEDENT)
[25](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[26](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[26](01, 00)-(01, 04): INDENT(INDENT) '    '
[26](01, 04)-(01, 09): NAME(NAME) 'right'
[26](01, 10)-(01, 11): EQUAL(OP) '='
[26](01, 12)-(01, 22): NAME(NAME) 'merge_sort'
[26](01, 22)-(01, 23): LPAR(OP) '('
[26](01, 23)-(01, 24): NAME(NAME) 'l'
[26](01, 24)-(01, 25): LSQB(OP) '['
[26](01, 25)-(01, 29): NAME(NAME) 'half'
[26](01, 29)-(01, 30): COLON(OP) ':'
[26](01, 30)-(01, 31): RSQB(OP) ']'
[26](01, 31)-(01, 32): RPAR(OP) ')'
[26](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[26](02, 00)-(02, 00): DEDENT(DEDENT)
[26](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[27](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[27](01, 00)-(01, 01): NL(NL) '\n'
[27](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[28](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[28](01, 00)-(01, 04): INDENT(INDENT) '    '
[28](01, 04)-(01, 10): NAME(NAME) 'return'
[28](01, 11)-(01, 16): NAME(NAME) 'merge'
[28](01, 16)-(01, 17): LPAR(OP) '('
[28](01, 17)-(01, 21): NAME(NAME) 'left'
[28](01, 21)-(01, 22): COMMA(OP) ','
[28](01, 23)-(01, 28): NAME(NAME) 'right'
[28](01, 28)-(01, 29): RPAR(OP) ')'
[28](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[28](02, 00)-(02, 00): DEDENT(DEDENT)
[28](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

