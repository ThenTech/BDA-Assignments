[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 15): NAME(NAME) 'count_words'
[00](01, 15)-(01, 16): LPAR(OP) '('
[00](01, 16)-(01, 22): NAME(NAME) 'string'
[00](01, 22)-(01, 23): RPAR(OP) ')'
[00](01, 23)-(01, 24): COLON(OP) ':'
[00](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 10): NAME(NAME) 'teller'
[01](01, 11)-(01, 12): EQUAL(OP) '='
[01](01, 13)-(01, 14): NUMBER(NUMBER) '1'
[01](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 11): NAME(NAME) 'woorden'
[02](01, 12)-(01, 13): EQUAL(OP) '='
[02](01, 14)-(01, 20): NAME(NAME) 'string'
[02](01, 20)-(01, 21): DOT(OP) '.'
[02](01, 21)-(01, 26): NAME(NAME) 'split'
[02](01, 26)-(01, 27): LPAR(OP) '('
[02](01, 27)-(01, 28): RPAR(OP) ')'
[02](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 11): NAME(NAME) 'alfabet'
[03](01, 12)-(01, 13): EQUAL(OP) '='
[03](01, 14)-(01, 42): STRING(STRING) "'qwertyuiopasdfghjklzxcvbnm'"
[03](01, 42)-(01, 43): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 07): NAME(NAME) 'for'
[04](01, 08)-(01, 13): NAME(NAME) 'woord'
[04](01, 14)-(01, 16): NAME(NAME) 'in'
[04](01, 17)-(01, 24): NAME(NAME) 'woorden'
[04](01, 24)-(01, 25): COLON(OP) ':'
[04](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 08): INDENT(INDENT) '        '
[05](01, 08)-(01, 11): NAME(NAME) 'for'
[05](01, 12)-(01, 18): NAME(NAME) 'letter'
[05](01, 19)-(01, 21): NAME(NAME) 'in'
[05](01, 22)-(01, 27): NAME(NAME) 'woord'
[05](01, 27)-(01, 28): COLON(OP) ':'
[05](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 12): INDENT(INDENT) '            '
[06](01, 12)-(01, 14): NAME(NAME) 'if'
[06](01, 15)-(01, 21): NAME(NAME) 'letter'
[06](01, 22)-(01, 25): NAME(NAME) 'not'
[06](01, 26)-(01, 28): NAME(NAME) 'in'
[06](01, 29)-(01, 36): NAME(NAME) 'alfabet'
[06](01, 36)-(01, 37): COLON(OP) ':'
[06](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 16): INDENT(INDENT) '                '
[07](01, 16)-(01, 22): NAME(NAME) 'teller'
[07](01, 23)-(01, 25): PLUSEQUAL(OP) '+='
[07](01, 26)-(01, 27): NUMBER(NUMBER) '1'
[07](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 04): INDENT(INDENT) '    '
[08](01, 04)-(01, 10): NAME(NAME) 'return'
[08](01, 11)-(01, 17): NAME(NAME) 'teller'
[08](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 05): NAME(NAME) 'print'
[09](01, 05)-(01, 06): LPAR(OP) '('
[09](01, 06)-(01, 17): NAME(NAME) 'count_words'
[09](01, 17)-(01, 18): LPAR(OP) '('
[09](01, 18)-(01, 43): STRING(STRING) '"five 6 seven,eight!nine"'
[09](01, 43)-(01, 44): RPAR(OP) ')'
[09](01, 44)-(01, 45): RPAR(OP) ')'
[09](01, 45)-(01, 46): NEWLINE(NEWLINE)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

