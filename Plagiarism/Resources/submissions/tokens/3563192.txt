[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 26): NAME(NAME) 'is_palindrome_sentence'
[00](01, 26)-(01, 27): LPAR(OP) '('
[00](01, 27)-(01, 35): NAME(NAME) 'sentence'
[00](01, 35)-(01, 36): RPAR(OP) ')'
[00](01, 36)-(01, 37): COLON(OP) ':'
[00](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 18): NAME(NAME) 'split_sentence'
[01](01, 19)-(01, 20): EQUAL(OP) '='
[01](01, 21)-(01, 23): STRING(STRING) '""'
[01](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 07): NAME(NAME) 'for'
[02](01, 08)-(01, 09): NAME(NAME) 'i'
[02](01, 10)-(01, 12): NAME(NAME) 'in'
[02](01, 13)-(01, 21): NAME(NAME) 'sentence'
[02](01, 21)-(01, 22): COLON(OP) ':'
[02](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 08): INDENT(INDENT) '        '
[03](01, 08)-(01, 10): NAME(NAME) 'if'
[03](01, 11)-(01, 12): NAME(NAME) 'i'
[03](01, 13)-(01, 15): NAME(NAME) 'in'
[03](01, 16)-(01, 70): STRING(STRING) '"azertyuiopqsdfghjklmwxcvbnAZERTYUIOPQSDFGHJKLMWXCVBN"'
[03](01, 70)-(01, 71): COLON(OP) ':'
[03](01, 71)-(01, 72): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 12): INDENT(INDENT) '            '
[04](01, 12)-(01, 26): NAME(NAME) 'split_sentence'
[04](01, 27)-(01, 29): PLUSEQUAL(OP) '+='
[04](01, 30)-(01, 31): NAME(NAME) 'i'
[04](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 01): NL(NL) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 04): INDENT(INDENT) '    '
[06](01, 04)-(01, 18): NAME(NAME) 'lower_sentence'
[06](01, 19)-(01, 20): EQUAL(OP) '='
[06](01, 21)-(01, 23): STRING(STRING) '""'
[06](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 04): INDENT(INDENT) '    '
[07](01, 04)-(01, 07): NAME(NAME) 'for'
[07](01, 08)-(01, 09): NAME(NAME) 'i'
[07](01, 10)-(01, 12): NAME(NAME) 'in'
[07](01, 13)-(01, 27): NAME(NAME) 'split_sentence'
[07](01, 27)-(01, 28): COLON(OP) ':'
[07](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 08): INDENT(INDENT) '        '
[08](01, 08)-(01, 10): NAME(NAME) 'if'
[08](01, 11)-(01, 12): NAME(NAME) 'i'
[08](01, 13)-(01, 15): GREATEREQUAL(OP) '>='
[08](01, 16)-(01, 19): STRING(STRING) '"A"'
[08](01, 20)-(01, 23): NAME(NAME) 'and'
[08](01, 24)-(01, 25): NAME(NAME) 'i'
[08](01, 26)-(01, 28): LESSEQUAL(OP) '<='
[08](01, 29)-(01, 32): STRING(STRING) '"Z"'
[08](01, 32)-(01, 33): COLON(OP) ':'
[08](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 12): INDENT(INDENT) '            '
[09](01, 12)-(01, 26): NAME(NAME) 'lower_sentence'
[09](01, 27)-(01, 29): PLUSEQUAL(OP) '+='
[09](01, 30)-(01, 33): NAME(NAME) 'chr'
[09](01, 33)-(01, 34): LPAR(OP) '('
[09](01, 34)-(01, 37): NAME(NAME) 'ord'
[09](01, 37)-(01, 38): LPAR(OP) '('
[09](01, 38)-(01, 39): NAME(NAME) 'i'
[09](01, 39)-(01, 40): RPAR(OP) ')'
[09](01, 41)-(01, 42): PLUS(OP) '+'
[09](01, 43)-(01, 45): NUMBER(NUMBER) '32'
[09](01, 45)-(01, 46): RPAR(OP) ')'
[09](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 08): INDENT(INDENT) '        '
[10](01, 08)-(01, 12): NAME(NAME) 'else'
[10](01, 12)-(01, 13): COLON(OP) ':'
[10](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 12): INDENT(INDENT) '            '
[11](01, 12)-(01, 26): NAME(NAME) 'lower_sentence'
[11](01, 27)-(01, 29): PLUSEQUAL(OP) '+='
[11](01, 30)-(01, 31): NAME(NAME) 'i'
[11](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 01): NL(NL) '\n'
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 04): INDENT(INDENT) '    '
[13](01, 04)-(01, 11): NAME(NAME) 'reverse'
[13](01, 12)-(01, 13): EQUAL(OP) '='
[13](01, 14)-(01, 16): STRING(STRING) '""'
[13](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 01): NL(NL) '\n'
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 04): INDENT(INDENT) '    '
[15](01, 04)-(01, 07): NAME(NAME) 'for'
[15](01, 08)-(01, 09): NAME(NAME) 'i'
[15](01, 10)-(01, 12): NAME(NAME) 'in'
[15](01, 13)-(01, 18): NAME(NAME) 'range'
[15](01, 18)-(01, 19): LPAR(OP) '('
[15](01, 19)-(01, 22): NAME(NAME) 'len'
[15](01, 22)-(01, 23): LPAR(OP) '('
[15](01, 23)-(01, 37): NAME(NAME) 'lower_sentence'
[15](01, 37)-(01, 38): RPAR(OP) ')'
[15](01, 38)-(01, 39): RPAR(OP) ')'
[15](01, 39)-(01, 40): COLON(OP) ':'
[15](01, 40)-(01, 41): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 08): INDENT(INDENT) '        '
[16](01, 08)-(01, 15): NAME(NAME) 'reverse'
[16](01, 16)-(01, 18): PLUSEQUAL(OP) '+='
[16](01, 19)-(01, 33): NAME(NAME) 'lower_sentence'
[16](01, 33)-(01, 34): LSQB(OP) '['
[16](01, 34)-(01, 37): NAME(NAME) 'len'
[16](01, 37)-(01, 38): LPAR(OP) '('
[16](01, 38)-(01, 52): NAME(NAME) 'lower_sentence'
[16](01, 52)-(01, 53): RPAR(OP) ')'
[16](01, 54)-(01, 55): MINUS(OP) '-'
[16](01, 56)-(01, 57): NUMBER(NUMBER) '1'
[16](01, 58)-(01, 59): MINUS(OP) '-'
[16](01, 60)-(01, 61): NAME(NAME) 'i'
[16](01, 61)-(01, 62): RSQB(OP) ']'
[16](01, 62)-(01, 63): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 01): NL(NL) '\n'
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 03): INDENT(INDENT) '   '
[18](01, 03)-(01, 09): NAME(NAME) 'return'
[18](01, 10)-(01, 14): NAME(NAME) 'bool'
[18](01, 14)-(01, 15): LPAR(OP) '('
[18](01, 15)-(01, 22): NAME(NAME) 'reverse'
[18](01, 23)-(01, 25): EQEQUAL(OP) '=='
[18](01, 26)-(01, 40): NAME(NAME) 'lower_sentence'
[18](01, 40)-(01, 41): RPAR(OP) ')'
[18](01, 41)-(01, 42): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

