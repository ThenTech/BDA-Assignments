[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 59): COMMENT(COMMENT) '# is_palindrome_sentence("A man, a plan, a canal: Panama.")'
[00](01, 59)-(01, 60): NL(NL) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 07): NAME(NAME) 'alfabet'
[01](01, 08)-(01, 09): EQUAL(OP) '='
[01](01, 10)-(01, 38): STRING(STRING) '"azertyuiopqsdfghjklmnbvcxw"'
[01](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 03): NAME(NAME) 'def'
[02](01, 04)-(01, 15): NAME(NAME) 'split_lower'
[02](01, 15)-(01, 16): LPAR(OP) '('
[02](01, 16)-(01, 24): NAME(NAME) 'sentence'
[02](01, 24)-(01, 25): RPAR(OP) ')'
[02](01, 25)-(01, 26): COLON(OP) ':'
[02](01, 26)-(01, 27): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 12): NAME(NAME) 'sentence'
[03](01, 13)-(01, 14): EQUAL(OP) '='
[03](01, 15)-(01, 23): NAME(NAME) 'sentence'
[03](01, 23)-(01, 24): DOT(OP) '.'
[03](01, 24)-(01, 29): NAME(NAME) 'lower'
[03](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 12): NAME(NAME) 'sentence'
[04](01, 13)-(01, 14): EQUAL(OP) '='
[04](01, 15)-(01, 23): NAME(NAME) 'sentence'
[04](01, 23)-(01, 24): DOT(OP) '.'
[04](01, 24)-(01, 29): NAME(NAME) 'split'
[04](01, 29)-(01, 30): LPAR(OP) '('
[04](01, 30)-(01, 33): STRING(STRING) '":"'
[04](01, 33)-(01, 34): RPAR(OP) ')'
[04](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 10): NAME(NAME) 'return'
[05](01, 11)-(01, 19): NAME(NAME) 'sentence'
[05](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 01): NL(NL) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 03): NAME(NAME) 'def'
[07](01, 04)-(01, 17): NAME(NAME) 'nieuwe_string'
[07](01, 17)-(01, 18): LPAR(OP) '('
[07](01, 18)-(01, 23): NAME(NAME) 'lijst'
[07](01, 23)-(01, 24): RPAR(OP) ')'
[07](01, 24)-(01, 25): COLON(OP) ':'
[07](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 04): INDENT(INDENT) '    '
[08](01, 04)-(01, 17): NAME(NAME) 'nieuwe_string'
[08](01, 18)-(01, 19): EQUAL(OP) '='
[08](01, 20)-(01, 22): STRING(STRING) '""'
[08](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 07): NAME(NAME) 'for'
[09](01, 08)-(01, 10): NAME(NAME) 'el'
[09](01, 11)-(01, 13): NAME(NAME) 'in'
[09](01, 14)-(01, 19): NAME(NAME) 'lijst'
[09](01, 19)-(01, 20): LSQB(OP) '['
[09](01, 20)-(01, 21): NUMBER(NUMBER) '0'
[09](01, 21)-(01, 22): RSQB(OP) ']'
[09](01, 22)-(01, 23): COLON(OP) ':'
[09](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 08): INDENT(INDENT) '        '
[10](01, 08)-(01, 10): NAME(NAME) 'if'
[10](01, 11)-(01, 13): NAME(NAME) 'el'
[10](01, 14)-(01, 16): NAME(NAME) 'in'
[10](01, 17)-(01, 24): NAME(NAME) 'alfabet'
[10](01, 24)-(01, 25): COLON(OP) ':'
[10](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 12): INDENT(INDENT) '            '
[11](01, 12)-(01, 25): NAME(NAME) 'nieuwe_string'
[11](01, 26)-(01, 27): PLUS(OP) '+'
[11](01, 28)-(01, 41): NAME(NAME) 'nieuwe_string'
[11](01, 42)-(01, 43): PLUS(OP) '+'
[11](01, 44)-(01, 46): NAME(NAME) 'el'
[11](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 04): INDENT(INDENT) '    '
[12](01, 04)-(01, 10): NAME(NAME) 'return'
[12](01, 11)-(01, 24): NAME(NAME) 'nieuwe_string'
[12](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 01): NL(NL) '\n'
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 03): NAME(NAME) 'def'
[14](01, 04)-(01, 07): NAME(NAME) 'vgl'
[14](01, 07)-(01, 08): LPAR(OP) '('
[14](01, 08)-(01, 14): NAME(NAME) 'eerste'
[14](01, 14)-(01, 15): COMMA(OP) ','
[14](01, 16)-(01, 22): NAME(NAME) 'tweede'
[14](01, 22)-(01, 23): RPAR(OP) ')'
[14](01, 23)-(01, 24): COLON(OP) ':'
[14](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 04): INDENT(INDENT) '    '
[15](01, 04)-(01, 06): NAME(NAME) 'if'
[15](01, 07)-(01, 13): NAME(NAME) 'tweede'
[15](01, 14)-(01, 16): NAME(NAME) 'in'
[15](01, 17)-(01, 23): NAME(NAME) 'eerste'
[15](01, 23)-(01, 24): COLON(OP) ':'
[15](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 08): INDENT(INDENT) '        '
[16](01, 08)-(01, 14): NAME(NAME) 'return'
[16](01, 15)-(01, 19): NAME(NAME) 'True'
[16](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 04): INDENT(INDENT) '    '
[17](01, 04)-(01, 08): NAME(NAME) 'elif'
[17](01, 09)-(01, 15): NAME(NAME) 'tweede'
[17](01, 16)-(01, 19): NAME(NAME) 'not'
[17](01, 20)-(01, 22): NAME(NAME) 'in'
[17](01, 23)-(01, 29): NAME(NAME) 'eerste'
[17](01, 29)-(01, 30): COLON(OP) ':'
[17](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 08): INDENT(INDENT) '        '
[18](01, 08)-(01, 14): NAME(NAME) 'mirror'
[18](01, 15)-(01, 16): EQUAL(OP) '='
[18](01, 16)-(01, 18): STRING(STRING) '""'
[18](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 08): INDENT(INDENT) '        '
[19](01, 08)-(01, 11): NAME(NAME) 'for'
[19](01, 12)-(01, 14): NAME(NAME) 'el'
[19](01, 15)-(01, 17): NAME(NAME) 'in'
[19](01, 18)-(01, 23): NAME(NAME) 'range'
[19](01, 23)-(01, 24): LPAR(OP) '('
[19](01, 24)-(01, 27): NAME(NAME) 'len'
[19](01, 27)-(01, 28): LPAR(OP) '('
[19](01, 28)-(01, 34): NAME(NAME) 'tweede'
[19](01, 34)-(01, 35): RPAR(OP) ')'
[19](01, 35)-(01, 36): RPAR(OP) ')'
[19](01, 36)-(01, 37): COLON(OP) ':'
[19](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): DEDENT(DEDENT)
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 12): INDENT(INDENT) '            '
[20](01, 12)-(01, 18): NAME(NAME) 'mirror'
[20](01, 19)-(01, 20): EQUAL(OP) '='
[20](01, 21)-(01, 27): NAME(NAME) 'mirror'
[20](01, 28)-(01, 29): PLUS(OP) '+'
[20](01, 30)-(01, 36): NAME(NAME) 'tweede'
[20](01, 36)-(01, 37): LSQB(OP) '['
[20](01, 37)-(01, 40): NAME(NAME) 'len'
[20](01, 40)-(01, 41): LPAR(OP) '('
[20](01, 41)-(01, 47): NAME(NAME) 'tweede'
[20](01, 47)-(01, 48): RPAR(OP) ')'
[20](01, 48)-(01, 49): MINUS(OP) '-'
[20](01, 49)-(01, 50): NUMBER(NUMBER) '1'
[20](01, 50)-(01, 51): MINUS(OP) '-'
[20](01, 51)-(01, 53): NAME(NAME) 'el'
[20](01, 53)-(01, 54): RSQB(OP) ']'
[20](01, 54)-(01, 55): NEWLINE(NEWLINE) '\n'
[20](02, 00)-(02, 00): DEDENT(DEDENT)
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 08): INDENT(INDENT) '        '
[21](01, 08)-(01, 10): NAME(NAME) 'if'
[21](01, 11)-(01, 17): NAME(NAME) 'mirror'
[21](01, 18)-(01, 20): NAME(NAME) 'in'
[21](01, 21)-(01, 27): NAME(NAME) 'eerste'
[21](01, 27)-(01, 28): COLON(OP) ':'
[21](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[21](02, 00)-(02, 00): DEDENT(DEDENT)
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 12): INDENT(INDENT) '            '
[22](01, 12)-(01, 18): NAME(NAME) 'return'
[22](01, 19)-(01, 23): NAME(NAME) 'True'
[22](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[22](02, 00)-(02, 00): DEDENT(DEDENT)
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[23](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[23](01, 00)-(01, 04): INDENT(INDENT) '    '
[23](01, 04)-(01, 08): NAME(NAME) 'else'
[23](01, 08)-(01, 09): COLON(OP) ':'
[23](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[23](02, 00)-(02, 00): DEDENT(DEDENT)
[23](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[24](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[24](01, 00)-(01, 08): INDENT(INDENT) '        '
[24](01, 08)-(01, 14): NAME(NAME) 'return'
[24](01, 15)-(01, 20): NAME(NAME) 'False'
[24](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[24](02, 00)-(02, 00): DEDENT(DEDENT)
[24](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[25](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[25](01, 00)-(01, 01): NL(NL) '\n'
[25](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[26](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[26](01, 00)-(01, 01): NL(NL) '\n'
[26](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[27](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[27](01, 00)-(01, 03): NAME(NAME) 'def'
[27](01, 04)-(01, 26): NAME(NAME) 'is_palindrome_sentence'
[27](01, 26)-(01, 27): LPAR(OP) '('
[27](01, 27)-(01, 35): NAME(NAME) 'sentence'
[27](01, 35)-(01, 36): RPAR(OP) ')'
[27](01, 36)-(01, 37): COLON(OP) ':'
[27](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[27](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[28](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[28](01, 00)-(01, 04): INDENT(INDENT) '    '
[28](01, 04)-(01, 22): NAME(NAME) 'sentence_aangepast'
[28](01, 23)-(01, 24): EQUAL(OP) '='
[28](01, 25)-(01, 36): NAME(NAME) 'split_lower'
[28](01, 36)-(01, 37): LPAR(OP) '('
[28](01, 37)-(01, 45): NAME(NAME) 'sentence'
[28](01, 45)-(01, 46): RPAR(OP) ')'
[28](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[28](02, 00)-(02, 00): DEDENT(DEDENT)
[28](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[29](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[29](01, 00)-(01, 04): INDENT(INDENT) '    '
[29](01, 04)-(01, 17): NAME(NAME) 'nieuwe_string'
[29](01, 18)-(01, 19): EQUAL(OP) '='
[29](01, 20)-(01, 33): NAME(NAME) 'nieuwe_string'
[29](01, 33)-(01, 34): LPAR(OP) '('
[29](01, 34)-(01, 52): NAME(NAME) 'sentence_aangepast'
[29](01, 52)-(01, 53): RPAR(OP) ')'
[29](01, 53)-(01, 54): NEWLINE(NEWLINE) '\n'
[29](02, 00)-(02, 00): DEDENT(DEDENT)
[29](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[30](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[30](01, 00)-(01, 04): INDENT(INDENT) '    '
[30](01, 04)-(01, 10): NAME(NAME) 'return'
[30](01, 11)-(01, 14): NAME(NAME) 'vgl'
[30](01, 14)-(01, 15): LPAR(OP) '('
[30](01, 15)-(01, 28): NAME(NAME) 'nieuwe_string'
[30](01, 28)-(01, 29): COMMA(OP) ','
[30](01, 30)-(01, 38): NAME(NAME) 'sentence'
[30](01, 38)-(01, 39): LSQB(OP) '['
[30](01, 39)-(01, 40): NUMBER(NUMBER) '1'
[30](01, 40)-(01, 41): RSQB(OP) ']'
[30](01, 41)-(01, 42): RPAR(OP) ')'
[30](01, 42)-(01, 43): NEWLINE(NEWLINE)
[30](02, 00)-(02, 00): DEDENT(DEDENT)
[30](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

