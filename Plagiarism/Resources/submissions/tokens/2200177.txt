[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 17): NAME(NAME) 'words_lengths'
[00](01, 17)-(01, 18): LPAR(OP) '('
[00](01, 18)-(01, 26): NAME(NAME) 'sentence'
[00](01, 26)-(01, 27): RPAR(OP) ')'
[00](01, 27)-(01, 28): COLON(OP) ':'
[00](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 10): NAME(NAME) 'woordd'
[01](01, 11)-(01, 12): EQUAL(OP) '='
[01](01, 13)-(01, 15): STRING(STRING) '""'
[01](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 10): NAME(NAME) 'result'
[02](01, 11)-(01, 12): EQUAL(OP) '='
[02](01, 13)-(01, 15): STRING(STRING) '""'
[02](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 07): NAME(NAME) 'for'
[03](01, 08)-(01, 09): NAME(NAME) 'i'
[03](01, 10)-(01, 12): NAME(NAME) 'in'
[03](01, 13)-(01, 18): NAME(NAME) 'range'
[03](01, 18)-(01, 19): LPAR(OP) '('
[03](01, 19)-(01, 22): NAME(NAME) 'len'
[03](01, 22)-(01, 23): LPAR(OP) '('
[03](01, 23)-(01, 31): NAME(NAME) 'sentence'
[03](01, 31)-(01, 32): RPAR(OP) ')'
[03](01, 32)-(01, 33): RPAR(OP) ')'
[03](01, 33)-(01, 34): COLON(OP) ':'
[03](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 08): INDENT(INDENT) '        '
[04](01, 08)-(01, 10): NAME(NAME) 'if'
[04](01, 11)-(01, 19): NAME(NAME) 'sentence'
[04](01, 19)-(01, 20): LSQB(OP) '['
[04](01, 20)-(01, 21): NAME(NAME) 'i'
[04](01, 21)-(01, 22): RSQB(OP) ']'
[04](01, 23)-(01, 25): NAME(NAME) 'in'
[04](01, 26)-(01, 80): STRING(STRING) '"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"'
[04](01, 80)-(01, 81): COLON(OP) ':'
[04](01, 81)-(01, 82): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 12): INDENT(INDENT) '            '
[05](01, 12)-(01, 18): NAME(NAME) 'woordd'
[05](01, 19)-(01, 21): PLUSEQUAL(OP) '+='
[05](01, 22)-(01, 30): NAME(NAME) 'sentence'
[05](01, 30)-(01, 31): LSQB(OP) '['
[05](01, 31)-(01, 32): NAME(NAME) 'i'
[05](01, 32)-(01, 33): RSQB(OP) ']'
[05](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 08): INDENT(INDENT) '        '
[06](01, 08)-(01, 10): NAME(NAME) 'if'
[06](01, 11)-(01, 19): NAME(NAME) 'sentence'
[06](01, 19)-(01, 20): LSQB(OP) '['
[06](01, 20)-(01, 21): NAME(NAME) 'i'
[06](01, 21)-(01, 22): RSQB(OP) ']'
[06](01, 23)-(01, 26): NAME(NAME) 'not'
[06](01, 27)-(01, 29): NAME(NAME) 'in'
[06](01, 30)-(01, 84): STRING(STRING) '"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"'
[06](01, 85)-(01, 87): NAME(NAME) 'or'
[06](01, 88)-(01, 89): NAME(NAME) 'i'
[06](01, 90)-(01, 92): EQEQUAL(OP) '=='
[06](01, 93)-(01, 96): NAME(NAME) 'len'
[06](01, 96)-(01, 97): LPAR(OP) '('
[06](01, 97)-(01, 105): NAME(NAME) 'sentence'
[06](01, 105)-(01, 106): RPAR(OP) ')'
[06](01, 106)-(01, 107): MINUS(OP) '-'
[06](01, 107)-(01, 108): NUMBER(NUMBER) '1'
[06](01, 108)-(01, 109): COLON(OP) ':'
[06](01, 109)-(01, 110): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 12): INDENT(INDENT) '            '
[07](01, 12)-(01, 14): NAME(NAME) 'if'
[07](01, 15)-(01, 21): NAME(NAME) 'woordd'
[07](01, 22)-(01, 24): EQEQUAL(OP) '=='
[07](01, 25)-(01, 27): STRING(STRING) '""'
[07](01, 27)-(01, 28): COLON(OP) ':'
[07](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 16): INDENT(INDENT) '                '
[08](01, 16)-(01, 24): NAME(NAME) 'continue'
[08](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 12): INDENT(INDENT) '            '
[09](01, 12)-(01, 18): NAME(NAME) 'woordd'
[09](01, 19)-(01, 21): PLUSEQUAL(OP) '+='
[09](01, 22)-(01, 25): STRING(STRING) '" "'
[09](01, 26)-(01, 27): PLUS(OP) '+'
[09](01, 28)-(01, 31): NAME(NAME) 'str'
[09](01, 31)-(01, 32): LPAR(OP) '('
[09](01, 32)-(01, 35): NAME(NAME) 'len'
[09](01, 35)-(01, 36): LPAR(OP) '('
[09](01, 36)-(01, 42): NAME(NAME) 'woordd'
[09](01, 42)-(01, 43): RPAR(OP) ')'
[09](01, 43)-(01, 44): RPAR(OP) ')'
[09](01, 44)-(01, 45): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 12): INDENT(INDENT) '            '
[10](01, 12)-(01, 18): NAME(NAME) 'result'
[10](01, 19)-(01, 21): PLUSEQUAL(OP) '+='
[10](01, 22)-(01, 28): NAME(NAME) 'woordd'
[10](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 12): INDENT(INDENT) '            '
[11](01, 12)-(01, 18): NAME(NAME) 'woordd'
[11](01, 19)-(01, 20): EQUAL(OP) '='
[11](01, 21)-(01, 23): STRING(STRING) '""'
[11](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 04): INDENT(INDENT) '    '
[12](01, 04)-(01, 10): NAME(NAME) 'return'
[12](01, 11)-(01, 17): NAME(NAME) 'result'
[12](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

