[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 24): NAME(NAME) 'convert_to_uppercase'
[00](01, 24)-(01, 25): LPAR(OP) '('
[00](01, 25)-(01, 31): NAME(NAME) 'string'
[00](01, 31)-(01, 32): RPAR(OP) ')'
[00](01, 32)-(01, 33): COLON(OP) ':'
[00](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 17): NAME(NAME) 'return_string'
[01](01, 18)-(01, 19): EQUAL(OP) '='
[01](01, 20)-(01, 22): STRING(STRING) '""'
[01](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 10): NAME(NAME) 'offset'
[02](01, 11)-(01, 12): EQUAL(OP) '='
[02](01, 13)-(01, 16): NAME(NAME) 'ord'
[02](01, 16)-(01, 17): LPAR(OP) '('
[02](01, 17)-(01, 20): STRING(STRING) '"a"'
[02](01, 20)-(01, 21): RPAR(OP) ')'
[02](01, 22)-(01, 23): MINUS(OP) '-'
[02](01, 24)-(01, 27): NAME(NAME) 'ord'
[02](01, 27)-(01, 28): LPAR(OP) '('
[02](01, 28)-(01, 31): STRING(STRING) '"A"'
[02](01, 31)-(01, 32): RPAR(OP) ')'
[02](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 01): NL(NL) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 07): NAME(NAME) 'for'
[04](01, 08)-(01, 12): NAME(NAME) 'char'
[04](01, 13)-(01, 15): NAME(NAME) 'in'
[04](01, 16)-(01, 22): NAME(NAME) 'string'
[04](01, 22)-(01, 23): COLON(OP) ':'
[04](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 08): INDENT(INDENT) '        '
[05](01, 08)-(01, 10): NAME(NAME) 'if'
[05](01, 11)-(01, 14): STRING(STRING) '"a"'
[05](01, 15)-(01, 17): LESSEQUAL(OP) '<='
[05](01, 18)-(01, 22): NAME(NAME) 'char'
[05](01, 23)-(01, 25): LESSEQUAL(OP) '<='
[05](01, 26)-(01, 29): STRING(STRING) '"z"'
[05](01, 29)-(01, 30): COLON(OP) ':'
[05](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 12): INDENT(INDENT) '            '
[06](01, 12)-(01, 25): NAME(NAME) 'return_string'
[06](01, 26)-(01, 28): PLUSEQUAL(OP) '+='
[06](01, 29)-(01, 32): NAME(NAME) 'chr'
[06](01, 32)-(01, 33): LPAR(OP) '('
[06](01, 33)-(01, 36): NAME(NAME) 'ord'
[06](01, 36)-(01, 37): LPAR(OP) '('
[06](01, 37)-(01, 41): NAME(NAME) 'char'
[06](01, 41)-(01, 42): RPAR(OP) ')'
[06](01, 43)-(01, 44): PLUS(OP) '+'
[06](01, 45)-(01, 51): NAME(NAME) 'offset'
[06](01, 51)-(01, 52): RPAR(OP) ')'
[06](01, 52)-(01, 53): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 08): INDENT(INDENT) '        '
[07](01, 08)-(01, 12): NAME(NAME) 'else'
[07](01, 12)-(01, 13): COLON(OP) ':'
[07](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 12): INDENT(INDENT) '            '
[08](01, 12)-(01, 25): NAME(NAME) 'return_string'
[08](01, 26)-(01, 28): PLUSEQUAL(OP) '+='
[08](01, 29)-(01, 33): NAME(NAME) 'char'
[08](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 04)-(01, 05): NL(NL) '\n'
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 04): INDENT(INDENT) '    '
[10](01, 04)-(01, 10): NAME(NAME) 'return'
[10](01, 11)-(01, 24): NAME(NAME) 'return_string'
[10](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

