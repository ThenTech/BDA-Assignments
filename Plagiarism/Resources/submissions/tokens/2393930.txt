[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 18): NAME(NAME) 'cleanup_spaces'
[00](01, 18)-(01, 19): LPAR(OP) '('
[00](01, 19)-(01, 20): NAME(NAME) 's'
[00](01, 20)-(01, 21): RPAR(OP) ')'
[00](01, 21)-(01, 22): COLON(OP) ':'
[00](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 01): NL(NL) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 07): NAME(NAME) 'for'
[02](01, 08)-(01, 09): NAME(NAME) 'i'
[02](01, 10)-(01, 12): NAME(NAME) 'in'
[02](01, 13)-(01, 18): NAME(NAME) 'range'
[02](01, 18)-(01, 19): LPAR(OP) '('
[02](01, 19)-(01, 20): NUMBER(NUMBER) '1'
[02](01, 20)-(01, 21): COMMA(OP) ','
[02](01, 21)-(01, 24): NAME(NAME) 'len'
[02](01, 24)-(01, 25): LPAR(OP) '('
[02](01, 25)-(01, 26): NAME(NAME) 's'
[02](01, 26)-(01, 27): RPAR(OP) ')'
[02](01, 27)-(01, 28): MINUS(OP) '-'
[02](01, 28)-(01, 29): NUMBER(NUMBER) '1'
[02](01, 29)-(01, 30): RPAR(OP) ')'
[02](01, 30)-(01, 31): COLON(OP) ':'
[02](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 08): INDENT(INDENT) '        '
[03](01, 08)-(01, 09): NAME(NAME) 'k'
[03](01, 09)-(01, 10): EQUAL(OP) '='
[03](01, 10)-(01, 17): NAME(NAME) 'functie'
[03](01, 18)-(01, 19): LPAR(OP) '('
[03](01, 19)-(01, 20): NAME(NAME) 'i'
[03](01, 20)-(01, 21): COMMA(OP) ','
[03](01, 21)-(01, 22): NAME(NAME) 's'
[03](01, 22)-(01, 23): RPAR(OP) ')'
[03](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 08): INDENT(INDENT) '        '
[04](01, 08)-(01, 10): NAME(NAME) 'if'
[04](01, 11)-(01, 12): NAME(NAME) 'k'
[04](01, 13)-(01, 15): NOTEQUAL(OP) '!='
[04](01, 16)-(01, 20): NAME(NAME) 'None'
[04](01, 20)-(01, 21): COLON(OP) ':'
[04](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 12): INDENT(INDENT) '            '
[05](01, 12)-(01, 17): NAME(NAME) 'print'
[05](01, 17)-(01, 18): LPAR(OP) '('
[05](01, 18)-(01, 19): NAME(NAME) 'k'
[05](01, 19)-(01, 20): COMMA(OP) ','
[05](01, 20)-(01, 23): NAME(NAME) 'end'
[05](01, 23)-(01, 24): EQUAL(OP) '='
[05](01, 24)-(01, 26): STRING(STRING) '""'
[05](01, 26)-(01, 27): RPAR(OP) ')'
[05](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 03): NAME(NAME) 'def'
[06](01, 04)-(01, 11): NAME(NAME) 'functie'
[06](01, 11)-(01, 12): LPAR(OP) '('
[06](01, 12)-(01, 13): NAME(NAME) 'i'
[06](01, 13)-(01, 14): COMMA(OP) ','
[06](01, 14)-(01, 15): NAME(NAME) 's'
[06](01, 15)-(01, 16): RPAR(OP) ')'
[06](01, 16)-(01, 17): COLON(OP) ':'
[06](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 04): INDENT(INDENT) '    '
[07](01, 04)-(01, 06): NAME(NAME) 'if'
[07](01, 08)-(01, 09): NAME(NAME) 's'
[07](01, 09)-(01, 10): LSQB(OP) '['
[07](01, 10)-(01, 11): NAME(NAME) 'i'
[07](01, 11)-(01, 12): RSQB(OP) ']'
[07](01, 13)-(01, 15): NOTEQUAL(OP) '!='
[07](01, 16)-(01, 19): STRING(STRING) '" "'
[07](01, 19)-(01, 20): COLON(OP) ':'
[07](01, 20)-(01, 21): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 08): INDENT(INDENT) '        '
[08](01, 08)-(01, 14): NAME(NAME) 'return'
[08](01, 15)-(01, 16): NAME(NAME) 's'
[08](01, 16)-(01, 17): LSQB(OP) '['
[08](01, 17)-(01, 18): NAME(NAME) 'i'
[08](01, 18)-(01, 19): RSQB(OP) ']'
[08](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 08): NAME(NAME) 'elif'
[09](01, 09)-(01, 10): NAME(NAME) 's'
[09](01, 10)-(01, 11): LSQB(OP) '['
[09](01, 11)-(01, 12): NAME(NAME) 'i'
[09](01, 12)-(01, 13): MINUS(OP) '-'
[09](01, 13)-(01, 14): NUMBER(NUMBER) '1'
[09](01, 14)-(01, 15): RSQB(OP) ']'
[09](01, 16)-(01, 18): NOTEQUAL(OP) '!='
[09](01, 19)-(01, 22): STRING(STRING) '" "'
[09](01, 23)-(01, 26): NAME(NAME) 'and'
[09](01, 27)-(01, 28): NAME(NAME) 's'
[09](01, 28)-(01, 29): LSQB(OP) '['
[09](01, 29)-(01, 30): NAME(NAME) 'i'
[09](01, 30)-(01, 31): PLUS(OP) '+'
[09](01, 31)-(01, 32): NUMBER(NUMBER) '1'
[09](01, 32)-(01, 33): RSQB(OP) ']'
[09](01, 34)-(01, 36): NOTEQUAL(OP) '!='
[09](01, 36)-(01, 39): STRING(STRING) '" "'
[09](01, 40)-(01, 43): NAME(NAME) 'and'
[09](01, 44)-(01, 45): NAME(NAME) 's'
[09](01, 45)-(01, 46): LSQB(OP) '['
[09](01, 46)-(01, 47): NAME(NAME) 'i'
[09](01, 47)-(01, 48): RSQB(OP) ']'
[09](01, 48)-(01, 50): EQEQUAL(OP) '=='
[09](01, 50)-(01, 53): STRING(STRING) '" "'
[09](01, 53)-(01, 54): COLON(OP) ':'
[09](01, 54)-(01, 55): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 08): INDENT(INDENT) '        '
[10](01, 08)-(01, 14): NAME(NAME) 'return'
[10](01, 15)-(01, 16): NAME(NAME) 's'
[10](01, 16)-(01, 17): LSQB(OP) '['
[10](01, 17)-(01, 18): NAME(NAME) 'i'
[10](01, 18)-(01, 19): RSQB(OP) ']'
[10](01, 19)-(01, 20): NEWLINE(NEWLINE)
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

