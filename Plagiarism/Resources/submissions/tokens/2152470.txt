[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 08): NAME(NAME) 'alphabet'
[00](01, 09)-(01, 10): EQUAL(OP) '='
[00](01, 11)-(01, 39): STRING(STRING) '"abcdefghijklmnopqrstuvwxyz"'
[00](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 06): NAME(NAME) 'input1'
[01](01, 07)-(01, 08): EQUAL(OP) '='
[01](01, 09)-(01, 14): NAME(NAME) 'input'
[01](01, 14)-(01, 15): LPAR(OP) '('
[01](01, 15)-(01, 16): RPAR(OP) ')'
[01](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 06): NAME(NAME) 'input2'
[02](01, 07)-(01, 08): EQUAL(OP) '='
[02](01, 09)-(01, 14): NAME(NAME) 'input'
[02](01, 14)-(01, 15): LPAR(OP) '('
[02](01, 15)-(01, 16): RPAR(OP) ')'
[02](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 08): NAME(NAME) 'anagram1'
[03](01, 10)-(01, 11): EQUAL(OP) '='
[03](01, 12)-(01, 14): STRING(STRING) "''"
[03](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 08): NAME(NAME) 'anagram2'
[04](01, 09)-(01, 10): EQUAL(OP) '='
[04](01, 11)-(01, 13): STRING(STRING) "''"
[04](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 01): NL(NL) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 03): NAME(NAME) 'for'
[06](01, 04)-(01, 05): NAME(NAME) 'i'
[06](01, 06)-(01, 08): NAME(NAME) 'in'
[06](01, 09)-(01, 14): NAME(NAME) 'range'
[06](01, 14)-(01, 15): LPAR(OP) '('
[06](01, 15)-(01, 18): NAME(NAME) 'len'
[06](01, 18)-(01, 19): LPAR(OP) '('
[06](01, 19)-(01, 27): NAME(NAME) 'alphabet'
[06](01, 27)-(01, 28): RPAR(OP) ')'
[06](01, 28)-(01, 29): RPAR(OP) ')'
[06](01, 29)-(01, 30): COLON(OP) ':'
[06](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 04): INDENT(INDENT) '    '
[07](01, 04)-(01, 07): NAME(NAME) 'som'
[07](01, 08)-(01, 09): EQUAL(OP) '='
[07](01, 10)-(01, 11): NUMBER(NUMBER) '0'
[07](01, 11)-(01, 12): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 04): INDENT(INDENT) '    '
[08](01, 04)-(01, 07): NAME(NAME) 'for'
[08](01, 08)-(01, 09): NAME(NAME) 'j'
[08](01, 10)-(01, 12): NAME(NAME) 'in'
[08](01, 13)-(01, 18): NAME(NAME) 'range'
[08](01, 18)-(01, 19): LPAR(OP) '('
[08](01, 19)-(01, 22): NAME(NAME) 'len'
[08](01, 22)-(01, 23): LPAR(OP) '('
[08](01, 23)-(01, 29): NAME(NAME) 'input1'
[08](01, 29)-(01, 30): RPAR(OP) ')'
[08](01, 30)-(01, 31): RPAR(OP) ')'
[08](01, 31)-(01, 32): COLON(OP) ':'
[08](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 08): INDENT(INDENT) '        '
[09](01, 08)-(01, 10): NAME(NAME) 'if'
[09](01, 11)-(01, 19): NAME(NAME) 'alphabet'
[09](01, 19)-(01, 20): LSQB(OP) '['
[09](01, 20)-(01, 21): NAME(NAME) 'i'
[09](01, 21)-(01, 22): RSQB(OP) ']'
[09](01, 23)-(01, 25): EQEQUAL(OP) '=='
[09](01, 26)-(01, 32): NAME(NAME) 'input1'
[09](01, 32)-(01, 33): LSQB(OP) '['
[09](01, 33)-(01, 34): NAME(NAME) 'j'
[09](01, 34)-(01, 35): RSQB(OP) ']'
[09](01, 36)-(01, 39): NAME(NAME) 'and'
[09](01, 40)-(01, 46): NAME(NAME) 'input1'
[09](01, 47)-(01, 49): NOTEQUAL(OP) '!='
[09](01, 50)-(01, 53): STRING(STRING) "' '"
[09](01, 53)-(01, 54): COLON(OP) ':'
[09](01, 54)-(01, 55): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 12): INDENT(INDENT) '            '
[10](01, 12)-(01, 15): NAME(NAME) 'som'
[10](01, 16)-(01, 17): EQUAL(OP) '='
[10](01, 18)-(01, 21): NAME(NAME) 'som'
[10](01, 22)-(01, 23): PLUS(OP) '+'
[10](01, 24)-(01, 25): NUMBER(NUMBER) '1'
[10](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 04): INDENT(INDENT) '    '
[11](01, 04)-(01, 12): NAME(NAME) 'anagram1'
[11](01, 13)-(01, 14): EQUAL(OP) '='
[11](01, 15)-(01, 23): NAME(NAME) 'anagram1'
[11](01, 24)-(01, 25): PLUS(OP) '+'
[11](01, 26)-(01, 29): NAME(NAME) 'str'
[11](01, 29)-(01, 30): LPAR(OP) '('
[11](01, 30)-(01, 33): NAME(NAME) 'som'
[11](01, 33)-(01, 34): RPAR(OP) ')'
[11](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 01): NL(NL) '\n'
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 03): NAME(NAME) 'for'
[13](01, 04)-(01, 05): NAME(NAME) 'i'
[13](01, 06)-(01, 08): NAME(NAME) 'in'
[13](01, 09)-(01, 14): NAME(NAME) 'range'
[13](01, 14)-(01, 15): LPAR(OP) '('
[13](01, 15)-(01, 18): NAME(NAME) 'len'
[13](01, 18)-(01, 19): LPAR(OP) '('
[13](01, 19)-(01, 27): NAME(NAME) 'alphabet'
[13](01, 27)-(01, 28): RPAR(OP) ')'
[13](01, 28)-(01, 29): RPAR(OP) ')'
[13](01, 29)-(01, 30): COLON(OP) ':'
[13](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 04): INDENT(INDENT) '    '
[14](01, 04)-(01, 07): NAME(NAME) 'som'
[14](01, 08)-(01, 09): EQUAL(OP) '='
[14](01, 10)-(01, 11): NUMBER(NUMBER) '0'
[14](01, 11)-(01, 12): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 04): INDENT(INDENT) '    '
[15](01, 04)-(01, 07): NAME(NAME) 'for'
[15](01, 08)-(01, 09): NAME(NAME) 'j'
[15](01, 10)-(01, 12): NAME(NAME) 'in'
[15](01, 13)-(01, 18): NAME(NAME) 'range'
[15](01, 18)-(01, 19): LPAR(OP) '('
[15](01, 19)-(01, 22): NAME(NAME) 'len'
[15](01, 22)-(01, 23): LPAR(OP) '('
[15](01, 23)-(01, 29): NAME(NAME) 'input2'
[15](01, 29)-(01, 30): RPAR(OP) ')'
[15](01, 30)-(01, 31): RPAR(OP) ')'
[15](01, 31)-(01, 32): COLON(OP) ':'
[15](01, 32)-(01, 33): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 08): INDENT(INDENT) '        '
[16](01, 08)-(01, 10): NAME(NAME) 'if'
[16](01, 11)-(01, 19): NAME(NAME) 'alphabet'
[16](01, 19)-(01, 20): LSQB(OP) '['
[16](01, 20)-(01, 21): NAME(NAME) 'i'
[16](01, 21)-(01, 22): RSQB(OP) ']'
[16](01, 23)-(01, 25): EQEQUAL(OP) '=='
[16](01, 26)-(01, 32): NAME(NAME) 'input2'
[16](01, 32)-(01, 33): LSQB(OP) '['
[16](01, 33)-(01, 34): NAME(NAME) 'j'
[16](01, 34)-(01, 35): RSQB(OP) ']'
[16](01, 36)-(01, 39): NAME(NAME) 'and'
[16](01, 40)-(01, 46): NAME(NAME) 'input2'
[16](01, 47)-(01, 49): NOTEQUAL(OP) '!='
[16](01, 50)-(01, 53): STRING(STRING) "' '"
[16](01, 53)-(01, 54): COLON(OP) ':'
[16](01, 54)-(01, 55): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 12): INDENT(INDENT) '            '
[17](01, 12)-(01, 15): NAME(NAME) 'som'
[17](01, 16)-(01, 17): EQUAL(OP) '='
[17](01, 18)-(01, 21): NAME(NAME) 'som'
[17](01, 22)-(01, 23): PLUS(OP) '+'
[17](01, 24)-(01, 25): NUMBER(NUMBER) '1'
[17](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 04): INDENT(INDENT) '    '
[18](01, 04)-(01, 12): NAME(NAME) 'anagram2'
[18](01, 13)-(01, 14): EQUAL(OP) '='
[18](01, 15)-(01, 23): NAME(NAME) 'anagram2'
[18](01, 24)-(01, 25): PLUS(OP) '+'
[18](01, 26)-(01, 29): NAME(NAME) 'str'
[18](01, 29)-(01, 30): LPAR(OP) '('
[18](01, 30)-(01, 33): NAME(NAME) 'som'
[18](01, 33)-(01, 34): RPAR(OP) ')'
[18](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 01): NL(NL) '\n'
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 02): NAME(NAME) 'if'
[20](01, 03)-(01, 11): NAME(NAME) 'anagram1'
[20](01, 12)-(01, 14): EQEQUAL(OP) '=='
[20](01, 15)-(01, 23): NAME(NAME) 'anagram2'
[20](01, 23)-(01, 24): COLON(OP) ':'
[20](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 04): INDENT(INDENT) '    '
[21](01, 04)-(01, 09): NAME(NAME) 'print'
[21](01, 09)-(01, 10): LPAR(OP) '('
[21](01, 10)-(01, 16): NAME(NAME) 'input1'
[21](01, 16)-(01, 17): COMMA(OP) ','
[21](01, 18)-(01, 23): STRING(STRING) "'and'"
[21](01, 23)-(01, 24): COMMA(OP) ','
[21](01, 25)-(01, 31): NAME(NAME) 'input2'
[21](01, 31)-(01, 32): COMMA(OP) ','
[21](01, 33)-(01, 47): STRING(STRING) "'are anagrams'"
[21](01, 47)-(01, 48): RPAR(OP) ')'
[21](01, 48)-(01, 49): NEWLINE(NEWLINE) '\n'
[21](02, 00)-(02, 00): DEDENT(DEDENT)
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 04): NAME(NAME) 'else'
[22](01, 04)-(01, 05): COLON(OP) ':'
[22](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[23](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[23](01, 00)-(01, 04): INDENT(INDENT) '    '
[23](01, 04)-(01, 09): NAME(NAME) 'print'
[23](01, 09)-(01, 10): LPAR(OP) '('
[23](01, 10)-(01, 16): NAME(NAME) 'input1'
[23](01, 16)-(01, 17): COMMA(OP) ','
[23](01, 18)-(01, 23): STRING(STRING) "'and'"
[23](01, 23)-(01, 24): COMMA(OP) ','
[23](01, 25)-(01, 31): NAME(NAME) 'input2'
[23](01, 31)-(01, 32): COMMA(OP) ','
[23](01, 33)-(01, 51): STRING(STRING) "'are not anagrams'"
[23](01, 51)-(01, 52): RPAR(OP) ')'
[23](01, 52)-(01, 53): NEWLINE(NEWLINE)
[23](02, 00)-(02, 00): DEDENT(DEDENT)
[23](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

