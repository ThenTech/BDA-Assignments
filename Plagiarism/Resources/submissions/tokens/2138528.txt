[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 06): NAME(NAME) 'string'
[00](01, 07)-(01, 08): EQUAL(OP) '='
[00](01, 09)-(01, 14): NAME(NAME) 'input'
[00](01, 14)-(01, 15): LPAR(OP) '('
[00](01, 15)-(01, 34): STRING(STRING) "'Geef een woord in'"
[00](01, 34)-(01, 35): RPAR(OP) ')'
[00](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 12): NAME(NAME) 'string_lijst'
[01](01, 13)-(01, 14): EQUAL(OP) '='
[01](01, 15)-(01, 19): NAME(NAME) 'list'
[01](01, 19)-(01, 20): LPAR(OP) '('
[01](01, 20)-(01, 26): NAME(NAME) 'string'
[01](01, 26)-(01, 27): RPAR(OP) ')'
[01](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 07): NAME(NAME) 'alfabet'
[02](01, 07)-(01, 08): EQUAL(OP) '='
[02](01, 08)-(01, 09): LSQB(OP) '['
[02](01, 09)-(01, 12): STRING(STRING) '"a"'
[02](01, 12)-(01, 13): COMMA(OP) ','
[02](01, 13)-(01, 16): STRING(STRING) '"b"'
[02](01, 16)-(01, 17): COMMA(OP) ','
[02](01, 17)-(01, 20): STRING(STRING) '"c"'
[02](01, 20)-(01, 21): COMMA(OP) ','
[02](01, 21)-(01, 24): STRING(STRING) '"d"'
[02](01, 24)-(01, 25): COMMA(OP) ','
[02](01, 25)-(01, 28): STRING(STRING) '"e"'
[02](01, 28)-(01, 29): COMMA(OP) ','
[02](01, 29)-(01, 32): STRING(STRING) '"f"'
[02](01, 32)-(01, 33): COMMA(OP) ','
[02](01, 33)-(01, 36): STRING(STRING) '"g"'
[02](01, 36)-(01, 37): COMMA(OP) ','
[02](01, 37)-(01, 40): STRING(STRING) '"h"'
[02](01, 40)-(01, 41): COMMA(OP) ','
[02](01, 41)-(01, 44): STRING(STRING) '"i"'
[02](01, 44)-(01, 45): COMMA(OP) ','
[02](01, 45)-(01, 48): STRING(STRING) '"j"'
[02](01, 48)-(01, 49): COMMA(OP) ','
[02](01, 49)-(01, 52): STRING(STRING) '"k"'
[02](01, 52)-(01, 53): COMMA(OP) ','
[02](01, 53)-(01, 56): STRING(STRING) '"l"'
[02](01, 56)-(01, 57): COMMA(OP) ','
[02](01, 57)-(01, 60): STRING(STRING) '"m"'
[02](01, 60)-(01, 61): COMMA(OP) ','
[02](01, 61)-(01, 64): STRING(STRING) '"n"'
[02](01, 64)-(01, 65): COMMA(OP) ','
[02](01, 65)-(01, 68): STRING(STRING) '"o"'
[02](01, 68)-(01, 69): COMMA(OP) ','
[02](01, 69)-(01, 72): STRING(STRING) '"p"'
[02](01, 72)-(01, 73): COMMA(OP) ','
[02](01, 73)-(01, 76): STRING(STRING) '"q"'
[02](01, 76)-(01, 77): COMMA(OP) ','
[02](01, 77)-(01, 80): STRING(STRING) '"r"'
[02](01, 80)-(01, 81): COMMA(OP) ','
[02](01, 81)-(01, 84): STRING(STRING) '"s"'
[02](01, 84)-(01, 85): COMMA(OP) ','
[02](01, 85)-(01, 88): STRING(STRING) '"t"'
[02](01, 88)-(01, 89): COMMA(OP) ','
[02](01, 89)-(01, 92): STRING(STRING) '"u"'
[02](01, 92)-(01, 93): COMMA(OP) ','
[02](01, 93)-(01, 96): STRING(STRING) '"v"'
[02](01, 96)-(01, 97): COMMA(OP) ','
[02](01, 97)-(01, 100): STRING(STRING) '"w"'
[02](01, 100)-(01, 101): COMMA(OP) ','
[02](01, 101)-(01, 104): STRING(STRING) '"x"'
[02](01, 104)-(01, 105): COMMA(OP) ','
[02](01, 105)-(01, 108): STRING(STRING) '"y"'
[02](01, 108)-(01, 109): COMMA(OP) ','
[02](01, 109)-(01, 112): STRING(STRING) '"z"'
[02](01, 112)-(01, 113): RSQB(OP) ']'
[02](01, 113)-(01, 114): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 01): NL(NL) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 03): NAME(NAME) 'for'
[04](01, 04)-(01, 06): NAME(NAME) 'el'
[04](01, 07)-(01, 09): NAME(NAME) 'in'
[04](01, 10)-(01, 17): NAME(NAME) 'alfabet'
[04](01, 17)-(01, 18): COLON(OP) ':'
[04](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 10): NAME(NAME) 'teller'
[05](01, 11)-(01, 12): EQUAL(OP) '='
[05](01, 13)-(01, 14): NUMBER(NUMBER) '0'
[05](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 04): INDENT(INDENT) '    '
[06](01, 04)-(01, 07): NAME(NAME) 'for'
[06](01, 08)-(01, 14): NAME(NAME) 'waarde'
[06](01, 15)-(01, 17): NAME(NAME) 'in'
[06](01, 18)-(01, 30): NAME(NAME) 'string_lijst'
[06](01, 30)-(01, 31): COLON(OP) ':'
[06](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 08): INDENT(INDENT) '        '
[07](01, 08)-(01, 10): NAME(NAME) 'if'
[07](01, 11)-(01, 13): NAME(NAME) 'el'
[07](01, 14)-(01, 16): EQEQUAL(OP) '=='
[07](01, 17)-(01, 23): NAME(NAME) 'waarde'
[07](01, 23)-(01, 24): COLON(OP) ':'
[07](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 12): INDENT(INDENT) '            '
[08](01, 12)-(01, 18): NAME(NAME) 'teller'
[08](01, 19)-(01, 20): EQUAL(OP) '='
[08](01, 20)-(01, 21): PLUS(OP) '+'
[08](01, 22)-(01, 23): NUMBER(NUMBER) '1'
[08](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 09): NAME(NAME) 'print'
[09](01, 09)-(01, 10): LPAR(OP) '('
[09](01, 10)-(01, 12): NAME(NAME) 'el'
[09](01, 12)-(01, 13): COMMA(OP) ','
[09](01, 14)-(01, 20): NAME(NAME) 'teller'
[09](01, 20)-(01, 21): COMMA(OP) ','
[09](01, 22)-(01, 25): NAME(NAME) 'sep'
[09](01, 25)-(01, 26): EQUAL(OP) '='
[09](01, 26)-(01, 30): STRING(STRING) '": "'
[09](01, 30)-(01, 31): RPAR(OP) ')'
[09](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

