[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 57): COMMENT(COMMENT) '# checken als str met spaties begint --> allemaal wegdoen'
[00](01, 57)-(01, 58): NL(NL) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 68): COMMENT(COMMENT) '# woorden onderscheiden, enkel spatie toestaan, dubbele verwijderen!'
[01](01, 68)-(01, 69): NL(NL) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 01): NL(NL) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 03): NAME(NAME) 'def'
[03](01, 04)-(01, 18): NAME(NAME) 'cleanup_spaces'
[03](01, 18)-(01, 19): LPAR(OP) '('
[03](01, 19)-(01, 25): NAME(NAME) 'string'
[03](01, 25)-(01, 26): RPAR(OP) ')'
[03](01, 26)-(01, 27): COLON(OP) ':'
[03](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 01): NL(NL) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 17): NAME(NAME) 'nieuwe_string'
[05](01, 18)-(01, 19): EQUAL(OP) '='
[05](01, 20)-(01, 22): STRING(STRING) '""'
[05](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 04): INDENT(INDENT) '    '
[06](01, 04)-(01, 10): NAME(NAME) 'teller'
[06](01, 11)-(01, 12): EQUAL(OP) '='
[06](01, 13)-(01, 14): NUMBER(NUMBER) '0'
[06](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 01): NL(NL) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 04): INDENT(INDENT) '    '
[08](01, 04)-(01, 09): NAME(NAME) 'while'
[08](01, 10)-(01, 14): NAME(NAME) 'True'
[08](01, 14)-(01, 15): COLON(OP) ':'
[08](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 08): INDENT(INDENT) '        '
[09](01, 08)-(01, 10): NAME(NAME) 'if'
[09](01, 11)-(01, 17): NAME(NAME) 'string'
[09](01, 17)-(01, 18): LSQB(OP) '['
[09](01, 18)-(01, 24): NAME(NAME) 'teller'
[09](01, 24)-(01, 25): RSQB(OP) ']'
[09](01, 26)-(01, 28): NOTEQUAL(OP) '!='
[09](01, 29)-(01, 32): STRING(STRING) '" "'
[09](01, 32)-(01, 33): COLON(OP) ':'
[09](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 12): INDENT(INDENT) '            '
[10](01, 12)-(01, 17): NAME(NAME) 'break'
[10](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 08): INDENT(INDENT) '        '
[11](01, 08)-(01, 14): NAME(NAME) 'teller'
[11](01, 15)-(01, 16): EQUAL(OP) '='
[11](01, 17)-(01, 23): NAME(NAME) 'teller'
[11](01, 24)-(01, 25): PLUS(OP) '+'
[11](01, 26)-(01, 27): NUMBER(NUMBER) '1'
[11](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 01): NL(NL) '\n'
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 04): INDENT(INDENT) '    '
[13](01, 04)-(01, 07): NAME(NAME) 'for'
[13](01, 08)-(01, 10): NAME(NAME) 'el'
[13](01, 11)-(01, 13): NAME(NAME) 'in'
[13](01, 14)-(01, 19): NAME(NAME) 'range'
[13](01, 19)-(01, 20): LPAR(OP) '('
[13](01, 20)-(01, 26): NAME(NAME) 'teller'
[13](01, 26)-(01, 27): COMMA(OP) ','
[13](01, 28)-(01, 31): NAME(NAME) 'len'
[13](01, 31)-(01, 32): LPAR(OP) '('
[13](01, 32)-(01, 38): NAME(NAME) 'string'
[13](01, 38)-(01, 39): RPAR(OP) ')'
[13](01, 39)-(01, 40): RPAR(OP) ')'
[13](01, 40)-(01, 41): COLON(OP) ':'
[13](01, 41)-(01, 42): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 08): INDENT(INDENT) '        '
[14](01, 08)-(01, 10): NAME(NAME) 'if'
[14](01, 11)-(01, 17): NAME(NAME) 'string'
[14](01, 17)-(01, 18): LSQB(OP) '['
[14](01, 18)-(01, 20): NAME(NAME) 'el'
[14](01, 20)-(01, 21): RSQB(OP) ']'
[14](01, 22)-(01, 24): EQEQUAL(OP) '=='
[14](01, 25)-(01, 28): STRING(STRING) '" "'
[14](01, 28)-(01, 29): COLON(OP) ':'
[14](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 12): INDENT(INDENT) '            '
[15](01, 12)-(01, 14): NAME(NAME) 'if'
[15](01, 15)-(01, 21): NAME(NAME) 'string'
[15](01, 21)-(01, 22): LSQB(OP) '['
[15](01, 22)-(01, 24): NAME(NAME) 'el'
[15](01, 24)-(01, 25): MINUS(OP) '-'
[15](01, 25)-(01, 26): NUMBER(NUMBER) '1'
[15](01, 26)-(01, 27): RSQB(OP) ']'
[15](01, 28)-(01, 30): NOTEQUAL(OP) '!='
[15](01, 31)-(01, 34): STRING(STRING) '" "'
[15](01, 34)-(01, 35): COLON(OP) ':'
[15](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[15](02, 00)-(02, 00): DEDENT(DEDENT)
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 16): INDENT(INDENT) '                '
[16](01, 16)-(01, 29): NAME(NAME) 'nieuwe_string'
[16](01, 30)-(01, 31): EQUAL(OP) '='
[16](01, 32)-(01, 45): NAME(NAME) 'nieuwe_string'
[16](01, 46)-(01, 47): PLUS(OP) '+'
[16](01, 48)-(01, 51): STRING(STRING) '" "'
[16](01, 51)-(01, 52): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): DEDENT(DEDENT)
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 08): INDENT(INDENT) '        '
[17](01, 08)-(01, 12): NAME(NAME) 'else'
[17](01, 12)-(01, 13): COLON(OP) ':'
[17](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): DEDENT(DEDENT)
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 12): INDENT(INDENT) '            '
[18](01, 12)-(01, 25): NAME(NAME) 'nieuwe_string'
[18](01, 26)-(01, 27): EQUAL(OP) '='
[18](01, 28)-(01, 41): NAME(NAME) 'nieuwe_string'
[18](01, 42)-(01, 43): PLUS(OP) '+'
[18](01, 44)-(01, 50): NAME(NAME) 'string'
[18](01, 50)-(01, 51): LSQB(OP) '['
[18](01, 51)-(01, 53): NAME(NAME) 'el'
[18](01, 53)-(01, 54): RSQB(OP) ']'
[18](01, 54)-(01, 55): NEWLINE(NEWLINE) '\n'
[18](02, 00)-(02, 00): DEDENT(DEDENT)
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 01): NL(NL) '\n'
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 04): INDENT(INDENT) '    '
[20](01, 04)-(01, 10): NAME(NAME) 'return'
[20](01, 11)-(01, 24): NAME(NAME) 'nieuwe_string'
[20](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[20](02, 00)-(02, 00): DEDENT(DEDENT)
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 01): NL(NL) '\n'
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 05): NAME(NAME) 'print'
[22](01, 05)-(01, 06): LPAR(OP) '('
[22](01, 06)-(01, 20): NAME(NAME) 'cleanup_spaces'
[22](01, 20)-(01, 21): LPAR(OP) '('
[22](01, 21)-(01, 26): NAME(NAME) 'input'
[22](01, 26)-(01, 27): LPAR(OP) '('
[22](01, 27)-(01, 28): RPAR(OP) ')'
[22](01, 28)-(01, 29): RPAR(OP) ')'
[22](01, 29)-(01, 30): RPAR(OP) ')'
[22](01, 30)-(01, 31): NEWLINE(NEWLINE) '\n'
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

