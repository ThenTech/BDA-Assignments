[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 06): NAME(NAME) 'getalX'
[00](01, 07)-(01, 08): EQUAL(OP) '='
[00](01, 09)-(01, 12): NAME(NAME) 'int'
[00](01, 12)-(01, 13): LPAR(OP) '('
[00](01, 13)-(01, 18): NAME(NAME) 'input'
[00](01, 18)-(01, 19): LPAR(OP) '('
[00](01, 19)-(01, 50): STRING(STRING) '"Geef een getal groter dan 0: "'
[00](01, 50)-(01, 51): RPAR(OP) ')'
[00](01, 51)-(01, 52): RPAR(OP) ')'
[00](01, 52)-(01, 53): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 06): NAME(NAME) 'getalY'
[01](01, 07)-(01, 08): EQUAL(OP) '='
[01](01, 09)-(01, 12): NAME(NAME) 'int'
[01](01, 12)-(01, 13): LPAR(OP) '('
[01](01, 13)-(01, 18): NAME(NAME) 'input'
[01](01, 18)-(01, 19): LPAR(OP) '('
[01](01, 19)-(01, 57): STRING(STRING) '"Geef een tweede getal groter dan 0: "'
[01](01, 57)-(01, 58): RPAR(OP) ')'
[01](01, 58)-(01, 59): RPAR(OP) ')'
[01](01, 59)-(01, 60): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 01): NL(NL) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 07): NAME(NAME) 'product'
[03](01, 08)-(01, 09): EQUAL(OP) '='
[03](01, 10)-(01, 16): NAME(NAME) 'getalX'
[03](01, 17)-(01, 18): STAR(OP) '*'
[03](01, 19)-(01, 25): NAME(NAME) 'getalY'
[03](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 05): NAME(NAME) 'count'
[04](01, 06)-(01, 07): EQUAL(OP) '='
[04](01, 08)-(01, 15): NAME(NAME) 'product'
[04](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 01): NL(NL) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 03): NAME(NAME) 'for'
[06](01, 04)-(01, 05): NAME(NAME) 'y'
[06](01, 06)-(01, 08): NAME(NAME) 'in'
[06](01, 09)-(01, 14): NAME(NAME) 'range'
[06](01, 14)-(01, 15): LPAR(OP) '('
[06](01, 15)-(01, 21): NAME(NAME) 'getalY'
[06](01, 21)-(01, 22): RPAR(OP) ')'
[06](01, 22)-(01, 23): COLON(OP) ':'
[06](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 04): INDENT(INDENT) '    '
[07](01, 04)-(01, 07): NAME(NAME) 'for'
[07](01, 08)-(01, 09): NAME(NAME) 'x'
[07](01, 10)-(01, 12): NAME(NAME) 'in'
[07](01, 13)-(01, 18): NAME(NAME) 'range'
[07](01, 18)-(01, 19): LPAR(OP) '('
[07](01, 19)-(01, 25): NAME(NAME) 'getalX'
[07](01, 25)-(01, 26): RPAR(OP) ')'
[07](01, 26)-(01, 27): COLON(OP) ':'
[07](01, 27)-(01, 28): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 08): INDENT(INDENT) '        '
[08](01, 08)-(01, 13): NAME(NAME) 'count'
[08](01, 14)-(01, 16): MINEQUAL(OP) '-='
[08](01, 17)-(01, 18): NUMBER(NUMBER) '1'
[08](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 08): INDENT(INDENT) '        '
[09](01, 08)-(01, 13): NAME(NAME) 'print'
[09](01, 13)-(01, 14): LPAR(OP) '('
[09](01, 14)-(01, 15): LPAR(OP) '('
[09](01, 15)-(01, 22): NAME(NAME) 'product'
[09](01, 23)-(01, 24): MINUS(OP) '-'
[09](01, 25)-(01, 30): NAME(NAME) 'count'
[09](01, 30)-(01, 31): RPAR(OP) ')'
[09](01, 31)-(01, 32): COMMA(OP) ','
[09](01, 33)-(01, 36): NAME(NAME) 'end'
[09](01, 36)-(01, 37): EQUAL(OP) '='
[09](01, 37)-(01, 40): STRING(STRING) '" "'
[09](01, 40)-(01, 41): RPAR(OP) ')'
[09](01, 41)-(01, 42): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 04): INDENT(INDENT) '    '
[10](01, 04)-(01, 09): NAME(NAME) 'print'
[10](01, 09)-(01, 10): LPAR(OP) '('
[10](01, 10)-(01, 11): RPAR(OP) ')'
[10](01, 11)-(01, 12): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

