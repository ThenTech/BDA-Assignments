[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 12): NAME(NAME) 'given_string'
[00](01, 13)-(01, 14): EQUAL(OP) '='
[00](01, 15)-(01, 20): NAME(NAME) 'input'
[00](01, 20)-(01, 21): LPAR(OP) '('
[00](01, 21)-(01, 22): RPAR(OP) ')'
[00](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 05): NAME(NAME) 'count'
[01](01, 06)-(01, 07): EQUAL(OP) '='
[01](01, 08)-(01, 09): NUMBER(NUMBER) '0'
[01](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 03): NAME(NAME) 'for'
[02](01, 04)-(01, 05): NAME(NAME) 'i'
[02](01, 06)-(01, 08): NAME(NAME) 'in'
[02](01, 09)-(01, 14): NAME(NAME) 'range'
[02](01, 14)-(01, 15): LPAR(OP) '('
[02](01, 15)-(01, 18): NAME(NAME) 'len'
[02](01, 18)-(01, 19): LPAR(OP) '('
[02](01, 19)-(01, 31): NAME(NAME) 'given_string'
[02](01, 31)-(01, 32): RPAR(OP) ')'
[02](01, 32)-(01, 33): RPAR(OP) ')'
[02](01, 33)-(01, 34): COLON(OP) ':'
[02](01, 34)-(01, 35): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 04): INDENT(INDENT) '    '
[03](01, 04)-(01, 06): NAME(NAME) 'if'
[03](01, 07)-(01, 09): NUMBER(NUMBER) '97'
[03](01, 10)-(01, 12): LESSEQUAL(OP) '<='
[03](01, 13)-(01, 16): NAME(NAME) 'ord'
[03](01, 16)-(01, 17): LPAR(OP) '('
[03](01, 17)-(01, 29): NAME(NAME) 'given_string'
[03](01, 29)-(01, 30): LSQB(OP) '['
[03](01, 30)-(01, 31): NAME(NAME) 'i'
[03](01, 31)-(01, 32): RSQB(OP) ']'
[03](01, 32)-(01, 33): RPAR(OP) ')'
[03](01, 34)-(01, 36): LESSEQUAL(OP) '<='
[03](01, 37)-(01, 40): NUMBER(NUMBER) '122'
[03](01, 41)-(01, 43): NAME(NAME) 'or'
[03](01, 44)-(01, 46): NUMBER(NUMBER) '65'
[03](01, 47)-(01, 49): LESSEQUAL(OP) '<='
[03](01, 50)-(01, 53): NAME(NAME) 'ord'
[03](01, 53)-(01, 54): LPAR(OP) '('
[03](01, 54)-(01, 66): NAME(NAME) 'given_string'
[03](01, 66)-(01, 67): LSQB(OP) '['
[03](01, 67)-(01, 68): NAME(NAME) 'i'
[03](01, 68)-(01, 69): RSQB(OP) ']'
[03](01, 69)-(01, 70): RPAR(OP) ')'
[03](01, 71)-(01, 73): LESSEQUAL(OP) '<='
[03](01, 74)-(01, 76): NUMBER(NUMBER) '90'
[03](01, 76)-(01, 77): COLON(OP) ':'
[03](01, 77)-(01, 78): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 08): INDENT(INDENT) '        '
[04](01, 08)-(01, 13): NAME(NAME) 'print'
[04](01, 13)-(01, 14): LPAR(OP) '('
[04](01, 14)-(01, 26): NAME(NAME) 'given_string'
[04](01, 26)-(01, 27): LSQB(OP) '['
[04](01, 27)-(01, 28): NAME(NAME) 'i'
[04](01, 28)-(01, 29): RSQB(OP) ']'
[04](01, 29)-(01, 30): COMMA(OP) ','
[04](01, 31)-(01, 34): NAME(NAME) 'end'
[04](01, 34)-(01, 35): EQUAL(OP) '='
[04](01, 35)-(01, 37): STRING(STRING) '""'
[04](01, 37)-(01, 38): RPAR(OP) ')'
[04](01, 38)-(01, 39): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 08): INDENT(INDENT) '        '
[05](01, 08)-(01, 13): NAME(NAME) 'count'
[05](01, 14)-(01, 16): PLUSEQUAL(OP) '+='
[05](01, 17)-(01, 18): NUMBER(NUMBER) '1'
[05](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 08): INDENT(INDENT) '        '
[06](01, 08)-(01, 10): NAME(NAME) 'if'
[06](01, 11)-(01, 12): LPAR(OP) '('
[06](01, 12)-(01, 13): NAME(NAME) 'i'
[06](01, 14)-(01, 15): LESS(OP) '<'
[06](01, 16)-(01, 17): LPAR(OP) '('
[06](01, 17)-(01, 20): NAME(NAME) 'len'
[06](01, 20)-(01, 21): LPAR(OP) '('
[06](01, 21)-(01, 33): NAME(NAME) 'given_string'
[06](01, 33)-(01, 34): RPAR(OP) ')'
[06](01, 35)-(01, 36): MINUS(OP) '-'
[06](01, 37)-(01, 38): NUMBER(NUMBER) '2'
[06](01, 38)-(01, 39): RPAR(OP) ')'
[06](01, 39)-(01, 40): RPAR(OP) ')'
[06](01, 41)-(01, 44): NAME(NAME) 'and'
[06](01, 45)-(01, 46): LPAR(OP) '('
[06](01, 46)-(01, 58): NAME(NAME) 'given_string'
[06](01, 58)-(01, 59): LSQB(OP) '['
[06](01, 59)-(01, 60): NAME(NAME) 'i'
[06](01, 60)-(01, 61): PLUS(OP) '+'
[06](01, 61)-(01, 62): NUMBER(NUMBER) '1'
[06](01, 62)-(01, 63): RSQB(OP) ']'
[06](01, 64)-(01, 67): NAME(NAME) 'not'
[06](01, 68)-(01, 70): NAME(NAME) 'in'
[06](01, 71)-(01, 72): LSQB(OP) '['
[06](01, 72)-(01, 126): STRING(STRING) '"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"'
[06](01, 126)-(01, 127): RSQB(OP) ']'
[06](01, 127)-(01, 128): RPAR(OP) ')'
[06](01, 128)-(01, 129): COLON(OP) ':'
[06](01, 129)-(01, 130): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): DEDENT(DEDENT)
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 12): INDENT(INDENT) '            '
[07](01, 12)-(01, 17): NAME(NAME) 'print'
[07](01, 17)-(01, 18): LPAR(OP) '('
[07](01, 18)-(01, 23): NAME(NAME) 'count'
[07](01, 23)-(01, 24): RPAR(OP) ')'
[07](01, 24)-(01, 25): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): DEDENT(DEDENT)
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 12): INDENT(INDENT) '            '
[08](01, 12)-(01, 17): NAME(NAME) 'count'
[08](01, 18)-(01, 19): EQUAL(OP) '='
[08](01, 20)-(01, 21): NUMBER(NUMBER) '0'
[08](01, 21)-(01, 22): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 08): NAME(NAME) 'else'
[09](01, 08)-(01, 09): COLON(OP) ':'
[09](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 08): INDENT(INDENT) '        '
[10](01, 08)-(01, 13): NAME(NAME) 'count'
[10](01, 14)-(01, 15): EQUAL(OP) '='
[10](01, 16)-(01, 17): NUMBER(NUMBER) '0'
[10](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 12)-(01, 13): NL(NL) '\n'
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 00): ENDMARKER(ENDMARKER)

