[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'int'
[00](01, 04)-(01, 05): EQUAL(OP) '='
[00](01, 06)-(01, 11): NAME(NAME) 'input'
[00](01, 11)-(01, 12): LPAR(OP) '('
[00](01, 12)-(01, 14): STRING(STRING) '""'
[00](01, 14)-(01, 15): RPAR(OP) ')'
[00](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 01): NL(NL) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): NAME(NAME) 'list'
[02](01, 05)-(01, 06): EQUAL(OP) '='
[02](01, 07)-(01, 08): LSQB(OP) '['
[02](01, 08)-(01, 09): RSQB(OP) ']'
[02](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 03): NAME(NAME) 'for'
[03](01, 04)-(01, 05): NAME(NAME) 'i'
[03](01, 06)-(01, 08): NAME(NAME) 'in'
[03](01, 09)-(01, 12): NAME(NAME) 'int'
[03](01, 12)-(01, 13): COLON(OP) ':'
[03](01, 13)-(01, 14): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 08): NAME(NAME) 'list'
[04](01, 08)-(01, 09): DOT(OP) '.'
[04](01, 09)-(01, 15): NAME(NAME) 'append'
[04](01, 15)-(01, 16): LPAR(OP) '('
[04](01, 16)-(01, 17): NAME(NAME) 'i'
[04](01, 17)-(01, 18): RPAR(OP) ')'
[04](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): NAME(NAME) 'list'
[05](01, 04)-(01, 05): DOT(OP) '.'
[05](01, 05)-(01, 12): NAME(NAME) 'reverse'
[05](01, 12)-(01, 13): LPAR(OP) '('
[05](01, 13)-(01, 14): RPAR(OP) ')'
[05](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 06): NAME(NAME) 'string'
[06](01, 07)-(01, 08): EQUAL(OP) '='
[06](01, 09)-(01, 11): STRING(STRING) '""'
[06](01, 11)-(01, 12): NEWLINE(NEWLINE) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 03): NAME(NAME) 'for'
[07](01, 04)-(01, 05): NAME(NAME) 'i'
[07](01, 06)-(01, 08): NAME(NAME) 'in'
[07](01, 09)-(01, 13): NAME(NAME) 'list'
[07](01, 13)-(01, 14): COLON(OP) ':'
[07](01, 14)-(01, 15): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 04): INDENT(INDENT) '    '
[08](01, 04)-(01, 10): NAME(NAME) 'string'
[08](01, 11)-(01, 13): PLUSEQUAL(OP) '+='
[08](01, 14)-(01, 15): NAME(NAME) 'i'
[08](01, 15)-(01, 16): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 02): NAME(NAME) 'if'
[09](01, 03)-(01, 09): NAME(NAME) 'string'
[09](01, 10)-(01, 12): EQEQUAL(OP) '=='
[09](01, 13)-(01, 16): NAME(NAME) 'int'
[09](01, 16)-(01, 17): COLON(OP) ':'
[09](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 04): INDENT(INDENT) '    '
[10](01, 04)-(01, 09): NAME(NAME) 'print'
[10](01, 09)-(01, 10): LPAR(OP) '('
[10](01, 10)-(01, 13): NAME(NAME) 'int'
[10](01, 13)-(01, 14): COMMA(OP) ','
[10](01, 15)-(01, 32): STRING(STRING) '"is a palindrome"'
[10](01, 32)-(01, 33): RPAR(OP) ')'
[10](01, 33)-(01, 34): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 04): NAME(NAME) 'else'
[11](01, 04)-(01, 05): COLON(OP) ':'
[11](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 04): INDENT(INDENT) '    '
[12](01, 04)-(01, 09): NAME(NAME) 'print'
[12](01, 09)-(01, 10): LPAR(OP) '('
[12](01, 10)-(01, 13): NAME(NAME) 'int'
[12](01, 13)-(01, 14): COMMA(OP) ','
[12](01, 15)-(01, 36): STRING(STRING) '"is not a palindrome"'
[12](01, 36)-(01, 37): RPAR(OP) ')'
[12](01, 37)-(01, 38): NEWLINE(NEWLINE)
[12](02, 00)-(02, 00): DEDENT(DEDENT)
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

