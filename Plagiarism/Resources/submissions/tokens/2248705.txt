[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 03): NAME(NAME) 'def'
[00](01, 04)-(01, 10): NAME(NAME) 'encode'
[00](01, 10)-(01, 11): LPAR(OP) '('
[00](01, 11)-(01, 17): NAME(NAME) 'string'
[00](01, 17)-(01, 18): COMMA(OP) ','
[00](01, 19)-(01, 27): NAME(NAME) 'rotation'
[00](01, 27)-(01, 28): RPAR(OP) ')'
[00](01, 28)-(01, 29): COLON(OP) ':'
[00](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 04): INDENT(INDENT) '    '
[01](01, 04)-(01, 18): NAME(NAME) 'encoded_string'
[01](01, 19)-(01, 20): EQUAL(OP) '='
[01](01, 21)-(01, 23): STRING(STRING) '""'
[01](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): DEDENT(DEDENT)
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 04): INDENT(INDENT) '    '
[02](01, 04)-(01, 07): NAME(NAME) 'for'
[02](01, 08)-(01, 12): NAME(NAME) 'char'
[02](01, 13)-(01, 15): NAME(NAME) 'in'
[02](01, 16)-(01, 22): NAME(NAME) 'string'
[02](01, 22)-(01, 23): COLON(OP) ':'
[02](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): DEDENT(DEDENT)
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 08): INDENT(INDENT) '        '
[03](01, 08)-(01, 22): NAME(NAME) 'encoded_string'
[03](01, 23)-(01, 25): PLUSEQUAL(OP) '+='
[03](01, 26)-(01, 29): NAME(NAME) 'chr'
[03](01, 29)-(01, 30): LPAR(OP) '('
[03](01, 30)-(01, 31): LPAR(OP) '('
[03](01, 31)-(01, 34): NAME(NAME) 'ord'
[03](01, 34)-(01, 35): LPAR(OP) '('
[03](01, 35)-(01, 39): NAME(NAME) 'char'
[03](01, 39)-(01, 40): RPAR(OP) ')'
[03](01, 41)-(01, 42): PLUS(OP) '+'
[03](01, 43)-(01, 51): NAME(NAME) 'rotation'
[03](01, 51)-(01, 52): RPAR(OP) ')'
[03](01, 53)-(01, 54): PERCENT(OP) '%'
[03](01, 55)-(01, 56): LPAR(OP) '('
[03](01, 56)-(01, 58): NUMBER(NUMBER) '26'
[03](01, 59)-(01, 60): PLUS(OP) '+'
[03](01, 61)-(01, 64): NAME(NAME) 'ord'
[03](01, 64)-(01, 65): LPAR(OP) '('
[03](01, 65)-(01, 68): STRING(STRING) '"a"'
[03](01, 68)-(01, 69): RPAR(OP) ')'
[03](01, 69)-(01, 70): RPAR(OP) ')'
[03](01, 70)-(01, 71): RPAR(OP) ')'
[03](01, 71)-(01, 72): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): DEDENT(DEDENT)
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 10): NAME(NAME) 'return'
[04](01, 11)-(01, 25): NAME(NAME) 'encoded_string'
[04](01, 25)-(01, 26): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 01): NL(NL) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 01): NL(NL) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 03): NAME(NAME) 'def'
[07](01, 04)-(01, 10): NAME(NAME) 'decode'
[07](01, 10)-(01, 11): LPAR(OP) '('
[07](01, 11)-(01, 17): NAME(NAME) 'string'
[07](01, 17)-(01, 18): COMMA(OP) ','
[07](01, 19)-(01, 27): NAME(NAME) 'rotation'
[07](01, 27)-(01, 28): RPAR(OP) ')'
[07](01, 28)-(01, 29): COLON(OP) ':'
[07](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 04): INDENT(INDENT) '    '
[08](01, 04)-(01, 18): NAME(NAME) 'decoded_string'
[08](01, 19)-(01, 20): EQUAL(OP) '='
[08](01, 21)-(01, 23): STRING(STRING) '""'
[08](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): INDENT(INDENT) '    '
[09](01, 04)-(01, 07): NAME(NAME) 'for'
[09](01, 08)-(01, 12): NAME(NAME) 'char'
[09](01, 13)-(01, 15): NAME(NAME) 'in'
[09](01, 16)-(01, 22): NAME(NAME) 'string'
[09](01, 22)-(01, 23): COLON(OP) ':'
[09](01, 23)-(01, 24): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): DEDENT(DEDENT)
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 08): INDENT(INDENT) '        '
[10](01, 08)-(01, 22): NAME(NAME) 'decoded_string'
[10](01, 23)-(01, 25): PLUSEQUAL(OP) '+='
[10](01, 26)-(01, 29): NAME(NAME) 'chr'
[10](01, 29)-(01, 30): LPAR(OP) '('
[10](01, 30)-(01, 31): LPAR(OP) '('
[10](01, 31)-(01, 34): NAME(NAME) 'ord'
[10](01, 34)-(01, 35): LPAR(OP) '('
[10](01, 35)-(01, 39): NAME(NAME) 'char'
[10](01, 39)-(01, 40): RPAR(OP) ')'
[10](01, 41)-(01, 42): MINUS(OP) '-'
[10](01, 43)-(01, 51): NAME(NAME) 'rotation'
[10](01, 51)-(01, 52): RPAR(OP) ')'
[10](01, 53)-(01, 54): PERCENT(OP) '%'
[10](01, 55)-(01, 56): LPAR(OP) '('
[10](01, 56)-(01, 58): NUMBER(NUMBER) '26'
[10](01, 59)-(01, 60): PLUS(OP) '+'
[10](01, 61)-(01, 64): NAME(NAME) 'ord'
[10](01, 64)-(01, 65): LPAR(OP) '('
[10](01, 65)-(01, 68): STRING(STRING) '"a"'
[10](01, 68)-(01, 69): RPAR(OP) ')'
[10](01, 69)-(01, 70): RPAR(OP) ')'
[10](01, 70)-(01, 71): RPAR(OP) ')'
[10](01, 71)-(01, 72): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 04): INDENT(INDENT) '    '
[11](01, 04)-(01, 10): NAME(NAME) 'return'
[11](01, 11)-(01, 25): NAME(NAME) 'decoded_string'
[11](01, 25)-(01, 26): NEWLINE(NEWLINE)
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

