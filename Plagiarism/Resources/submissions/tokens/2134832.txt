[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 01): NAME(NAME) 's'
[00](01, 02)-(01, 03): EQUAL(OP) '='
[00](01, 04)-(01, 09): NAME(NAME) 'input'
[00](01, 09)-(01, 10): LPAR(OP) '('
[00](01, 10)-(01, 27): STRING(STRING) '"Give a string: "'
[00](01, 27)-(01, 28): RPAR(OP) ')'
[00](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 12): NAME(NAME) 'isPalindrome'
[01](01, 13)-(01, 14): EQUAL(OP) '='
[01](01, 15)-(01, 19): NAME(NAME) 'True'
[01](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 01): NAME(NAME) 'i'
[02](01, 02)-(01, 03): EQUAL(OP) '='
[02](01, 04)-(01, 05): NUMBER(NUMBER) '0'
[02](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 05): NAME(NAME) 'while'
[03](01, 06)-(01, 18): NAME(NAME) 'isPalindrome'
[03](01, 19)-(01, 22): NAME(NAME) 'and'
[03](01, 23)-(01, 24): NAME(NAME) 'i'
[03](01, 25)-(01, 26): LESS(OP) '<'
[03](01, 27)-(01, 30): NAME(NAME) 'len'
[03](01, 30)-(01, 31): LPAR(OP) '('
[03](01, 31)-(01, 32): NAME(NAME) 's'
[03](01, 32)-(01, 33): RPAR(OP) ')'
[03](01, 34)-(01, 36): DOUBLESLASH(OP) '//'
[03](01, 37)-(01, 38): NUMBER(NUMBER) '2'
[03](01, 38)-(01, 39): COLON(OP) ':'
[03](01, 39)-(01, 40): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 04): INDENT(INDENT) '    '
[04](01, 04)-(01, 16): NAME(NAME) 'isPalindrome'
[04](01, 17)-(01, 18): EQUAL(OP) '='
[04](01, 19)-(01, 20): NAME(NAME) 's'
[04](01, 20)-(01, 21): LSQB(OP) '['
[04](01, 21)-(01, 22): NAME(NAME) 'i'
[04](01, 22)-(01, 23): RSQB(OP) ']'
[04](01, 24)-(01, 26): EQEQUAL(OP) '=='
[04](01, 27)-(01, 28): NAME(NAME) 's'
[04](01, 28)-(01, 29): LSQB(OP) '['
[04](01, 29)-(01, 32): NAME(NAME) 'len'
[04](01, 32)-(01, 33): LPAR(OP) '('
[04](01, 33)-(01, 34): NAME(NAME) 's'
[04](01, 34)-(01, 35): RPAR(OP) ')'
[04](01, 36)-(01, 37): MINUS(OP) '-'
[04](01, 38)-(01, 39): LPAR(OP) '('
[04](01, 39)-(01, 40): NAME(NAME) 'i'
[04](01, 41)-(01, 42): PLUS(OP) '+'
[04](01, 43)-(01, 44): NUMBER(NUMBER) '1'
[04](01, 44)-(01, 45): RPAR(OP) ')'
[04](01, 45)-(01, 46): RSQB(OP) ']'
[04](01, 46)-(01, 47): NEWLINE(NEWLINE) '\n'
[04](02, 00)-(02, 00): DEDENT(DEDENT)
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 04): INDENT(INDENT) '    '
[05](01, 04)-(01, 05): NAME(NAME) 'i'
[05](01, 06)-(01, 08): PLUSEQUAL(OP) '+='
[05](01, 09)-(01, 10): NUMBER(NUMBER) '1'
[05](01, 10)-(01, 11): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): DEDENT(DEDENT)
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 01): NL(NL) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 02): NAME(NAME) 'if'
[07](01, 03)-(01, 04): LPAR(OP) '('
[07](01, 04)-(01, 16): NAME(NAME) 'isPalindrome'
[07](01, 16)-(01, 17): RPAR(OP) ')'
[07](01, 17)-(01, 18): COLON(OP) ':'
[07](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 04): INDENT(INDENT) '    '
[08](01, 04)-(01, 09): NAME(NAME) 'print'
[08](01, 09)-(01, 10): LPAR(OP) '('
[08](01, 10)-(01, 11): NAME(NAME) 's'
[08](01, 11)-(01, 12): COMMA(OP) ','
[08](01, 13)-(01, 30): STRING(STRING) '"is a palindrome"'
[08](01, 30)-(01, 31): RPAR(OP) ')'
[08](01, 31)-(01, 32): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): DEDENT(DEDENT)
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 04): NAME(NAME) 'else'
[09](01, 04)-(01, 05): COLON(OP) ':'
[09](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 04): INDENT(INDENT) '    '
[10](01, 04)-(01, 09): NAME(NAME) 'print'
[10](01, 09)-(01, 10): LPAR(OP) '('
[10](01, 10)-(01, 11): NAME(NAME) 's'
[10](01, 11)-(01, 12): COMMA(OP) ','
[10](01, 13)-(01, 34): STRING(STRING) '"is not a palindrome"'
[10](01, 34)-(01, 35): RPAR(OP) ')'
[10](01, 35)-(01, 36): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

