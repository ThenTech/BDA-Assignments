[00](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[00](01, 00)-(01, 08): NAME(NAME) 'string11'
[00](01, 09)-(01, 10): EQUAL(OP) '='
[00](01, 11)-(01, 16): NAME(NAME) 'input'
[00](01, 16)-(01, 17): LPAR(OP) '('
[00](01, 17)-(01, 36): STRING(STRING) "'Geef een woord in'"
[00](01, 36)-(01, 37): RPAR(OP) ')'
[00](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[00](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[01](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[01](01, 00)-(01, 08): NAME(NAME) 'string22'
[01](01, 09)-(01, 10): EQUAL(OP) '='
[01](01, 11)-(01, 16): NAME(NAME) 'input'
[01](01, 16)-(01, 17): LPAR(OP) '('
[01](01, 17)-(01, 36): STRING(STRING) "'geef tweede woord'"
[01](01, 36)-(01, 37): RPAR(OP) ')'
[01](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[01](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[02](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[02](01, 00)-(01, 15): NAME(NAME) 'aantal_letters1'
[02](01, 15)-(01, 16): EQUAL(OP) '='
[02](01, 16)-(01, 18): STRING(STRING) '""'
[02](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[02](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[03](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[03](01, 00)-(01, 15): NAME(NAME) 'aantal_letters2'
[03](01, 15)-(01, 16): EQUAL(OP) '='
[03](01, 16)-(01, 18): STRING(STRING) '""'
[03](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[03](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[04](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[04](01, 00)-(01, 01): NL(NL) '\n'
[04](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[05](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[05](01, 00)-(01, 07): NAME(NAME) 'alfabet'
[05](01, 07)-(01, 08): EQUAL(OP) '='
[05](01, 08)-(01, 09): LSQB(OP) '['
[05](01, 09)-(01, 12): STRING(STRING) '"a"'
[05](01, 12)-(01, 13): COMMA(OP) ','
[05](01, 13)-(01, 16): STRING(STRING) '"b"'
[05](01, 16)-(01, 17): COMMA(OP) ','
[05](01, 17)-(01, 20): STRING(STRING) '"c"'
[05](01, 20)-(01, 21): COMMA(OP) ','
[05](01, 21)-(01, 24): STRING(STRING) '"d"'
[05](01, 24)-(01, 25): COMMA(OP) ','
[05](01, 25)-(01, 28): STRING(STRING) '"e"'
[05](01, 28)-(01, 29): COMMA(OP) ','
[05](01, 29)-(01, 32): STRING(STRING) '"f"'
[05](01, 32)-(01, 33): COMMA(OP) ','
[05](01, 33)-(01, 36): STRING(STRING) '"g"'
[05](01, 36)-(01, 37): COMMA(OP) ','
[05](01, 37)-(01, 40): STRING(STRING) '"h"'
[05](01, 40)-(01, 41): COMMA(OP) ','
[05](01, 41)-(01, 44): STRING(STRING) '"i"'
[05](01, 44)-(01, 45): COMMA(OP) ','
[05](01, 45)-(01, 48): STRING(STRING) '"j"'
[05](01, 48)-(01, 49): COMMA(OP) ','
[05](01, 49)-(01, 52): STRING(STRING) '"k"'
[05](01, 52)-(01, 53): COMMA(OP) ','
[05](01, 53)-(01, 56): STRING(STRING) '"l"'
[05](01, 56)-(01, 57): COMMA(OP) ','
[05](01, 57)-(01, 60): STRING(STRING) '"m"'
[05](01, 60)-(01, 61): COMMA(OP) ','
[05](01, 61)-(01, 64): STRING(STRING) '"n"'
[05](01, 64)-(01, 65): COMMA(OP) ','
[05](01, 65)-(01, 68): STRING(STRING) '"o"'
[05](01, 68)-(01, 69): COMMA(OP) ','
[05](01, 69)-(01, 72): STRING(STRING) '"p"'
[05](01, 72)-(01, 73): COMMA(OP) ','
[05](01, 73)-(01, 76): STRING(STRING) '"q"'
[05](01, 76)-(01, 77): COMMA(OP) ','
[05](01, 77)-(01, 80): STRING(STRING) '"r"'
[05](01, 80)-(01, 81): COMMA(OP) ','
[05](01, 81)-(01, 84): STRING(STRING) '"s"'
[05](01, 84)-(01, 85): COMMA(OP) ','
[05](01, 85)-(01, 88): STRING(STRING) '"t"'
[05](01, 88)-(01, 89): COMMA(OP) ','
[05](01, 89)-(01, 92): STRING(STRING) '"u"'
[05](01, 92)-(01, 93): COMMA(OP) ','
[05](01, 93)-(01, 96): STRING(STRING) '"v"'
[05](01, 96)-(01, 97): COMMA(OP) ','
[05](01, 97)-(01, 100): STRING(STRING) '"w"'
[05](01, 100)-(01, 101): COMMA(OP) ','
[05](01, 101)-(01, 104): STRING(STRING) '"x"'
[05](01, 104)-(01, 105): COMMA(OP) ','
[05](01, 105)-(01, 108): STRING(STRING) '"y"'
[05](01, 108)-(01, 109): COMMA(OP) ','
[05](01, 109)-(01, 112): STRING(STRING) '"z"'
[05](01, 112)-(01, 113): RSQB(OP) ']'
[05](01, 113)-(01, 114): NEWLINE(NEWLINE) '\n'
[05](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[06](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[06](01, 00)-(01, 01): NL(NL) '\n'
[06](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[07](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[07](01, 00)-(01, 07): NAME(NAME) 'string1'
[07](01, 07)-(01, 08): EQUAL(OP) '='
[07](01, 08)-(01, 10): STRING(STRING) '""'
[07](01, 10)-(01, 11): NEWLINE(NEWLINE) '\n'
[07](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[08](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[08](01, 00)-(01, 07): NAME(NAME) 'string2'
[08](01, 07)-(01, 08): EQUAL(OP) '='
[08](01, 08)-(01, 10): STRING(STRING) '""'
[08](01, 10)-(01, 11): NEWLINE(NEWLINE) '\n'
[08](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[09](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[09](01, 00)-(01, 03): NAME(NAME) 'for'
[09](01, 04)-(01, 05): NAME(NAME) 'x'
[09](01, 06)-(01, 08): NAME(NAME) 'in'
[09](01, 09)-(01, 17): NAME(NAME) 'string11'
[09](01, 17)-(01, 18): COLON(OP) ':'
[09](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[09](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[10](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[10](01, 00)-(01, 04): INDENT(INDENT) '    '
[10](01, 04)-(01, 06): NAME(NAME) 'if'
[10](01, 07)-(01, 08): NAME(NAME) 'x'
[10](01, 09)-(01, 11): NOTEQUAL(OP) '!='
[10](01, 12)-(01, 15): STRING(STRING) '" "'
[10](01, 15)-(01, 16): COLON(OP) ':'
[10](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[10](02, 00)-(02, 00): DEDENT(DEDENT)
[10](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[11](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[11](01, 00)-(01, 08): INDENT(INDENT) '        '
[11](01, 08)-(01, 15): NAME(NAME) 'string1'
[11](01, 16)-(01, 17): EQUAL(OP) '='
[11](01, 18)-(01, 25): NAME(NAME) 'string1'
[11](01, 26)-(01, 27): PLUS(OP) '+'
[11](01, 28)-(01, 29): NAME(NAME) 'x'
[11](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[11](02, 00)-(02, 00): DEDENT(DEDENT)
[11](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[12](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[12](01, 00)-(01, 03): NAME(NAME) 'for'
[12](01, 04)-(01, 05): NAME(NAME) 'x'
[12](01, 06)-(01, 08): NAME(NAME) 'in'
[12](01, 09)-(01, 17): NAME(NAME) 'string22'
[12](01, 17)-(01, 18): COLON(OP) ':'
[12](01, 18)-(01, 19): NEWLINE(NEWLINE) '\n'
[12](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[13](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[13](01, 00)-(01, 04): INDENT(INDENT) '    '
[13](01, 04)-(01, 06): NAME(NAME) 'if'
[13](01, 07)-(01, 08): NAME(NAME) 'x'
[13](01, 09)-(01, 11): NOTEQUAL(OP) '!='
[13](01, 12)-(01, 15): STRING(STRING) '" "'
[13](01, 15)-(01, 16): COLON(OP) ':'
[13](01, 16)-(01, 17): NEWLINE(NEWLINE) '\n'
[13](02, 00)-(02, 00): DEDENT(DEDENT)
[13](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[14](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[14](01, 00)-(01, 08): INDENT(INDENT) '        '
[14](01, 08)-(01, 15): NAME(NAME) 'string2'
[14](01, 16)-(01, 17): EQUAL(OP) '='
[14](01, 18)-(01, 25): NAME(NAME) 'string2'
[14](01, 26)-(01, 27): PLUS(OP) '+'
[14](01, 28)-(01, 29): NAME(NAME) 'x'
[14](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[14](02, 00)-(02, 00): DEDENT(DEDENT)
[14](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[15](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[15](01, 00)-(01, 01): NL(NL) '\n'
[15](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[16](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[16](01, 00)-(01, 13): NAME(NAME) 'string1_lijst'
[16](01, 14)-(01, 15): EQUAL(OP) '='
[16](01, 16)-(01, 20): NAME(NAME) 'list'
[16](01, 20)-(01, 21): LPAR(OP) '('
[16](01, 21)-(01, 28): NAME(NAME) 'string1'
[16](01, 28)-(01, 29): RPAR(OP) ')'
[16](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[16](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[17](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[17](01, 00)-(01, 13): NAME(NAME) 'string2_lijst'
[17](01, 14)-(01, 15): EQUAL(OP) '='
[17](01, 16)-(01, 20): NAME(NAME) 'list'
[17](01, 20)-(01, 21): LPAR(OP) '('
[17](01, 21)-(01, 28): NAME(NAME) 'string2'
[17](01, 28)-(01, 29): RPAR(OP) ')'
[17](01, 29)-(01, 30): NEWLINE(NEWLINE) '\n'
[17](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[18](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[18](01, 00)-(01, 01): NL(NL) '\n'
[18](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[19](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[19](01, 00)-(01, 02): NAME(NAME) 'if'
[19](01, 03)-(01, 06): NAME(NAME) 'len'
[19](01, 06)-(01, 07): LPAR(OP) '('
[19](01, 07)-(01, 20): NAME(NAME) 'string1_lijst'
[19](01, 20)-(01, 21): RPAR(OP) ')'
[19](01, 22)-(01, 24): EQEQUAL(OP) '=='
[19](01, 25)-(01, 28): NAME(NAME) 'len'
[19](01, 28)-(01, 29): LPAR(OP) '('
[19](01, 29)-(01, 42): NAME(NAME) 'string2_lijst'
[19](01, 42)-(01, 43): RPAR(OP) ')'
[19](01, 43)-(01, 44): COLON(OP) ':'
[19](01, 44)-(01, 45): NEWLINE(NEWLINE) '\n'
[19](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[20](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[20](01, 00)-(01, 04): INDENT(INDENT) '    '
[20](01, 04)-(01, 07): NAME(NAME) 'for'
[20](01, 08)-(01, 10): NAME(NAME) 'el'
[20](01, 11)-(01, 13): NAME(NAME) 'in'
[20](01, 14)-(01, 21): NAME(NAME) 'alfabet'
[20](01, 21)-(01, 22): COLON(OP) ':'
[20](01, 22)-(01, 23): NEWLINE(NEWLINE) '\n'
[20](02, 00)-(02, 00): DEDENT(DEDENT)
[20](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[21](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[21](01, 00)-(01, 08): INDENT(INDENT) '        '
[21](01, 08)-(01, 15): NAME(NAME) 'teller1'
[21](01, 16)-(01, 17): EQUAL(OP) '='
[21](01, 18)-(01, 19): NUMBER(NUMBER) '0'
[21](01, 19)-(01, 20): NEWLINE(NEWLINE) '\n'
[21](02, 00)-(02, 00): DEDENT(DEDENT)
[21](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[22](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[22](01, 00)-(01, 08): INDENT(INDENT) '        '
[22](01, 08)-(01, 15): NAME(NAME) 'teller2'
[22](01, 15)-(01, 16): EQUAL(OP) '='
[22](01, 16)-(01, 17): NUMBER(NUMBER) '0'
[22](01, 17)-(01, 18): NEWLINE(NEWLINE) '\n'
[22](02, 00)-(02, 00): DEDENT(DEDENT)
[22](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[23](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[23](01, 00)-(01, 08): INDENT(INDENT) '        '
[23](01, 08)-(01, 11): NAME(NAME) 'for'
[23](01, 12)-(01, 18): NAME(NAME) 'waarde'
[23](01, 19)-(01, 21): NAME(NAME) 'in'
[23](01, 22)-(01, 35): NAME(NAME) 'string1_lijst'
[23](01, 35)-(01, 36): COLON(OP) ':'
[23](01, 36)-(01, 37): NEWLINE(NEWLINE) '\n'
[23](02, 00)-(02, 00): DEDENT(DEDENT)
[23](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[24](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[24](01, 00)-(01, 12): INDENT(INDENT) '            '
[24](01, 12)-(01, 14): NAME(NAME) 'if'
[24](01, 15)-(01, 17): NAME(NAME) 'el'
[24](01, 18)-(01, 20): EQEQUAL(OP) '=='
[24](01, 21)-(01, 27): NAME(NAME) 'waarde'
[24](01, 27)-(01, 28): COLON(OP) ':'
[24](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[24](02, 00)-(02, 00): DEDENT(DEDENT)
[24](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[25](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[25](01, 00)-(01, 16): INDENT(INDENT) '                '
[25](01, 16)-(01, 23): NAME(NAME) 'teller1'
[25](01, 24)-(01, 25): EQUAL(OP) '='
[25](01, 26)-(01, 33): NAME(NAME) 'teller1'
[25](01, 34)-(01, 35): PLUS(OP) '+'
[25](01, 36)-(01, 37): NUMBER(NUMBER) '1'
[25](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[25](02, 00)-(02, 00): DEDENT(DEDENT)
[25](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[26](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[26](01, 00)-(01, 08): INDENT(INDENT) '        '
[26](01, 08)-(01, 23): NAME(NAME) 'aantal_letters1'
[26](01, 24)-(01, 25): EQUAL(OP) '='
[26](01, 26)-(01, 41): NAME(NAME) 'aantal_letters1'
[26](01, 42)-(01, 43): PLUS(OP) '+'
[26](01, 44)-(01, 47): NAME(NAME) 'str'
[26](01, 47)-(01, 48): LPAR(OP) '('
[26](01, 48)-(01, 55): NAME(NAME) 'teller1'
[26](01, 55)-(01, 56): RPAR(OP) ')'
[26](01, 56)-(01, 57): NEWLINE(NEWLINE) '\n'
[26](02, 00)-(02, 00): DEDENT(DEDENT)
[26](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[27](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[27](01, 00)-(01, 08): INDENT(INDENT) '        '
[27](01, 08)-(01, 11): NAME(NAME) 'for'
[27](01, 12)-(01, 18): NAME(NAME) 'waarde'
[27](01, 19)-(01, 21): NAME(NAME) 'in'
[27](01, 22)-(01, 35): NAME(NAME) 'string2_lijst'
[27](01, 35)-(01, 36): COLON(OP) ':'
[27](01, 36)-(01, 37): NEWLINE(NEWLINE) '\n'
[27](02, 00)-(02, 00): DEDENT(DEDENT)
[27](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[28](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[28](01, 00)-(01, 12): INDENT(INDENT) '            '
[28](01, 12)-(01, 14): NAME(NAME) 'if'
[28](01, 15)-(01, 17): NAME(NAME) 'el'
[28](01, 18)-(01, 20): EQEQUAL(OP) '=='
[28](01, 21)-(01, 27): NAME(NAME) 'waarde'
[28](01, 27)-(01, 28): COLON(OP) ':'
[28](01, 28)-(01, 29): NEWLINE(NEWLINE) '\n'
[28](02, 00)-(02, 00): DEDENT(DEDENT)
[28](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[29](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[29](01, 00)-(01, 16): INDENT(INDENT) '                '
[29](01, 16)-(01, 23): NAME(NAME) 'teller2'
[29](01, 24)-(01, 25): EQUAL(OP) '='
[29](01, 26)-(01, 33): NAME(NAME) 'teller2'
[29](01, 34)-(01, 35): PLUS(OP) '+'
[29](01, 36)-(01, 37): NUMBER(NUMBER) '1'
[29](01, 37)-(01, 38): NEWLINE(NEWLINE) '\n'
[29](02, 00)-(02, 00): DEDENT(DEDENT)
[29](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[30](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[30](01, 00)-(01, 08): INDENT(INDENT) '        '
[30](01, 08)-(01, 23): NAME(NAME) 'aantal_letters2'
[30](01, 24)-(01, 25): EQUAL(OP) '='
[30](01, 26)-(01, 41): NAME(NAME) 'aantal_letters2'
[30](01, 42)-(01, 43): PLUS(OP) '+'
[30](01, 44)-(01, 47): NAME(NAME) 'str'
[30](01, 47)-(01, 48): LPAR(OP) '('
[30](01, 48)-(01, 55): NAME(NAME) 'teller2'
[30](01, 55)-(01, 56): RPAR(OP) ')'
[30](01, 56)-(01, 57): NEWLINE(NEWLINE) '\n'
[30](02, 00)-(02, 00): DEDENT(DEDENT)
[30](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[31](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[31](01, 00)-(01, 04): INDENT(INDENT) '    '
[31](01, 04)-(01, 06): NAME(NAME) 'if'
[31](01, 07)-(01, 22): NAME(NAME) 'aantal_letters1'
[31](01, 23)-(01, 25): EQEQUAL(OP) '=='
[31](01, 26)-(01, 41): NAME(NAME) 'aantal_letters2'
[31](01, 41)-(01, 42): COLON(OP) ':'
[31](01, 42)-(01, 43): NEWLINE(NEWLINE) '\n'
[31](02, 00)-(02, 00): DEDENT(DEDENT)
[31](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[32](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[32](01, 00)-(01, 08): INDENT(INDENT) '        '
[32](01, 08)-(01, 13): NAME(NAME) 'print'
[32](01, 13)-(01, 14): LPAR(OP) '('
[32](01, 14)-(01, 22): NAME(NAME) 'string11'
[32](01, 22)-(01, 23): COMMA(OP) ','
[32](01, 24)-(01, 29): STRING(STRING) '"and"'
[32](01, 29)-(01, 30): COMMA(OP) ','
[32](01, 31)-(01, 39): NAME(NAME) 'string22'
[32](01, 39)-(01, 40): COMMA(OP) ','
[32](01, 41)-(01, 55): STRING(STRING) '"are anagrams"'
[32](01, 55)-(01, 56): RPAR(OP) ')'
[32](01, 56)-(01, 57): NEWLINE(NEWLINE) '\n'
[32](02, 00)-(02, 00): DEDENT(DEDENT)
[32](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[33](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[33](01, 00)-(01, 04): INDENT(INDENT) '    '
[33](01, 04)-(01, 08): NAME(NAME) 'else'
[33](01, 08)-(01, 09): COLON(OP) ':'
[33](01, 09)-(01, 10): NEWLINE(NEWLINE) '\n'
[33](02, 00)-(02, 00): DEDENT(DEDENT)
[33](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[34](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[34](01, 00)-(01, 08): INDENT(INDENT) '        '
[34](01, 08)-(01, 13): NAME(NAME) 'print'
[34](01, 13)-(01, 14): LPAR(OP) '('
[34](01, 14)-(01, 22): NAME(NAME) 'string11'
[34](01, 22)-(01, 23): COMMA(OP) ','
[34](01, 24)-(01, 29): STRING(STRING) '"and"'
[34](01, 29)-(01, 30): COMMA(OP) ','
[34](01, 31)-(01, 39): NAME(NAME) 'string22'
[34](01, 39)-(01, 40): COMMA(OP) ','
[34](01, 41)-(01, 59): STRING(STRING) '"are not anagrams"'
[34](01, 59)-(01, 60): RPAR(OP) ')'
[34](01, 60)-(01, 61): NEWLINE(NEWLINE) '\n'
[34](02, 00)-(02, 00): DEDENT(DEDENT)
[34](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[35](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[35](01, 00)-(01, 01): NL(NL) '\n'
[35](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[36](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[36](01, 00)-(01, 04): NAME(NAME) 'else'
[36](01, 04)-(01, 05): COLON(OP) ':'
[36](01, 05)-(01, 06): NEWLINE(NEWLINE) '\n'
[36](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

[37](00, 00)-(00, 00): ENCODING(ENCODING) 'utf-8'
[37](01, 00)-(01, 04): INDENT(INDENT) '    '
[37](01, 04)-(01, 09): NAME(NAME) 'print'
[37](01, 09)-(01, 10): LPAR(OP) '('
[37](01, 10)-(01, 18): NAME(NAME) 'string11'
[37](01, 18)-(01, 19): COMMA(OP) ','
[37](01, 20)-(01, 25): STRING(STRING) '"and"'
[37](01, 25)-(01, 26): COMMA(OP) ','
[37](01, 27)-(01, 35): NAME(NAME) 'string22'
[37](01, 35)-(01, 36): COMMA(OP) ','
[37](01, 37)-(01, 55): STRING(STRING) '"are not anagrams"'
[37](01, 55)-(01, 56): RPAR(OP) ')'
[37](01, 56)-(01, 57): NEWLINE(NEWLINE)
[37](02, 00)-(02, 00): DEDENT(DEDENT)
[37](02, 00)-(02, 00): ENDMARKER(ENDMARKER)

